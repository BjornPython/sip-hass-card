/*! For license information please see sipjs-card.js.LICENSE.txt */
(()=>{var e={7:e=>{"use strict";var t,n="object"==typeof Reflect?Reflect:null,s=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var r=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(n,s){function r(n){e.removeListener(t,i),s(n)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",r),n([].slice.call(arguments))}m(e,t,i,{once:!0}),"error"!==t&&function(e,t){"function"==typeof e.on&&m(e,"error",t,{once:!0})}(e,r)}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var l=10;function o(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function a(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function u(e,t,n,s){var r,i,l,u;if(o(n),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),l=i[t]),void 0===l)l=i[t]=n,++e._eventsCount;else if("function"==typeof l?l=i[t]=s?[n,l]:[l,n]:s?l.unshift(n):l.push(n),(r=a(e))>0&&l.length>r&&!l.warned){l.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+l.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=l.length,u=c,console&&console.warn&&console.warn(u)}return e}function c(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(e,t,n){var s={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},r=c.bind(s);return r.listener=n,s.wrapFn=r,r}function d(e,t,n){var s=e._events;if(void 0===s)return[];var r=s[t];return void 0===r?[]:"function"==typeof r?n?[r.listener||r]:[r]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(r):p(r,r.length)}function _(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function p(e,t){for(var n=new Array(t),s=0;s<t;++s)n[s]=e[s];return n}function m(e,t,n,s){if("function"==typeof e.on)s.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function r(i){s.once&&e.removeEventListener(t,r),n(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return l},set:function(e){if("number"!=typeof e||e<0||r(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");l=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||r(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return a(this)},i.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var l;if(t.length>0&&(l=t[0]),l instanceof Error)throw l;var o=new Error("Unhandled error."+(l?" ("+l.message+")":""));throw o.context=l,o}var a=i[e];if(void 0===a)return!1;if("function"==typeof a)s(a,this,t);else{var u=a.length,c=p(a,u);for(n=0;n<u;++n)s(c[n],this,t)}return!0},i.prototype.addListener=function(e,t){return u(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return u(this,e,t,!0)},i.prototype.once=function(e,t){return o(t),this.on(e,h(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return o(t),this.prependListener(e,h(this,e,t)),this},i.prototype.removeListener=function(e,t){var n,s,r,i,l;if(o(t),void 0===(s=this._events))return this;if(void 0===(n=s[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete s[e],s.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(r=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){l=n[i].listener,r=i;break}if(r<0)return this;0===r?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,r),1===n.length&&(s[e]=n[0]),void 0!==s.removeListener&&this.emit("removeListener",e,l||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,n,s;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var r,i=Object.keys(n);for(s=0;s<i.length;++s)"removeListener"!==(r=i[s])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(s=t.length-1;s>=0;s--)this.removeListener(e,t[s]);return this},i.prototype.listeners=function(e){return d(this,e,!0)},i.prototype.rawListeners=function(e){return d(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):_.call(e,t)},i.prototype.listenerCount=_,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},20:(e,t,n)=>{var s=function(e){return String(Number(e))===e?Number(e):e},r=function(e,t,n){var r=e.name&&e.names;e.push&&!t[e.push]?t[e.push]=[]:r&&!t[e.name]&&(t[e.name]={});var i=e.push?{}:r?t[e.name]:t;!function(e,t,n,r){if(r&&!n)t[r]=s(e[1]);else for(var i=0;i<n.length;i+=1)null!=e[i+1]&&(t[n[i]]=s(e[i+1]))}(n.match(e.reg),i,e.names,e.name),e.push&&t[e.push].push(i)},i=n(602),l=RegExp.prototype.test.bind(/^([a-z])=(.*)/);t.parse=function(e){var t={},n=[],s=t;return e.split(/(\r\n|\r|\n)/).filter(l).forEach((function(e){var t=e[0],l=e.slice(2);"m"===t&&(n.push({rtp:[],fmtp:[]}),s=n[n.length-1]);for(var o=0;o<(i[t]||[]).length;o+=1){var a=i[t][o];if(a.reg.test(l))return r(a,s,l)}})),t.media=n,t};var o=function(e,t){var n=t.split(/=(.+)/,2);return 2===n.length?e[n[0]]=s(n[1]):1===n.length&&t.length>1&&(e[n[0]]=void 0),e};t.parseParams=function(e){return e.split(/;\s?/).reduce(o,{})},t.parseFmtpConfig=t.parseParams,t.parsePayloads=function(e){return e.toString().split(" ").map(Number)},t.parseRemoteCandidates=function(e){for(var t=[],n=e.split(" ").map(s),r=0;r<n.length;r+=3)t.push({component:n[r],ip:n[r+1],port:n[r+2]});return t},t.parseImageAttributes=function(e){return e.split(" ").map((function(e){return e.substring(1,e.length-1).split(",").reduce(o,{})}))},t.parseSimulcastStreamList=function(e){return e.split(";").map((function(e){return e.split(",").map((function(e){var t,n=!1;return"~"!==e[0]?t=s(e):(t=s(e.substring(1,e.length)),n=!0),{scid:t,paused:n}}))}))}},32:(e,t,n)=>{const s=n(152),r=n(259),i=n(663),l=n(771),o=new s("sanityCheck"),a=[function(){const e=["from","to","call_id","cseq","via"];for(const t of e)if(!h.hasHeader(t))return o.debug(`missing mandatory header field : ${t}, dropping the response`),!1}],u=[function(){if("sip"!==h.s("to").uri.scheme)return p(416),!1},function(){if(!h.to_tag&&h.call_id.substr(0,5)===d.configuration.jssip_id)return p(482),!1},function(){if(l.str_utf8_length(h.body)<h.getHeader("content-length"))return p(400),!1},function(){const e=h.from_tag,t=h.call_id,n=h.cseq;let s;if(!h.to_tag)if(h.method===r.INVITE){if(d._transactions.ist[h.via_branch])return!1;for(const r in d._transactions.ist)if(Object.prototype.hasOwnProperty.call(d._transactions.ist,r)&&(s=d._transactions.ist[r],s.request.from_tag===e&&s.request.call_id===t&&s.request.cseq===n))return p(482),!1}else{if(d._transactions.nist[h.via_branch])return!1;for(const r in d._transactions.nist)if(Object.prototype.hasOwnProperty.call(d._transactions.nist,r)&&(s=d._transactions.nist[r],s.request.from_tag===e&&s.request.call_id===t&&s.request.cseq===n))return p(482),!1}}],c=[function(){if(h.getHeaders("via").length>1)return o.debug("more than one Via header field present in the response, dropping the response"),!1},function(){if(l.str_utf8_length(h.body)<h.getHeader("content-length"))return o.debug("message body length is lower than the value in Content-Length header field, dropping the response"),!1}];let h,d,_;function p(e){const t=h.getHeaders("via");let n,s=`SIP/2.0 ${e} ${r.REASON_PHRASE[e]}\r\n`;for(const e of t)s+=`Via: ${e}\r\n`;n=h.getHeader("To"),h.to_tag||(n+=`;tag=${l.newTag()}`),s+=`To: ${n}\r\n`,s+=`From: ${h.getHeader("From")}\r\n`,s+=`Call-ID: ${h.call_id}\r\n`,s+=`CSeq: ${h.cseq} ${h.method}\r\n`,s+="\r\n",_.send(s)}e.exports=(e,t,n)=>{h=e,d=t,_=n;for(const e of a)if(!1===e())return!1;if(h instanceof i.IncomingRequest){for(const e of u)if(!1===e())return!1}else if(h instanceof i.IncomingResponse)for(const e of c)if(!1===e())return!1;return!0}},52:(e,t,n)=>{const s=n(152),r=n(663),i=n(259),l=n(717),o=n(287),a=n(771),u=new s("Dialog"),c={STATUS_EARLY:1,STATUS_CONFIRMED:2};e.exports=class{static get C(){return c}constructor(e,t,n,s=c.STATUS_CONFIRMED){if(this._owner=e,this._ua=e._ua,this._uac_pending_reply=!1,this._uas_pending_reply=!1,!t.hasHeader("contact"))return{error:"unable to create a Dialog without Contact header field"};t instanceof r.IncomingResponse&&(s=t.status_code<200?c.STATUS_EARLY:c.STATUS_CONFIRMED);const i=t.parseHeader("contact");"UAS"===n?(this._id={call_id:t.call_id,local_tag:t.to_tag,remote_tag:t.from_tag,toString(){return this.call_id+this.local_tag+this.remote_tag}},this._state=s,this._remote_seqnum=t.cseq,this._local_uri=t.parseHeader("to").uri,this._remote_uri=t.parseHeader("from").uri,this._remote_target=i.uri,this._route_set=t.getHeaders("record-route"),this._ack_seqnum=this._remote_seqnum):"UAC"===n&&(this._id={call_id:t.call_id,local_tag:t.from_tag,remote_tag:t.to_tag,toString(){return this.call_id+this.local_tag+this.remote_tag}},this._state=s,this._local_seqnum=t.cseq,this._local_uri=t.parseHeader("from").uri,this._remote_uri=t.parseHeader("to").uri,this._remote_target=i.uri,this._route_set=t.getHeaders("record-route").reverse(),this._ack_seqnum=null),this._ua.newDialog(this),u.debug(`new ${n} dialog created with status ${this._state===c.STATUS_EARLY?"EARLY":"CONFIRMED"}`)}get id(){return this._id}get local_seqnum(){return this._local_seqnum}set local_seqnum(e){this._local_seqnum=e}get owner(){return this._owner}get uac_pending_reply(){return this._uac_pending_reply}set uac_pending_reply(e){this._uac_pending_reply=e}get uas_pending_reply(){return this._uas_pending_reply}update(e,t){this._state=c.STATUS_CONFIRMED,u.debug(`dialog ${this._id.toString()}  changed to CONFIRMED state`),"UAC"===t&&(this._route_set=e.getHeaders("record-route").reverse())}terminate(){u.debug(`dialog ${this._id.toString()} deleted`),this._ua.destroyDialog(this)}sendRequest(e,t={}){const n=a.cloneArray(t.extraHeaders),s=a.cloneObject(t.eventHandlers),r=t.body||null,i=this._createRequest(e,n,r);return s.onAuthenticated=()=>{this._local_seqnum+=1},new o(this,i,s).send(),i}receiveRequest(e){this._checkInDialogRequest(e)&&(e.method===i.ACK&&null!==this._ack_seqnum?this._ack_seqnum=null:e.method===i.INVITE&&(this._ack_seqnum=e.cseq),this._owner.receiveRequest(e))}_createRequest(e,t,n){t=a.cloneArray(t),this._local_seqnum||(this._local_seqnum=Math.floor(1e4*Math.random()));const s=e===i.CANCEL||e===i.ACK?this._local_seqnum:this._local_seqnum+=1;return new r.OutgoingRequest(e,this._remote_target,this._ua,{cseq:s,call_id:this._id.call_id,from_uri:this._local_uri,from_tag:this._id.local_tag,to_uri:this._remote_uri,to_tag:this._id.remote_tag,route_set:this._route_set},t,n)}_checkInDialogRequest(e){if(this._remote_seqnum)if(e.cseq<this._remote_seqnum){if(e.method!==i.ACK)return e.reply(500),!1;if(null===this._ack_seqnum||e.cseq!==this._ack_seqnum)return!1}else e.cseq>this._remote_seqnum&&(this._remote_seqnum=e.cseq);else this._remote_seqnum=e.cseq;if(e.method===i.INVITE||e.method===i.UPDATE&&e.body){if(!0===this._uac_pending_reply)e.reply(491);else{if(!0===this._uas_pending_reply){const t=1+(10*Math.random()|0);return e.reply(500,null,[`Retry-After:${t}`]),!1}{this._uas_pending_reply=!0;const t=()=>{e.server_transaction.state!==l.C.STATUS_ACCEPTED&&e.server_transaction.state!==l.C.STATUS_COMPLETED&&e.server_transaction.state!==l.C.STATUS_TERMINATED||(e.server_transaction.removeListener("stateChanged",t),this._uas_pending_reply=!1)};e.server_transaction.on("stateChanged",t)}}e.hasHeader("contact")&&e.server_transaction.on("stateChanged",(()=>{e.server_transaction.state===l.C.STATUS_ACCEPTED&&(this._remote_target=e.parseHeader("contact").uri)}))}else e.method===i.NOTIFY&&e.hasHeader("contact")&&e.server_transaction.on("stateChanged",(()=>{e.server_transaction.state===l.C.STATUS_COMPLETED&&(this._remote_target=e.parseHeader("contact").uri)}));return!0}}},53:(e,t,n)=>{const s=n(771),r=n(259),i=n(555),l=n(128),o=n(893),a=n(582);t.settings={authorization_user:null,password:null,realm:null,ha1:null,authorization_jwt:null,display_name:null,uri:null,contact_uri:null,instance_id:null,use_preloaded_route:!1,session_timers:!0,session_timers_refresh_method:r.UPDATE,session_timers_force_refresher:!1,no_answer_timeout:60,register:!0,register_expires:600,registrar_server:null,sockets:null,connection_recovery_max_interval:r.CONNECTION_RECOVERY_MAX_INTERVAL,connection_recovery_min_interval:r.CONNECTION_RECOVERY_MIN_INTERVAL,via_host:`${s.createRandomToken(12)}.invalid`};const u={mandatory:{sockets(e){const t=[];if(o.isSocket(e))t.push({socket:e});else{if(!Array.isArray(e)||!e.length)return;for(const n of e)Object.prototype.hasOwnProperty.call(n,"socket")&&o.isSocket(n.socket)?t.push(n):o.isSocket(n)&&t.push({socket:n})}return t},uri(e){/^sip:/i.test(e)||(e=`${r.SIP}:${e}`);const t=l.parse(e);return t&&t.user?t:void 0}},optional:{authorization_user:e=>-1===i.parse(`"${e}"`,"quoted_string")?void 0:e,authorization_jwt(e){if("string"==typeof e)return e},user_agent(e){if("string"==typeof e)return e},connection_recovery_max_interval(e){if(s.isDecimal(e)){const t=Number(e);if(t>0)return t}},connection_recovery_min_interval(e){if(s.isDecimal(e)){const t=Number(e);if(t>0)return t}},contact_uri(e){if("string"==typeof e){const t=i.parse(e,"SIP_URI");if(-1!==t)return t}},display_name:e=>e,instance_id:e=>(/^uuid:/i.test(e)&&(e=e.substr(5)),-1===i.parse(e,"uuid")?void 0:e),no_answer_timeout(e){if(s.isDecimal(e)){const t=Number(e);if(t>0)return t}},session_timers(e){if("boolean"==typeof e)return e},session_timers_refresh_method(e){if("string"==typeof e&&((e=e.toUpperCase())===r.INVITE||e===r.UPDATE))return e},session_timers_force_refresher(e){if("boolean"==typeof e)return e},password:e=>String(e),realm:e=>String(e),ha1:e=>String(e),register(e){if("boolean"==typeof e)return e},register_expires(e){if(s.isDecimal(e)){const t=Number(e);if(t>0)return t}},registrar_server(e){/^sip:/i.test(e)||(e=`${r.SIP}:${e}`);const t=l.parse(e);return t?t.user?void 0:t:void 0},use_preloaded_route(e){if("boolean"==typeof e)return e}}};t.load=(e,t)=>{for(const n in u.mandatory){if(!t.hasOwnProperty(n))throw new a.ConfigurationError(n);{const s=t[n],r=u.mandatory[n](s);if(void 0===r)throw new a.ConfigurationError(n,s);e[n]=r}}for(const n in u.optional)if(t.hasOwnProperty(n)){const r=t[n];if(s.isEmpty(r))continue;const i=u.optional[n](r);if(void 0===i)throw new a.ConfigurationError(n,r);e[n]=i}}},128:(e,t,n)=>{const s=n(259),r=n(771),i=n(555);e.exports=class e{static parse(e){return-1!==(e=i.parse(e,"SIP_URI"))?e:void 0}constructor(e,t,n,r,i={},l={}){if(!n)throw new TypeError('missing or invalid "host" parameter');this._parameters={},this._headers={},this._scheme=e||s.SIP,this._user=t,this._host=n,this._port=r;for(const e in i)Object.prototype.hasOwnProperty.call(i,e)&&this.setParam(e,i[e]);for(const e in l)Object.prototype.hasOwnProperty.call(l,e)&&this.setHeader(e,l[e])}get scheme(){return this._scheme}set scheme(e){this._scheme=e.toLowerCase()}get user(){return this._user}set user(e){this._user=e}get host(){return this._host}set host(e){this._host=e.toLowerCase()}get port(){return this._port}set port(e){this._port=0===e?e:parseInt(e,10)||null}setParam(e,t){e&&(this._parameters[e.toLowerCase()]=null==t?null:t.toString())}getParam(e){if(e)return this._parameters[e.toLowerCase()]}hasParam(e){if(e)return!!this._parameters.hasOwnProperty(e.toLowerCase())}deleteParam(e){if(e=e.toLowerCase(),this._parameters.hasOwnProperty(e)){const t=this._parameters[e];return delete this._parameters[e],t}}clearParams(){this._parameters={}}setHeader(e,t){this._headers[r.headerize(e)]=Array.isArray(t)?t:[t]}getHeader(e){if(e)return this._headers[r.headerize(e)]}hasHeader(e){if(e)return!!this._headers.hasOwnProperty(r.headerize(e))}deleteHeader(e){if(e=r.headerize(e),this._headers.hasOwnProperty(e)){const t=this._headers[e];return delete this._headers[e],t}}clearHeaders(){this._headers={}}clone(){return new e(this._scheme,this._user,this._host,this._port,JSON.parse(JSON.stringify(this._parameters)),JSON.parse(JSON.stringify(this._headers)))}toString(){const e=[];let t=`${this._scheme}:`;this._user&&(t+=`${r.escapeUser(this._user)}@`),t+=this._host,(this._port||0===this._port)&&(t+=`:${this._port}`);for(const e in this._parameters)Object.prototype.hasOwnProperty.call(this._parameters,e)&&(t+=`;${e}`,null!==this._parameters[e]&&(t+=`=${this._parameters[e]}`));for(const t in this._headers)if(Object.prototype.hasOwnProperty.call(this._headers,t))for(const n of this._headers[t])e.push(`${t}=${n}`);return e.length>0&&(t+=`?${e.join("&")}`),t}toAor(e){let t=`${this._scheme}:`;return this._user&&(t+=`${r.escapeUser(this._user)}@`),t+=this._host,e&&(this._port||0===this._port)&&(t+=`:${this._port}`),t}}},134:(e,t,n)=>{const s=n(7).EventEmitter,r=n(152),i=n(259),l=n(555),o=n(771),a=new r("RTCSession:ReferSubscriber");e.exports=class extends s{constructor(e){super(),this._id=null,this._session=e}get id(){return this._id}sendRefer(e,t={}){a.debug("sendRefer()");const n=o.cloneArray(t.extraHeaders),s=o.cloneObject(t.eventHandlers);for(const e in s)Object.prototype.hasOwnProperty.call(s,e)&&this.on(e,s[e]);let r=null;t.replaces&&(r=t.replaces._request.call_id,r+=`;to-tag=${t.replaces._to_tag}`,r+=`;from-tag=${t.replaces._from_tag}`,r=encodeURIComponent(r));const l=`Refer-To: <${e}${r?`?Replaces=${r}`:""}>`;if(n.push(l),!n.some((e=>e.toLowerCase().startsWith("referred-by:")))){const e=`Referred-By: <${this._session._ua._configuration.uri._scheme}:${this._session._ua._configuration.uri._user}@${this._session._ua._configuration.uri._host}>`;n.push(e)}n.push(`Contact: ${this._session.contact}`);const u=this._session.sendRequest(i.REFER,{extraHeaders:n,eventHandlers:{onSuccessResponse:e=>{this._requestSucceeded(e)},onErrorResponse:e=>{this._requestFailed(e,i.causes.REJECTED)},onTransportError:()=>{this._requestFailed(null,i.causes.CONNECTION_ERROR)},onRequestTimeout:()=>{this._requestFailed(null,i.causes.REQUEST_TIMEOUT)},onDialogError:()=>{this._requestFailed(null,i.causes.DIALOG_ERROR)}}});this._id=u.cseq}receiveNotify(e){if(a.debug("receiveNotify()"),!e.body)return;const t=l.parse(e.body.trim(),"Status_Line");if(-1!==t)switch(!0){case/^100$/.test(t.status_code):this.emit("trying",{request:e,status_line:t});break;case/^1[0-9]{2}$/.test(t.status_code):this.emit("progress",{request:e,status_line:t});break;case/^2[0-9]{2}$/.test(t.status_code):this.emit("accepted",{request:e,status_line:t});break;default:this.emit("failed",{request:e,status_line:t})}else a.debug(`receiveNotify() | error parsing NOTIFY body: "${e.body}"`)}_requestSucceeded(e){a.debug("REFER succeeded"),a.debug('emit "requestSucceeded"'),this.emit("requestSucceeded",{response:e})}_requestFailed(e,t){a.debug("REFER failed"),a.debug('emit "requestFailed"'),this.emit("requestFailed",{response:e||null,cause:t})}}},152:(e,t,n)=>{const s=n(833),r="JsSIP";e.exports=class{constructor(e){e?(this._debug=s.default(`${r}:${e}`),this._warn=s.default(`${r}:WARN:${e}`),this._error=s.default(`${r}:ERROR:${e}`)):(this._debug=s.default(r),this._warn=s.default(`${r}:WARN`),this._error=s.default(`${r}:ERROR`)),this._debug.log=console.info.bind(console),this._warn.log=console.warn.bind(console),this._error.log=console.error.bind(console)}get debug(){return this._debug}get warn(){return this._warn}get error(){return this._error}}},167:(e,t,n)=>{const s=n(152),r=n(893),i=n(259),l=new s("Transport"),o={min_interval:i.CONNECTION_RECOVERY_MIN_INTERVAL,max_interval:i.CONNECTION_RECOVERY_MAX_INTERVAL};e.exports=class{constructor(e,t=o){l.debug("new()"),this.status=2,this.socket=null,this.sockets=[],this.recovery_options=t,this.recover_attempts=0,this.recovery_timer=null,this.close_requested=!1;try{this.textDecoder=new TextDecoder("utf8")}catch(e){l.warn(`cannot use TextDecoder: ${e}`)}if(void 0===e)throw new TypeError("Invalid argument. undefined 'sockets' argument");e instanceof Array||(e=[e]),e.forEach((function(e){if(!r.isSocket(e.socket))throw new TypeError("Invalid argument. invalid 'JsSIP.Socket' instance");if(e.weight&&!Number(e.weight))throw new TypeError("Invalid argument. 'weight' attribute is not a number");this.sockets.push({socket:e.socket,weight:e.weight||0,status:0})}),this),this._getSocket()}get via_transport(){return this.socket.via_transport}get url(){return this.socket.url}get sip_uri(){return this.socket.sip_uri}connect(){l.debug("connect()"),this.isConnected()?l.debug("Transport is already connected"):this.isConnecting()?l.debug("Transport is connecting"):(this.close_requested=!1,this.status=1,this.onconnecting({socket:this.socket,attempts:this.recover_attempts}),this.close_requested||(this.socket.onconnect=this._onConnect.bind(this),this.socket.ondisconnect=this._onDisconnect.bind(this),this.socket.ondata=this._onData.bind(this),this.socket.connect()))}disconnect(){l.debug("close()"),this.close_requested=!0,this.recover_attempts=0,this.status=2,null!==this.recovery_timer&&(clearTimeout(this.recovery_timer),this.recovery_timer=null),this.socket.onconnect=()=>{},this.socket.ondisconnect=()=>{},this.socket.ondata=()=>{},this.socket.disconnect(),this.ondisconnect({socket:this.socket,error:!1})}send(e){if(l.debug("send()"),!this.isConnected())return l.warn("unable to send message, transport is not connected"),!1;const t=e.toString();return l.debug(`sending message:\n\n${t}\n`),this.socket.send(t)}isConnected(){return 0===this.status}isConnecting(){return 1===this.status}_reconnect(){this.recover_attempts+=1;let e=Math.floor(Math.random()*Math.pow(2,this.recover_attempts)+1);e<this.recovery_options.min_interval?e=this.recovery_options.min_interval:e>this.recovery_options.max_interval&&(e=this.recovery_options.max_interval),l.debug(`reconnection attempt: ${this.recover_attempts}. next connection attempt in ${e} seconds`),this.recovery_timer=setTimeout((()=>{this.close_requested||this.isConnected()||this.isConnecting()||(this._getSocket(),this.connect())}),1e3*e)}_getSocket(){let e=[];if(this.sockets.forEach((t=>{1!==t.status&&(0===e.length?e.push(t):t.weight>e[0].weight?e=[t]:t.weight===e[0].weight&&e.push(t))})),0===e.length)return this.sockets.forEach((e=>{e.status=0})),void this._getSocket();const t=Math.floor(Math.random()*e.length);this.socket=e[t].socket}_onConnect(){this.recover_attempts=0,this.status=0,null!==this.recovery_timer&&(clearTimeout(this.recovery_timer),this.recovery_timer=null),this.onconnect({socket:this})}_onDisconnect(e,t,n){this.status=2,this.ondisconnect({socket:this.socket,error:e,code:t,reason:n}),this.close_requested||(this.sockets.forEach((function(e){this.socket===e.socket&&(e.status=1)}),this),this._reconnect(e))}_onData(e){if("\r\n"!==e){if("string"!=typeof e){try{e=this.textDecoder?this.textDecoder.decode(e):String.fromCharCode.apply(null,new Uint8Array(e))}catch(e){return void l.debug("received binary message failed to be converted into string, message discarded")}l.debug(`received binary message:\n\n${e}\n`)}else l.debug(`received text message:\n\n${e}\n`);this.ondata({transport:this,message:e})}else l.debug("received message with CRLF Keep Alive response")}}},211:(e,t,n)=>{const s=n(152),r=n(555),i=n(663),l=new s("Parser");function o(e,t){let n=t,s=0,r=0;if(e.substring(n,n+2).match(/(^\r\n)/))return-2;for(;0===s;){if(r=e.indexOf("\r\n",n),-1===r)return r;!e.substring(r+2,r+4).match(/(^\r\n)/)&&e.charAt(r+2).match(/(^\s+)/)?n=r+2:s=r}return s}function a(e,t,n,s){let l;const o=t.indexOf(":",n),a=t.substring(n,o).trim(),u=t.substring(o+1,s).trim();switch(a.toLowerCase()){case"via":case"v":e.addHeader("via",u),1===e.getHeaders("via").length?(l=e.parseHeader("Via"),l&&(e.via=l,e.via_branch=l.branch)):l=0;break;case"from":case"f":e.setHeader("from",u),l=e.parseHeader("from"),l&&(e.from=l,e.from_tag=l.getParam("tag"));break;case"to":case"t":e.setHeader("to",u),l=e.parseHeader("to"),l&&(e.to=l,e.to_tag=l.getParam("tag"));break;case"record-route":if(l=r.parse(u,"Record_Route"),-1===l)l=void 0;else for(const t of l)e.addHeader("record-route",u.substring(t.possition,t.offset)),e.headers["Record-Route"][e.getHeaders("record-route").length-1].parsed=t.parsed;break;case"call-id":case"i":e.setHeader("call-id",u),l=e.parseHeader("call-id"),l&&(e.call_id=u);break;case"contact":case"m":if(l=r.parse(u,"Contact"),-1===l)l=void 0;else for(const t of l)e.addHeader("contact",u.substring(t.possition,t.offset)),e.headers.Contact[e.getHeaders("contact").length-1].parsed=t.parsed;break;case"content-length":case"l":e.setHeader("content-length",u),l=e.parseHeader("content-length");break;case"content-type":case"c":e.setHeader("content-type",u),l=e.parseHeader("content-type");break;case"cseq":e.setHeader("cseq",u),l=e.parseHeader("cseq"),l&&(e.cseq=l.value),e instanceof i.IncomingResponse&&(e.method=l.method);break;case"max-forwards":e.setHeader("max-forwards",u),l=e.parseHeader("max-forwards");break;case"www-authenticate":e.setHeader("www-authenticate",u),l=e.parseHeader("www-authenticate");break;case"proxy-authenticate":e.setHeader("proxy-authenticate",u),l=e.parseHeader("proxy-authenticate");break;case"session-expires":case"x":e.setHeader("session-expires",u),l=e.parseHeader("session-expires"),l&&(e.session_expires=l.expires,e.session_expires_refresher=l.refresher);break;case"refer-to":case"r":e.setHeader("refer-to",u),l=e.parseHeader("refer-to"),l&&(e.refer_to=l);break;case"replaces":e.setHeader("replaces",u),l=e.parseHeader("replaces"),l&&(e.replaces=l);break;case"event":case"o":e.setHeader("event",u),l=e.parseHeader("event"),l&&(e.event=l);break;default:e.addHeader(a,u),l=0}return void 0!==l||{error:`error parsing header "${a}"`}}t.parseMessage=(e,t)=>{let n,s,u=e.indexOf("\r\n");if(-1===u)return void l.warn("parseMessage() | no CRLF found, not a SIP message");const c=e.substring(0,u);let h=r.parse(c,"Request_Response");if(-1===h)return void l.warn(`parseMessage() | error parsing first line of SIP message: "${c}"`);h.status_code?(n=new i.IncomingResponse,n.status_code=h.status_code,n.reason_phrase=h.reason_phrase):(n=new i.IncomingRequest(t),n.method=h.method,n.ruri=h.uri),n.data=e;let d=u+2;for(;;){if(u=o(e,d),-2===u){s=d+2;break}if(-1===u)return void l.warn("parseMessage() | malformed message");if(h=a(n,e,d,u),!0!==h)return void l.warn("parseMessage() |",h.error);d=u+2}if(n.hasHeader("content-length")){const t=n.getHeader("content-length");n.body=e.substr(s,t)}else n.body=e.substring(s);return n}},221:(e,t,n)=>{const s=n(7).EventEmitter,r=n(152),i=n(259),l=n(663),o=n(771),a=n(446),u=n(582),c=n(128),h=new r("Message");e.exports=class extends s{constructor(e){super(),this._ua=e,this._request=null,this._closed=!1,this._direction=null,this._local_identity=null,this._remote_identity=null,this._is_replied=!1,this._data={}}get direction(){return this._direction}get local_identity(){return this._local_identity}get remote_identity(){return this._remote_identity}send(e,t,n={}){const s=e;if(void 0===e||void 0===t)throw new TypeError("Not enough arguments");if(!(e=this._ua.normalizeTarget(e)))throw new TypeError(`Invalid target: ${s}`);const r=o.cloneArray(n.extraHeaders),u=o.cloneObject(n.eventHandlers),h=n.contentType||"text/plain",d={};n.fromUserName&&(d.from_uri=new c("sip",n.fromUserName,this._ua.configuration.uri.host),r.push(`P-Preferred-Identity: ${this._ua.configuration.uri.toString()}`)),n.fromDisplayName&&(d.from_display_name=n.fromDisplayName);for(const e in u)Object.prototype.hasOwnProperty.call(u,e)&&this.on(e,u[e]);r.push(`Content-Type: ${h}`),this._request=new l.OutgoingRequest(i.MESSAGE,e,this._ua,d,r),t&&(this._request.body=t);const _=new a(this._ua,this._request,{onRequestTimeout:()=>{this._onRequestTimeout()},onTransportError:()=>{this._onTransportError()},onReceiveResponse:e=>{this._receiveResponse(e)}});this._newMessage("local",this._request),_.send()}init_incoming(e){this._request=e,this._newMessage("remote",e),this._is_replied||(this._is_replied=!0,e.reply(200)),this._close()}accept(e={}){const t=o.cloneArray(e.extraHeaders),n=e.body;if("incoming"!==this._direction)throw new u.NotSupportedError('"accept" not supported for outgoing Message');if(this._is_replied)throw new Error("incoming Message already replied");this._is_replied=!0,this._request.reply(200,null,t,n)}reject(e={}){const t=e.status_code||480,n=e.reason_phrase,s=o.cloneArray(e.extraHeaders),r=e.body;if("incoming"!==this._direction)throw new u.NotSupportedError('"reject" not supported for outgoing Message');if(this._is_replied)throw new Error("incoming Message already replied");if(t<300||t>=700)throw new TypeError(`Invalid status_code: ${t}`);this._is_replied=!0,this._request.reply(t,n,s,r)}_receiveResponse(e){if(!this._closed)switch(!0){case/^1[0-9]{2}$/.test(e.status_code):break;case/^2[0-9]{2}$/.test(e.status_code):this._succeeded("remote",e);break;default:{const t=o.sipErrorCause(e.status_code);this._failed("remote",e,t);break}}}_onRequestTimeout(){this._closed||this._failed("system",null,i.causes.REQUEST_TIMEOUT)}_onTransportError(){this._closed||this._failed("system",null,i.causes.CONNECTION_ERROR)}_close(){this._closed=!0,this._ua.destroyMessage(this)}_newMessage(e,t){"remote"===e?(this._direction="incoming",this._local_identity=t.to,this._remote_identity=t.from):"local"===e&&(this._direction="outgoing",this._local_identity=t.from,this._remote_identity=t.to),this._ua.newMessage(this,{originator:e,message:this,request:t})}_failed(e,t,n){h.debug("MESSAGE failed"),this._close(),h.debug('emit "failed"'),this.emit("failed",{originator:e,response:t||null,cause:n})}_succeeded(e,t){h.debug("MESSAGE succeeded"),this._close(),h.debug('emit "succeeded"'),this.emit("succeeded",{originator:e,response:t})}}},259:(e,t,n)=>{const s=n(633);e.exports={USER_AGENT:`${s.title} ${s.version}`,SIP:"sip",SIPS:"sips",causes:{CONNECTION_ERROR:"Connection Error",REQUEST_TIMEOUT:"Request Timeout",SIP_FAILURE_CODE:"SIP Failure Code",INTERNAL_ERROR:"Internal Error",BUSY:"Busy",REJECTED:"Rejected",REDIRECTED:"Redirected",UNAVAILABLE:"Unavailable",NOT_FOUND:"Not Found",ADDRESS_INCOMPLETE:"Address Incomplete",INCOMPATIBLE_SDP:"Incompatible SDP",MISSING_SDP:"Missing SDP",AUTHENTICATION_ERROR:"Authentication Error",BYE:"Terminated",WEBRTC_ERROR:"WebRTC Error",CANCELED:"Canceled",NO_ANSWER:"No Answer",EXPIRES:"Expires",NO_ACK:"No ACK",DIALOG_ERROR:"Dialog Error",USER_DENIED_MEDIA_ACCESS:"User Denied Media Access",BAD_MEDIA_DESCRIPTION:"Bad Media Description",RTP_TIMEOUT:"RTP Timeout"},SIP_ERROR_CAUSES:{REDIRECTED:[300,301,302,305,380],BUSY:[486,600],REJECTED:[403,603],NOT_FOUND:[404,604],UNAVAILABLE:[480,410,408,430],ADDRESS_INCOMPLETE:[484,424],INCOMPATIBLE_SDP:[488,606],AUTHENTICATION_ERROR:[401,407]},ACK:"ACK",BYE:"BYE",CANCEL:"CANCEL",INFO:"INFO",INVITE:"INVITE",MESSAGE:"MESSAGE",NOTIFY:"NOTIFY",OPTIONS:"OPTIONS",REGISTER:"REGISTER",REFER:"REFER",UPDATE:"UPDATE",SUBSCRIBE:"SUBSCRIBE",DTMF_TRANSPORT:{INFO:"INFO",RFC2833:"RFC2833"},REASON_PHRASE:{100:"Trying",180:"Ringing",181:"Call Is Being Forwarded",182:"Queued",183:"Session Progress",199:"Early Dialog Terminated",200:"OK",202:"Accepted",204:"No Notification",300:"Multiple Choices",301:"Moved Permanently",302:"Moved Temporarily",305:"Use Proxy",380:"Alternative Service",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",410:"Gone",412:"Conditional Request Failed",413:"Request Entity Too Large",414:"Request-URI Too Long",415:"Unsupported Media Type",416:"Unsupported URI Scheme",417:"Unknown Resource-Priority",420:"Bad Extension",421:"Extension Required",422:"Session Interval Too Small",423:"Interval Too Brief",424:"Bad Location Information",428:"Use Identity Header",429:"Provide Referrer Identity",430:"Flow Failed",433:"Anonymity Disallowed",436:"Bad Identity-Info",437:"Unsupported Certificate",438:"Invalid Identity Header",439:"First Hop Lacks Outbound Support",440:"Max-Breadth Exceeded",469:"Bad Info Package",470:"Consent Needed",478:"Unresolvable Destination",480:"Temporarily Unavailable",481:"Call/Transaction Does Not Exist",482:"Loop Detected",483:"Too Many Hops",484:"Address Incomplete",485:"Ambiguous",486:"Busy Here",487:"Request Terminated",488:"Not Acceptable Here",489:"Bad Event",491:"Request Pending",493:"Undecipherable",494:"Security Agreement Required",500:"JsSIP Internal Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Server Time-out",505:"Version Not Supported",513:"Message Too Large",580:"Precondition Failure",600:"Busy Everywhere",603:"Decline",604:"Does Not Exist Anywhere",606:"Not Acceptable"},ALLOWED_METHODS:"INVITE,ACK,CANCEL,BYE,UPDATE,MESSAGE,OPTIONS,REFER,INFO,NOTIFY",ACCEPTED_BODY_TYPES:"application/sdp, application/dtmf-relay",MAX_FORWARDS:69,SESSION_EXPIRES:90,MIN_SESSION_EXPIRES:60,CONNECTION_RECOVERY_MAX_INTERVAL:30,CONNECTION_RECOVERY_MIN_INTERVAL:2}},287:(e,t,n)=>{const s=n(259),r=n(717),i=n(377),l=n(446),o={onRequestTimeout:()=>{},onTransportError:()=>{},onSuccessResponse:()=>{},onErrorResponse:()=>{},onAuthenticated:()=>{},onDialogError:()=>{}};e.exports=class{constructor(e,t,n){this._dialog=e,this._ua=e._ua,this._request=t,this._eventHandlers=n,this._reattempt=!1,this._reattemptTimer=null;for(const e in o)Object.prototype.hasOwnProperty.call(o,e)&&(this._eventHandlers[e]||(this._eventHandlers[e]=o[e]))}get request(){return this._request}send(){const e=new l(this._ua,this._request,{onRequestTimeout:()=>{this._eventHandlers.onRequestTimeout()},onTransportError:()=>{this._eventHandlers.onTransportError()},onAuthenticated:e=>{this._eventHandlers.onAuthenticated(e)},onReceiveResponse:e=>{this._receiveResponse(e)}});if(e.send(),(this._request.method===s.INVITE||this._request.method===s.UPDATE&&this._request.body)&&e.clientTransaction.state!==r.C.STATUS_TERMINATED){this._dialog.uac_pending_reply=!0;const t=()=>{e.clientTransaction.state!==r.C.STATUS_ACCEPTED&&e.clientTransaction.state!==r.C.STATUS_COMPLETED&&e.clientTransaction.state!==r.C.STATUS_TERMINATED||(e.clientTransaction.removeListener("stateChanged",t),this._dialog.uac_pending_reply=!1)};e.clientTransaction.on("stateChanged",t)}}_receiveResponse(e){408===e.status_code||481===e.status_code?this._eventHandlers.onDialogError(e):e.method===s.INVITE&&491===e.status_code?this._reattempt?e.status_code>=200&&e.status_code<300?this._eventHandlers.onSuccessResponse(e):e.status_code>=300&&this._eventHandlers.onErrorResponse(e):(this._request.cseq=this._dialog.local_seqnum+=1,this._reattemptTimer=setTimeout((()=>{this._dialog.owner.status!==i.C.STATUS_TERMINATED&&(this._reattempt=!0,this._request_sender.send())}),1e3)):e.status_code>=200&&e.status_code<300?this._eventHandlers.onSuccessResponse(e):e.status_code>=300&&this._eventHandlers.onErrorResponse(e)}}},363:(e,t,n)=>{var s=n(20),r=n(804);t.write=r,t.parse=s.parse,t.parseParams=s.parseParams,t.parseFmtpConfig=s.parseFmtpConfig,t.parsePayloads=s.parsePayloads,t.parseRemoteCandidates=s.parseRemoteCandidates,t.parseImageAttributes=s.parseImageAttributes,t.parseSimulcastStreamList=s.parseSimulcastStreamList},377:(e,t,n)=>{const s=n(7).EventEmitter,r=n(363),i=n(152),l=n(259),o=n(582),a=n(717),u=n(771),c=n(530),h=n(663),d=n(52),_=n(446),p=n(635),m=n(748),f=n(434),g=n(134),T=n(128),v=new i("RTCSession"),C={STATUS_NULL:0,STATUS_INVITE_SENT:1,STATUS_1XX_RECEIVED:2,STATUS_INVITE_RECEIVED:3,STATUS_WAITING_FOR_ANSWER:4,STATUS_ANSWERED:5,STATUS_WAITING_FOR_ACK:6,STATUS_CANCELED:7,STATUS_TERMINATED:8,STATUS_CONFIRMED:9},E=["audio","video"];e.exports=class e extends s{static get C(){return C}constructor(e){v.debug("new"),super(),this._id=null,this._ua=e,this._status=C.STATUS_NULL,this._dialog=null,this._earlyDialogs={},this._contact=null,this._from_tag=null,this._to_tag=null,this._connection=null,this._connectionPromiseQueue=Promise.resolve(),this._request=null,this._is_canceled=!1,this._cancel_reason="",this._is_confirmed=!1,this._late_sdp=!1,this._rtcOfferConstraints=null,this._rtcAnswerConstraints=null,this._localMediaStream=null,this._localMediaStreamLocallyGenerated=!1,this._rtcReady=!0,this._iceReady=!1,this._timers={ackTimer:null,expiresTimer:null,invite2xxTimer:null,userNoAnswerTimer:null},this._direction=null,this._local_identity=null,this._remote_identity=null,this._start_time=null,this._end_time=null,this._tones=null,this._audioMuted=!1,this._videoMuted=!1,this._localHold=!1,this._remoteHold=!1,this._sessionTimers={enabled:this._ua.configuration.session_timers,refreshMethod:this._ua.configuration.session_timers_refresh_method,defaultExpires:l.SESSION_EXPIRES,currentExpires:null,running:!1,refresher:!1,timer:null},this._referSubscribers={},this._data={}}get C(){return C}get causes(){return l.causes}get id(){return this._id}get connection(){return this._connection}get contact(){return this._contact}get direction(){return this._direction}get local_identity(){return this._local_identity}get remote_identity(){return this._remote_identity}get start_time(){return this._start_time}get end_time(){return this._end_time}get data(){return this._data}set data(e){this._data=e}get status(){return this._status}isInProgress(){switch(this._status){case C.STATUS_NULL:case C.STATUS_INVITE_SENT:case C.STATUS_1XX_RECEIVED:case C.STATUS_INVITE_RECEIVED:case C.STATUS_WAITING_FOR_ANSWER:return!0;default:return!1}}isEstablished(){switch(this._status){case C.STATUS_ANSWERED:case C.STATUS_WAITING_FOR_ACK:case C.STATUS_CONFIRMED:return!0;default:return!1}}isEnded(){switch(this._status){case C.STATUS_CANCELED:case C.STATUS_TERMINATED:return!0;default:return!1}}isMuted(){return{audio:this._audioMuted,video:this._videoMuted}}isOnHold(){return{local:this._localHold,remote:this._remoteHold}}connect(e,t={},n){v.debug("connect()");const s=e,r=u.cloneObject(t.eventHandlers),i=u.cloneArray(t.extraHeaders),a=u.cloneObject(t.mediaConstraints,{audio:!0,video:!0}),c=t.mediaStream||null,d=u.cloneObject(t.pcConfig,{iceServers:[]}),_=t.rtcConstraints||null,p=t.rtcOfferConstraints||null;if(this._rtcOfferConstraints=p,this._rtcAnswerConstraints=t.rtcAnswerConstraints||null,this._data=t.data||this._data,void 0===e)throw new TypeError("Not enough arguments");if(this._status!==C.STATUS_NULL)throw new o.InvalidStateError(this._status);if(!window.RTCPeerConnection)throw new o.NotSupportedError("WebRTC not supported");if(!(e=this._ua.normalizeTarget(e)))throw new TypeError(`Invalid target: ${s}`);this._sessionTimers.enabled&&u.isDecimal(t.sessionTimersExpires)&&(t.sessionTimersExpires>=l.MIN_SESSION_EXPIRES?this._sessionTimers.defaultExpires=t.sessionTimersExpires:this._sessionTimers.defaultExpires=l.SESSION_EXPIRES);for(const e in r)Object.prototype.hasOwnProperty.call(r,e)&&this.on(e,r[e]);this._from_tag=u.newTag();const m=t.anonymous||!1,f={from_tag:this._from_tag};this._contact=this._ua.contact.toString({anonymous:m,outbound:!0}),m?(f.from_display_name="Anonymous",f.from_uri=new T("sip","anonymous","anonymous.invalid"),i.push(`P-Preferred-Identity: ${this._ua.configuration.uri.toString()}`),i.push("Privacy: id")):t.fromUserName&&(f.from_uri=new T("sip",t.fromUserName,this._ua.configuration.uri.host),i.push(`P-Preferred-Identity: ${this._ua.configuration.uri.toString()}`)),t.fromDisplayName&&(f.from_display_name=t.fromDisplayName),i.push(`Contact: ${this._contact}`),i.push("Content-Type: application/sdp"),this._sessionTimers.enabled&&i.push(`Session-Expires: ${this._sessionTimers.defaultExpires}${this._ua.configuration.session_timers_force_refresher?";refresher=uac":""}`),this._request=new h.InitialOutgoingInviteRequest(e,this._ua,f,i),this._id=this._request.call_id+this._from_tag,this._createRTCConnection(d,_),this._direction="outgoing",this._local_identity=this._request.from,this._remote_identity=this._request.to,n&&n(this),this._newRTCSession("local",this._request),this._sendInitialRequest(a,p,c)}init_incoming(e,t){let n;v.debug("init_incoming()");const s=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0;e.body&&"application/sdp"!==s?e.reply(415):(this._status=C.STATUS_INVITE_RECEIVED,this._from_tag=e.from_tag,this._id=e.call_id+this._from_tag,this._request=e,this._contact=this._ua.contact.toString(),e.hasHeader("expires")&&(n=1e3*e.getHeader("expires")),e.to_tag=u.newTag(),this._createDialog(e,"UAS",!0)?(e.body?this._late_sdp=!1:this._late_sdp=!0,this._status=C.STATUS_WAITING_FOR_ANSWER,this._timers.userNoAnswerTimer=setTimeout((()=>{e.reply(408),this._failed("local",null,l.causes.NO_ANSWER)}),this._ua.configuration.no_answer_timeout),n&&(this._timers.expiresTimer=setTimeout((()=>{this._status===C.STATUS_WAITING_FOR_ANSWER&&(e.reply(487),this._failed("system",null,l.causes.EXPIRES))}),n)),this._direction="incoming",this._local_identity=e.to,this._remote_identity=e.from,t&&t(this),this._newRTCSession("remote",e),this._status!==C.STATUS_TERMINATED&&(e.reply(180,null,[`Contact: ${this._contact}`]),this._progress("local",null))):e.reply(500,"Missing Contact header field"))}answer(e={}){v.debug("answer()");const t=this._request,n=u.cloneArray(e.extraHeaders),s=u.cloneObject(e.mediaConstraints),r=e.mediaStream||null,i=u.cloneObject(e.pcConfig,{iceServers:[]}),a=e.rtcConstraints||null,c=e.rtcAnswerConstraints||null,h=u.cloneObject(e.rtcOfferConstraints);let d,_=!1,p=!1,m=!1,f=!1;if(this._rtcAnswerConstraints=c,this._rtcOfferConstraints=e.rtcOfferConstraints||null,this._data=e.data||this._data,"incoming"!==this._direction)throw new o.NotSupportedError('"answer" not supported for outgoing RTCSession');if(this._status!==C.STATUS_WAITING_FOR_ANSWER)throw new o.InvalidStateError(this._status);if(this._sessionTimers.enabled&&u.isDecimal(e.sessionTimersExpires)&&(e.sessionTimersExpires>=l.MIN_SESSION_EXPIRES?this._sessionTimers.defaultExpires=e.sessionTimersExpires:this._sessionTimers.defaultExpires=l.SESSION_EXPIRES),this._status=C.STATUS_ANSWERED,!this._createDialog(t,"UAS"))return void t.reply(500,"Error creating dialog");clearTimeout(this._timers.userNoAnswerTimer),n.unshift(`Contact: ${this._contact}`);const g=t.parseSDP();Array.isArray(g.media)||(g.media=[g.media]);for(const e of g.media)"audio"===e.type&&(_=!0,e.direction&&"sendrecv"!==e.direction||(m=!0)),"video"===e.type&&(p=!0,e.direction&&"sendrecv"!==e.direction||(f=!0));if(r&&!1===s.audio){d=r.getAudioTracks();for(const e of d)r.removeTrack(e)}if(r&&!1===s.video){d=r.getVideoTracks();for(const e of d)r.removeTrack(e)}r||void 0!==s.audio||(s.audio=m),r||void 0!==s.video||(s.video=f),r||_||h.offerToReceiveAudio||(s.audio=!1),r||p||h.offerToReceiveVideo||(s.video=!1),this._createRTCConnection(i,a),Promise.resolve().then((()=>r||(s.audio||s.video?(this._localMediaStreamLocallyGenerated=!0,navigator.mediaDevices.getUserMedia(s).catch((e=>{if(this._status===C.STATUS_TERMINATED)throw new Error("terminated");throw t.reply(480),this._failed("local",null,l.causes.USER_DENIED_MEDIA_ACCESS),v.warn('emit "getusermediafailed" [error:%o]',e),this.emit("getusermediafailed",e),new Error("getUserMedia() failed")}))):void 0))).then((e=>{if(this._status===C.STATUS_TERMINATED)throw new Error("terminated");this._localMediaStream=e,e&&e.getTracks().forEach((t=>{this._connection.addTrack(t,e)}))})).then((()=>{if(this._late_sdp)return;const e={originator:"remote",type:"offer",sdp:t.body};v.debug('emit "sdp"'),this.emit("sdp",e);const n=new RTCSessionDescription({type:"offer",sdp:e.sdp});return this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>this._connection.setRemoteDescription(n))).catch((e=>{throw t.reply(488),this._failed("system",null,l.causes.WEBRTC_ERROR),v.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),this.emit("peerconnection:setremotedescriptionfailed",e),new Error("peerconnection.setRemoteDescription() failed")})),this._connectionPromiseQueue})).then((()=>{if(this._status===C.STATUS_TERMINATED)throw new Error("terminated");return this._connecting(t),this._late_sdp?this._createLocalDescription("offer",this._rtcOfferConstraints).catch((()=>{throw t.reply(500),new Error("_createLocalDescription() failed")})):this._createLocalDescription("answer",c).catch((()=>{throw t.reply(500),new Error("_createLocalDescription() failed")}))})).then((e=>{if(this._status===C.STATUS_TERMINATED)throw new Error("terminated");this._handleSessionTimersInIncomingRequest(t,n),t.reply(200,null,n,e,(()=>{this._status=C.STATUS_WAITING_FOR_ACK,this._setInvite2xxTimer(t,e),this._setACKTimer(),this._accepted("local")}),(()=>{this._failed("system",null,l.causes.CONNECTION_ERROR)}))})).catch((e=>{this._status!==C.STATUS_TERMINATED&&v.warn(e)}))}terminate(e={}){v.debug("terminate()");const t=e.cause||l.causes.BYE,n=u.cloneArray(e.extraHeaders),s=e.body;let r,i=e.status_code,c=e.reason_phrase;if(this._status===C.STATUS_TERMINATED)throw new o.InvalidStateError(this._status);switch(this._status){case C.STATUS_NULL:case C.STATUS_INVITE_SENT:case C.STATUS_1XX_RECEIVED:if(v.debug("canceling session"),i&&(i<200||i>=700))throw new TypeError(`Invalid status_code: ${i}`);i&&(c=c||l.REASON_PHRASE[i]||"",r=`SIP ;cause=${i} ;text="${c}"`),this._status===C.STATUS_NULL||this._status===C.STATUS_INVITE_SENT?(this._is_canceled=!0,this._cancel_reason=r):this._status===C.STATUS_1XX_RECEIVED&&this._request.cancel(r),this._status=C.STATUS_CANCELED,this._failed("local",null,l.causes.CANCELED);break;case C.STATUS_WAITING_FOR_ANSWER:case C.STATUS_ANSWERED:if(v.debug("rejecting session"),i=i||480,i<300||i>=700)throw new TypeError(`Invalid status_code: ${i}`);this._request.reply(i,c,n,s),this._failed("local",null,l.causes.REJECTED);break;case C.STATUS_WAITING_FOR_ACK:case C.STATUS_CONFIRMED:if(v.debug("terminating session"),c=e.reason_phrase||l.REASON_PHRASE[i]||"",i&&(i<200||i>=700))throw new TypeError(`Invalid status_code: ${i}`);if(i&&n.push(`Reason: SIP ;cause=${i}; text="${c}"`),this._status===C.STATUS_WAITING_FOR_ACK&&"incoming"===this._direction&&this._request.server_transaction.state!==a.C.STATUS_TERMINATED){const e=this._dialog;this.receiveRequest=({method:t})=>{t===l.ACK&&(this.sendRequest(l.BYE,{extraHeaders:n,body:s}),e.terminate())},this._request.server_transaction.on("stateChanged",(()=>{this._request.server_transaction.state===a.C.STATUS_TERMINATED&&(this.sendRequest(l.BYE,{extraHeaders:n,body:s}),e.terminate())})),this._ended("local",null,t),this._dialog=e,this._ua.newDialog(e)}else this.sendRequest(l.BYE,{extraHeaders:n,body:s}),this._ended("local",null,t)}}sendDTMF(e,t={}){v.debug("sendDTMF() | tones: %s",e);let n=0,s=t.duration||null,r=t.interToneGap||null;const i=t.transportType||l.DTMF_TRANSPORT.INFO;if(void 0===e)throw new TypeError("Not enough arguments");if(this._status!==C.STATUS_CONFIRMED&&this._status!==C.STATUS_WAITING_FOR_ACK&&this._status!==C.STATUS_1XX_RECEIVED)throw new o.InvalidStateError(this._status);if(i!==l.DTMF_TRANSPORT.INFO&&i!==l.DTMF_TRANSPORT.RFC2833)throw new TypeError(`invalid transportType: ${i}`);if("number"==typeof e&&(e=e.toString()),!e||"string"!=typeof e||!e.match(/^[0-9A-DR#*,]+$/i))throw new TypeError(`Invalid tones: ${e}`);if(s&&!u.isDecimal(s))throw new TypeError(`Invalid tone duration: ${s}`);if(s?s<p.C.MIN_DURATION?(v.debug(`"duration" value is lower than the minimum allowed, setting it to ${p.C.MIN_DURATION} milliseconds`),s=p.C.MIN_DURATION):s>p.C.MAX_DURATION?(v.debug(`"duration" value is greater than the maximum allowed, setting it to ${p.C.MAX_DURATION} milliseconds`),s=p.C.MAX_DURATION):s=Math.abs(s):s=p.C.DEFAULT_DURATION,t.duration=s,r&&!u.isDecimal(r))throw new TypeError(`Invalid interToneGap: ${r}`);if(r?r<p.C.MIN_INTER_TONE_GAP?(v.debug(`"interToneGap" value is lower than the minimum allowed, setting it to ${p.C.MIN_INTER_TONE_GAP} milliseconds`),r=p.C.MIN_INTER_TONE_GAP):r=Math.abs(r):r=p.C.DEFAULT_INTER_TONE_GAP,i!==l.DTMF_TRANSPORT.RFC2833)this._tones?this._tones+=e:(this._tones=e,function e(){let i;if(this._status===C.STATUS_TERMINATED||!this._tones||n>=this._tones.length)return void(this._tones=null);const l=this._tones[n];if(n+=1,","===l)i=2e3;else{const e=new p(this);t.eventHandlers={onFailed:()=>{this._tones=null}},e.send(l,t),i=s+r}setTimeout(e.bind(this),i)}.call(this));else{const t=this._getDTMFRTPSender();t&&(e=t.toneBuffer+e,t.insertDTMF(e,s,r))}}sendInfo(e,t,n={}){if(v.debug("sendInfo()"),this._status!==C.STATUS_CONFIRMED&&this._status!==C.STATUS_WAITING_FOR_ACK&&this._status!==C.STATUS_1XX_RECEIVED)throw new o.InvalidStateError(this._status);new m(this).send(e,t,n)}mute(e={audio:!0,video:!1}){v.debug("mute()");let t=!1,n=!1;!1===this._audioMuted&&e.audio&&(t=!0,this._audioMuted=!0,this._toggleMuteAudio(!0)),!1===this._videoMuted&&e.video&&(n=!0,this._videoMuted=!0,this._toggleMuteVideo(!0)),!0!==t&&!0!==n||this._onmute({audio:t,video:n})}unmute(e={audio:!0,video:!0}){v.debug("unmute()");let t=!1,n=!1;!0===this._audioMuted&&e.audio&&(t=!0,this._audioMuted=!1,!1===this._localHold&&this._toggleMuteAudio(!1)),!0===this._videoMuted&&e.video&&(n=!0,this._videoMuted=!1,!1===this._localHold&&this._toggleMuteVideo(!1)),!0!==t&&!0!==n||this._onunmute({audio:t,video:n})}hold(e={},t){if(v.debug("hold()"),this._status!==C.STATUS_WAITING_FOR_ACK&&this._status!==C.STATUS_CONFIRMED)return!1;if(!0===this._localHold)return!1;if(!this._isReadyToReOffer())return!1;this._localHold=!0,this._onhold("local");const n={succeeded:()=>{t&&t()},failed:()=>{this.terminate({cause:l.causes.WEBRTC_ERROR,status_code:500,reason_phrase:"Hold Failed"})}};return e.useUpdate?this._sendUpdate({sdpOffer:!0,eventHandlers:n,extraHeaders:e.extraHeaders}):this._sendReinvite({eventHandlers:n,extraHeaders:e.extraHeaders}),!0}unhold(e={},t){if(v.debug("unhold()"),this._status!==C.STATUS_WAITING_FOR_ACK&&this._status!==C.STATUS_CONFIRMED)return!1;if(!1===this._localHold)return!1;if(!this._isReadyToReOffer())return!1;this._localHold=!1,this._onunhold("local");const n={succeeded:()=>{t&&t()},failed:()=>{this.terminate({cause:l.causes.WEBRTC_ERROR,status_code:500,reason_phrase:"Unhold Failed"})}};return e.useUpdate?this._sendUpdate({sdpOffer:!0,eventHandlers:n,extraHeaders:e.extraHeaders}):this._sendReinvite({eventHandlers:n,extraHeaders:e.extraHeaders}),!0}renegotiate(e={},t){v.debug("renegotiate()");const n=e.rtcOfferConstraints||null;if(this._status!==C.STATUS_WAITING_FOR_ACK&&this._status!==C.STATUS_CONFIRMED)return!1;if(!this._isReadyToReOffer())return!1;const s={succeeded:()=>{t&&t()},failed:()=>{this.terminate({cause:l.causes.WEBRTC_ERROR,status_code:500,reason_phrase:"Media Renegotiation Failed"})}};return this._setLocalMediaStatus(),e.useUpdate?this._sendUpdate({sdpOffer:!0,eventHandlers:s,rtcOfferConstraints:n,extraHeaders:e.extraHeaders}):this._sendReinvite({eventHandlers:s,rtcOfferConstraints:n,extraHeaders:e.extraHeaders}),!0}refer(e,t){v.debug("refer()");const n=e;if(this._status!==C.STATUS_WAITING_FOR_ACK&&this._status!==C.STATUS_CONFIRMED)return!1;if(!(e=this._ua.normalizeTarget(e)))throw new TypeError(`Invalid target: ${n}`);const s=new g(this);s.sendRefer(e,t);const r=s.id;return this._referSubscribers[r]=s,s.on("requestFailed",(()=>{delete this._referSubscribers[r]})),s.on("accepted",(()=>{delete this._referSubscribers[r]})),s.on("failed",(()=>{delete this._referSubscribers[r]})),s}sendRequest(e,t){return v.debug("sendRequest()"),this._dialog.sendRequest(e,t)}receiveRequest(e){if(v.debug("receiveRequest()"),e.method===l.CANCEL)this._status!==C.STATUS_WAITING_FOR_ANSWER&&this._status!==C.STATUS_ANSWERED||(this._status=C.STATUS_CANCELED,this._request.reply(487),this._failed("remote",e,l.causes.CANCELED));else switch(e.method){case l.ACK:if(this._status!==C.STATUS_WAITING_FOR_ACK)return;if(this._status=C.STATUS_CONFIRMED,clearTimeout(this._timers.ackTimer),clearTimeout(this._timers.invite2xxTimer),this._late_sdp){if(!e.body){this.terminate({cause:l.causes.MISSING_SDP,status_code:400});break}const t={originator:"remote",type:"answer",sdp:e.body};v.debug('emit "sdp"'),this.emit("sdp",t);const n=new RTCSessionDescription({type:"answer",sdp:t.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>this._connection.setRemoteDescription(n))).then((()=>{this._is_confirmed||this._confirmed("remote",e)})).catch((e=>{this.terminate({cause:l.causes.BAD_MEDIA_DESCRIPTION,status_code:488}),v.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),this.emit("peerconnection:setremotedescriptionfailed",e)}))}else this._is_confirmed||this._confirmed("remote",e);break;case l.BYE:this._status===C.STATUS_CONFIRMED||this._status===C.STATUS_WAITING_FOR_ACK?(e.reply(200),this._ended("remote",e,l.causes.BYE)):this._status===C.STATUS_INVITE_RECEIVED||this._status===C.STATUS_WAITING_FOR_ANSWER?(e.reply(200),this._request.reply(487,"BYE Received"),this._ended("remote",e,l.causes.BYE)):e.reply(403,"Wrong Status");break;case l.INVITE:this._status===C.STATUS_CONFIRMED?e.hasHeader("replaces")?this._receiveReplaces(e):this._receiveReinvite(e):e.reply(403,"Wrong Status");break;case l.INFO:if(this._status===C.STATUS_1XX_RECEIVED||this._status===C.STATUS_WAITING_FOR_ANSWER||this._status===C.STATUS_ANSWERED||this._status===C.STATUS_WAITING_FOR_ACK||this._status===C.STATUS_CONFIRMED){const t=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0;t&&t.match(/^application\/dtmf-relay/i)?new p(this).init_incoming(e):void 0!==t?new m(this).init_incoming(e):e.reply(415)}else e.reply(403,"Wrong Status");break;case l.UPDATE:this._status===C.STATUS_CONFIRMED?this._receiveUpdate(e):e.reply(403,"Wrong Status");break;case l.REFER:this._status===C.STATUS_CONFIRMED?this._receiveRefer(e):e.reply(403,"Wrong Status");break;case l.NOTIFY:this._status===C.STATUS_CONFIRMED?this._receiveNotify(e):e.reply(403,"Wrong Status");break;default:e.reply(501)}}onTransportError(){v.warn("onTransportError()"),this._status!==C.STATUS_TERMINATED&&this.terminate({status_code:500,reason_phrase:l.causes.CONNECTION_ERROR,cause:l.causes.CONNECTION_ERROR})}onRequestTimeout(){v.warn("onRequestTimeout()"),this._status!==C.STATUS_TERMINATED&&this.terminate({status_code:408,reason_phrase:l.causes.REQUEST_TIMEOUT,cause:l.causes.REQUEST_TIMEOUT})}onDialogError(){v.warn("onDialogError()"),this._status!==C.STATUS_TERMINATED&&this.terminate({status_code:500,reason_phrase:l.causes.DIALOG_ERROR,cause:l.causes.DIALOG_ERROR})}newDTMF(e){v.debug("newDTMF()"),this.emit("newDTMF",e)}newInfo(e){v.debug("newInfo()"),this.emit("newInfo",e)}_isReadyToReOffer(){return this._rtcReady?this._dialog?!0!==this._dialog.uac_pending_reply&&!0!==this._dialog.uas_pending_reply||(v.debug("_isReadyToReOffer() | there is another INVITE/UPDATE transaction in progress"),!1):(v.debug("_isReadyToReOffer() | session not established yet"),!1):(v.debug("_isReadyToReOffer() | internal WebRTC status not ready"),!1)}_close(){if(v.debug("close()"),this._localMediaStream&&this._localMediaStreamLocallyGenerated&&(v.debug("close() | closing local MediaStream"),u.closeMediaStream(this._localMediaStream)),this._status!==C.STATUS_TERMINATED){if(this._status=C.STATUS_TERMINATED,this._connection)try{this._connection.close()}catch(e){v.warn("close() | error closing the RTCPeerConnection: %o",e)}for(const e in this._timers)Object.prototype.hasOwnProperty.call(this._timers,e)&&clearTimeout(this._timers[e]);clearTimeout(this._sessionTimers.timer),this._dialog&&(this._dialog.terminate(),delete this._dialog);for(const e in this._earlyDialogs)Object.prototype.hasOwnProperty.call(this._earlyDialogs,e)&&(this._earlyDialogs[e].terminate(),delete this._earlyDialogs[e]);for(const e in this._referSubscribers)Object.prototype.hasOwnProperty.call(this._referSubscribers,e)&&delete this._referSubscribers[e];this._ua.destroyRTCSession(this)}}_setInvite2xxTimer(e,t){let n=c.T1;this._timers.invite2xxTimer=setTimeout(function s(){this._status===C.STATUS_WAITING_FOR_ACK&&(e.reply(200,null,[`Contact: ${this._contact}`],t),n<c.T2&&(n*=2,n>c.T2&&(n=c.T2)),this._timers.invite2xxTimer=setTimeout(s.bind(this),n))}.bind(this),n)}_setACKTimer(){this._timers.ackTimer=setTimeout((()=>{this._status===C.STATUS_WAITING_FOR_ACK&&(v.debug("no ACK received, terminating the session"),clearTimeout(this._timers.invite2xxTimer),this.sendRequest(l.BYE),this._ended("remote",null,l.causes.NO_ACK))}),c.TIMER_H)}_createRTCConnection(e,t){this._connection=new RTCPeerConnection(e,t),this._connection.addEventListener("iceconnectionstatechange",(()=>{"failed"===this._connection.iceConnectionState&&this.terminate({cause:l.causes.RTP_TIMEOUT,status_code:408,reason_phrase:l.causes.RTP_TIMEOUT})})),v.debug('emit "peerconnection"'),this.emit("peerconnection",{peerconnection:this._connection})}_createLocalDescription(e,t){if(v.debug("createLocalDescription()"),"offer"!==e&&"answer"!==e)throw new Error(`createLocalDescription() | invalid type "${e}"`);const n=this._connection;return this._rtcReady=!1,Promise.resolve().then((()=>"offer"===e?n.createOffer(t).catch((e=>(v.warn('emit "peerconnection:createofferfailed" [error:%o]',e),this.emit("peerconnection:createofferfailed",e),Promise.reject(e)))):n.createAnswer(t).catch((e=>(v.warn('emit "peerconnection:createanswerfailed" [error:%o]',e),this.emit("peerconnection:createanswerfailed",e),Promise.reject(e)))))).then((e=>n.setLocalDescription(e).catch((e=>(this._rtcReady=!0,v.warn('emit "peerconnection:setlocaldescriptionfailed" [error:%o]',e),this.emit("peerconnection:setlocaldescriptionfailed",e),Promise.reject(e)))))).then((()=>{const s=t&&t.iceRestart;if("complete"===n.iceGatheringState&&!s||"gathering"===n.iceGatheringState&&this._iceReady){this._rtcReady=!0;const t={originator:"local",type:e,sdp:n.localDescription.sdp};return v.debug('emit "sdp"'),this.emit("sdp",t),Promise.resolve(t.sdp)}return new Promise((t=>{let s,r,i=!1;this._iceReady=!1;const l=()=>{n.removeEventListener("icecandidate",s),n.removeEventListener("icegatheringstatechange",r),i=!0,this._rtcReady=!0,this._iceReady=!0;const l={originator:"local",type:e,sdp:n.localDescription.sdp};v.debug('emit "sdp"'),this.emit("sdp",l),t(l.sdp)};n.addEventListener("icecandidate",s=e=>{const t=e.candidate;t?this.emit("icecandidate",{candidate:t,ready:l}):i||l()}),n.addEventListener("icegatheringstatechange",r=()=>{"complete"!==n.iceGatheringState||i||l()})}))}))}_createDialog(e,t,n){const s="UAS"===t?e.to_tag:e.from_tag,r="UAS"===t?e.from_tag:e.to_tag,i=e.call_id+s+r;let o=this._earlyDialogs[i];if(n)return!!o||(o=new d(this,e,t,d.C.STATUS_EARLY),o.error?(v.debug(o.error),this._failed("remote",e,l.causes.INTERNAL_ERROR),!1):(this._earlyDialogs[i]=o,!0));{if(this._from_tag=e.from_tag,this._to_tag=e.to_tag,o)return o.update(e,t),this._dialog=o,delete this._earlyDialogs[i],!0;const n=new d(this,e,t);return n.error?(v.debug(n.error),this._failed("remote",e,l.causes.INTERNAL_ERROR),!1):(this._dialog=n,!0)}}_receiveReinvite(e){v.debug("receiveReinvite()");const t=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0,n={request:e,callback:void 0,reject:function(t={}){s=!0;const n=t.status_code||403,r=t.reason_phrase||"",i=u.cloneArray(t.extraHeaders);if(this._status!==C.STATUS_CONFIRMED)return!1;if(n<300||n>=700)throw new TypeError(`Invalid status_code: ${n}`);e.reply(n,r,i)}.bind(this)};let s=!1;if(this.emit("reinvite",n),!s){if(this._late_sdp=!1,!e.body)return this._late_sdp=!0,this._remoteHold&&(this._remoteHold=!1,this._onunhold("remote")),void(this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>this._createLocalDescription("offer",this._rtcOfferConstraints))).then((e=>{r.call(this,e)})).catch((()=>{e.reply(500)})));if("application/sdp"!==t)return v.debug("invalid Content-Type"),void e.reply(415);this._processInDialogSdpOffer(e).then((e=>{this._status!==C.STATUS_TERMINATED&&r.call(this,e)})).catch((e=>{v.warn(e)}))}function r(t){const s=[`Contact: ${this._contact}`];this._handleSessionTimersInIncomingRequest(e,s),this._late_sdp&&(t=this._mangleOffer(t)),e.reply(200,null,s,t,(()=>{this._status=C.STATUS_WAITING_FOR_ACK,this._setInvite2xxTimer(e,t),this._setACKTimer()})),"function"==typeof n.callback&&n.callback()}}_receiveUpdate(e){v.debug("receiveUpdate()");const t=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0,n={request:e,callback:void 0,reject:function(t={}){s=!0;const n=t.status_code||403,r=t.reason_phrase||"",i=u.cloneArray(t.extraHeaders);if(this._status!==C.STATUS_CONFIRMED)return!1;if(n<300||n>=700)throw new TypeError(`Invalid status_code: ${n}`);e.reply(n,r,i)}.bind(this)};let s=!1;if(this.emit("update",n),!s)if(e.body){if("application/sdp"!==t)return v.debug("invalid Content-Type"),void e.reply(415);this._processInDialogSdpOffer(e).then((e=>{this._status!==C.STATUS_TERMINATED&&r.call(this,e)})).catch((e=>{v.warn(e)}))}else r.call(this,null);function r(t){const s=[`Contact: ${this._contact}`];this._handleSessionTimersInIncomingRequest(e,s),e.reply(200,null,s,t),"function"==typeof n.callback&&n.callback()}}_processInDialogSdpOffer(e){v.debug("_processInDialogSdpOffer()");const t=e.parseSDP();let n=!1;for(const e of t.media){if(-1===E.indexOf(e.type))continue;const s=e.direction||t.direction||"sendrecv";if("sendonly"!==s&&"inactive"!==s){n=!1;break}n=!0}const s={originator:"remote",type:"offer",sdp:e.body};v.debug('emit "sdp"'),this.emit("sdp",s);const r=new RTCSessionDescription({type:"offer",sdp:s.sdp});return this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>{if(this._status===C.STATUS_TERMINATED)throw new Error("terminated");return this._connection.setRemoteDescription(r).catch((t=>{throw e.reply(488),v.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',t),this.emit("peerconnection:setremotedescriptionfailed",t),t}))})).then((()=>{if(this._status===C.STATUS_TERMINATED)throw new Error("terminated");!0===this._remoteHold&&!1===n?(this._remoteHold=!1,this._onunhold("remote")):!1===this._remoteHold&&!0===n&&(this._remoteHold=!0,this._onhold("remote"))})).then((()=>{if(this._status===C.STATUS_TERMINATED)throw new Error("terminated");return this._createLocalDescription("answer",this._rtcAnswerConstraints).catch((t=>{throw e.reply(500),v.warn('emit "peerconnection:createtelocaldescriptionfailed" [error:%o]',t),t}))})).catch((e=>{v.warn("_processInDialogSdpOffer() failed [error: %o]",e)})),this._connectionPromiseQueue}_receiveRefer(t){if(v.debug("receiveRefer()"),!t.refer_to)return v.debug("no Refer-To header field present in REFER"),void t.reply(400);if(t.refer_to.uri.scheme!==l.SIP)return v.debug("Refer-To header field points to a non-SIP URI scheme"),void t.reply(416);t.reply(202);const n=new f(this,t.cseq);function s(s,r={}){if(s="function"==typeof s?s:null,this._status!==C.STATUS_WAITING_FOR_ACK&&this._status!==C.STATUS_CONFIRMED)return!1;const i=new e(this._ua);if(i.on("progress",(({response:e})=>{n.notify(e.status_code,e.reason_phrase)})),i.on("accepted",(({response:e})=>{n.notify(e.status_code,e.reason_phrase)})),i.on("_failed",(({message:e,cause:t})=>{e?n.notify(e.status_code,e.reason_phrase):n.notify(487,t)})),t.refer_to.uri.hasHeader("replaces")){const e=decodeURIComponent(t.refer_to.uri.getHeader("replaces"));r.extraHeaders=u.cloneArray(r.extraHeaders),r.extraHeaders.push(`Replaces: ${e}`)}i.connect(t.refer_to.uri.toAor(),r,s)}function r(){n.notify(603)}v.debug('emit "refer"'),this.emit("refer",{request:t,accept:(e,t)=>{s.call(this,e,t)},reject:()=>{r.call(this)}})}_receiveNotify(e){switch(v.debug("receiveNotify()"),e.event||e.reply(400),e.event.event){case"refer":{let t,n;if(e.event.params&&e.event.params.id)t=e.event.params.id,n=this._referSubscribers[t];else{if(1!==Object.keys(this._referSubscribers).length)return void e.reply(400,"Missing event id parameter");n=this._referSubscribers[Object.keys(this._referSubscribers)[0]]}if(!n)return void e.reply(481,"Subscription does not exist");n.receiveNotify(e),e.reply(200);break}default:e.reply(489)}}_receiveReplaces(t){function n(n){if(this._status!==C.STATUS_WAITING_FOR_ACK&&this._status!==C.STATUS_CONFIRMED)return!1;const s=new e(this._ua);s.on("confirmed",(()=>{this.terminate()})),s.init_incoming(t,n)}function s(){v.debug("Replaced INVITE rejected by the user"),t.reply(486)}v.debug("receiveReplaces()"),this.emit("replaces",{request:t,accept:e=>{n.call(this,e)},reject:()=>{s.call(this)}})}_sendInitialRequest(e,t,n){const s=new _(this._ua,this._request,{onRequestTimeout:()=>{this.onRequestTimeout()},onTransportError:()=>{this.onTransportError()},onAuthenticated:e=>{this._request=e},onReceiveResponse:e=>{this._receiveInviteResponse(e)}});Promise.resolve().then((()=>n||(e.audio||e.video?(this._localMediaStreamLocallyGenerated=!0,navigator.mediaDevices.getUserMedia(e).catch((e=>{if(this._status===C.STATUS_TERMINATED)throw new Error("terminated");throw this._failed("local",null,l.causes.USER_DENIED_MEDIA_ACCESS),v.warn('emit "getusermediafailed" [error:%o]',e),this.emit("getusermediafailed",e),e}))):void 0))).then((e=>{if(this._status===C.STATUS_TERMINATED)throw new Error("terminated");return this._localMediaStream=e,e&&e.getTracks().forEach((t=>{this._connection.addTrack(t,e)})),this._connecting(this._request),this._createLocalDescription("offer",t).catch((e=>{throw this._failed("local",null,l.causes.WEBRTC_ERROR),e}))})).then((e=>{if(this._is_canceled||this._status===C.STATUS_TERMINATED)throw new Error("terminated");this._request.body=e,this._status=C.STATUS_INVITE_SENT,v.debug('emit "sending" [request:%o]',this._request),this.emit("sending",{request:this._request}),s.send()})).catch((e=>{this._status!==C.STATUS_TERMINATED&&v.warn(e)}))}_getDTMFRTPSender(){const e=this._connection.getSenders().find((e=>e.track&&"audio"===e.track.kind));if(e&&e.dtmf)return e.dtmf;v.warn("sendDTMF() | no local audio track to send DTMF with")}_receiveInviteResponse(e){if(v.debug("receiveInviteResponse()"),this._dialog&&e.status_code>=200&&e.status_code<=299){if(this._dialog.id.call_id===e.call_id&&this._dialog.id.local_tag===e.from_tag&&this._dialog.id.remote_tag===e.to_tag)return void this.sendRequest(l.ACK);{const t=new d(this,e,"UAC");return void 0!==t.error?void v.debug(t.error):(this.sendRequest(l.ACK),void this.sendRequest(l.BYE))}}if(this._is_canceled)e.status_code>=100&&e.status_code<200?this._request.cancel(this._cancel_reason):e.status_code>=200&&e.status_code<299&&this._acceptAndTerminate(e);else if(this._status===C.STATUS_INVITE_SENT||this._status===C.STATUS_1XX_RECEIVED)switch(!0){case/^100$/.test(e.status_code):this._status=C.STATUS_1XX_RECEIVED;break;case/^1[0-9]{2}$/.test(e.status_code):{if(!e.to_tag){v.debug("1xx response received without to tag");break}if(e.hasHeader("contact")&&!this._createDialog(e,"UAC",!0))break;if(this._status=C.STATUS_1XX_RECEIVED,!e.body){this._progress("remote",e);break}const t={originator:"remote",type:"answer",sdp:e.body};v.debug('emit "sdp"'),this.emit("sdp",t);const n=new RTCSessionDescription({type:"answer",sdp:t.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>this._connection.setRemoteDescription(n))).then((()=>this._progress("remote",e))).catch((e=>{v.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),this.emit("peerconnection:setremotedescriptionfailed",e)}));break}case/^2[0-9]{2}$/.test(e.status_code):{if(this._status=C.STATUS_CONFIRMED,!e.body){this._acceptAndTerminate(e,400,l.causes.MISSING_SDP),this._failed("remote",e,l.causes.BAD_MEDIA_DESCRIPTION);break}if(!this._createDialog(e,"UAC"))break;const t={originator:"remote",type:"answer",sdp:e.body};v.debug('emit "sdp"'),this.emit("sdp",t);const n=new RTCSessionDescription({type:"answer",sdp:t.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>{if("stable"===this._connection.signalingState)return this._connection.createOffer(this._rtcOfferConstraints).then((e=>this._connection.setLocalDescription(e))).catch((t=>{this._acceptAndTerminate(e,500,t.toString()),this._failed("local",e,l.causes.WEBRTC_ERROR)}))})).then((()=>{this._connection.setRemoteDescription(n).then((()=>{this._handleSessionTimersInIncomingResponse(e),this._accepted("remote",e),this.sendRequest(l.ACK),this._confirmed("local",null)})).catch((t=>{this._acceptAndTerminate(e,488,"Not Acceptable Here"),this._failed("remote",e,l.causes.BAD_MEDIA_DESCRIPTION),v.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',t),this.emit("peerconnection:setremotedescriptionfailed",t)}))}));break}default:{const t=u.sipErrorCause(e.status_code);this._failed("remote",e,t)}}}_sendReinvite(e={}){v.debug("sendReinvite()");const t=u.cloneArray(e.extraHeaders),n=u.cloneObject(e.eventHandlers),s=e.rtcOfferConstraints||this._rtcOfferConstraints||null;let r=!1;function i(e){if(this._status===C.STATUS_TERMINATED)return;if(this.sendRequest(l.ACK),r)return;if(this._handleSessionTimersInIncomingResponse(e),!e.body)return void o.call(this);if(!e.hasHeader("Content-Type")||"application/sdp"!==e.getHeader("Content-Type").toLowerCase())return void o.call(this);const t={originator:"remote",type:"answer",sdp:e.body};v.debug('emit "sdp"'),this.emit("sdp",t);const s=new RTCSessionDescription({type:"answer",sdp:t.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>this._connection.setRemoteDescription(s))).then((()=>{n.succeeded&&n.succeeded(e)})).catch((e=>{o.call(this),v.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),this.emit("peerconnection:setremotedescriptionfailed",e)}))}function o(e){n.failed&&n.failed(e)}t.push(`Contact: ${this._contact}`),t.push("Content-Type: application/sdp"),this._sessionTimers.running&&t.push(`Session-Expires: ${this._sessionTimers.currentExpires};refresher=${this._sessionTimers.refresher?"uac":"uas"}`),this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>this._createLocalDescription("offer",s))).then((e=>{const n={originator:"local",type:"offer",sdp:e=this._mangleOffer(e)};v.debug('emit "sdp"'),this.emit("sdp",n),this.sendRequest(l.INVITE,{extraHeaders:t,body:e,eventHandlers:{onSuccessResponse:e=>{i.call(this,e),r=!0},onErrorResponse:e=>{o.call(this,e)},onTransportError:()=>{this.onTransportError()},onRequestTimeout:()=>{this.onRequestTimeout()},onDialogError:()=>{this.onDialogError()}}})})).catch((()=>{o()}))}_sendUpdate(e={}){v.debug("sendUpdate()");const t=u.cloneArray(e.extraHeaders),n=u.cloneObject(e.eventHandlers),s=e.rtcOfferConstraints||this._rtcOfferConstraints||null,r=e.sdpOffer||!1;let i=!1;function o(e){if(this._status!==C.STATUS_TERMINATED&&!i)if(this._handleSessionTimersInIncomingResponse(e),r){if(!e.body)return void a.call(this);if(!e.hasHeader("Content-Type")||"application/sdp"!==e.getHeader("Content-Type").toLowerCase())return void a.call(this);const t={originator:"remote",type:"answer",sdp:e.body};v.debug('emit "sdp"'),this.emit("sdp",t);const s=new RTCSessionDescription({type:"answer",sdp:t.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>this._connection.setRemoteDescription(s))).then((()=>{n.succeeded&&n.succeeded(e)})).catch((e=>{a.call(this),v.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),this.emit("peerconnection:setremotedescriptionfailed",e)}))}else n.succeeded&&n.succeeded(e)}function a(e){n.failed&&n.failed(e)}t.push(`Contact: ${this._contact}`),this._sessionTimers.running&&t.push(`Session-Expires: ${this._sessionTimers.currentExpires};refresher=${this._sessionTimers.refresher?"uac":"uas"}`),r?(t.push("Content-Type: application/sdp"),this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>this._createLocalDescription("offer",s))).then((e=>{const n={originator:"local",type:"offer",sdp:e=this._mangleOffer(e)};v.debug('emit "sdp"'),this.emit("sdp",n),this.sendRequest(l.UPDATE,{extraHeaders:t,body:e,eventHandlers:{onSuccessResponse:e=>{o.call(this,e),i=!0},onErrorResponse:e=>{a.call(this,e)},onTransportError:()=>{this.onTransportError()},onRequestTimeout:()=>{this.onRequestTimeout()},onDialogError:()=>{this.onDialogError()}}})})).catch((()=>{a.call(this)}))):this.sendRequest(l.UPDATE,{extraHeaders:t,eventHandlers:{onSuccessResponse:e=>{o.call(this,e)},onErrorResponse:e=>{a.call(this,e)},onTransportError:()=>{this.onTransportError()},onRequestTimeout:()=>{this.onRequestTimeout()},onDialogError:()=>{this.onDialogError()}}})}_acceptAndTerminate(e,t,n){v.debug("acceptAndTerminate()");const s=[];t&&(n=n||l.REASON_PHRASE[t]||"",s.push(`Reason: SIP ;cause=${t}; text="${n}"`)),(this._dialog||this._createDialog(e,"UAC"))&&(this.sendRequest(l.ACK),this.sendRequest(l.BYE,{extraHeaders:s})),this._status=C.STATUS_TERMINATED}_mangleOffer(e){if(!this._localHold&&!this._remoteHold)return e;if(e=r.parse(e),this._localHold&&!this._remoteHold){v.debug("mangleOffer() | me on hold, mangling offer");for(const t of e.media)-1!==E.indexOf(t.type)&&(t.direction?"sendrecv"===t.direction?t.direction="sendonly":"recvonly"===t.direction&&(t.direction="inactive"):t.direction="sendonly")}else if(this._localHold&&this._remoteHold){v.debug("mangleOffer() | both on hold, mangling offer");for(const t of e.media)-1!==E.indexOf(t.type)&&(t.direction="inactive")}else if(this._remoteHold){v.debug("mangleOffer() | remote on hold, mangling offer");for(const t of e.media)-1!==E.indexOf(t.type)&&(t.direction?"sendrecv"===t.direction?t.direction="recvonly":"recvonly"===t.direction&&(t.direction="inactive"):t.direction="recvonly")}return r.write(e)}_setLocalMediaStatus(){let e=!0,t=!0;(this._localHold||this._remoteHold)&&(e=!1,t=!1),this._audioMuted&&(e=!1),this._videoMuted&&(t=!1),this._toggleMuteAudio(!e),this._toggleMuteVideo(!t)}_handleSessionTimersInIncomingRequest(e,t){if(!this._sessionTimers.enabled)return;let n;e.session_expires&&e.session_expires>=l.MIN_SESSION_EXPIRES?(this._sessionTimers.currentExpires=e.session_expires,n=e.session_expires_refresher||"uas"):(this._sessionTimers.currentExpires=this._sessionTimers.defaultExpires,n="uas"),t.push(`Session-Expires: ${this._sessionTimers.currentExpires};refresher=${n}`),this._sessionTimers.refresher="uas"===n,this._runSessionTimer()}_handleSessionTimersInIncomingResponse(e){if(!this._sessionTimers.enabled)return;let t;e.session_expires&&e.session_expires>=l.MIN_SESSION_EXPIRES?(this._sessionTimers.currentExpires=e.session_expires,t=e.session_expires_refresher||"uac"):(this._sessionTimers.currentExpires=this._sessionTimers.defaultExpires,t="uac"),this._sessionTimers.refresher="uac"===t,this._runSessionTimer()}_runSessionTimer(){const e=this._sessionTimers.currentExpires;this._sessionTimers.running=!0,clearTimeout(this._sessionTimers.timer),this._sessionTimers.refresher?this._sessionTimers.timer=setTimeout((()=>{this._status!==C.STATUS_TERMINATED&&this._isReadyToReOffer()&&(v.debug("runSessionTimer() | sending session refresh request"),this._sessionTimers.refreshMethod===l.UPDATE?this._sendUpdate():this._sendReinvite())}),500*e):this._sessionTimers.timer=setTimeout((()=>{this._status!==C.STATUS_TERMINATED&&(v.warn("runSessionTimer() | timer expired, terminating the session"),this.terminate({cause:l.causes.REQUEST_TIMEOUT,status_code:408,reason_phrase:"Session Timer Expired"}))}),1100*e)}_toggleMuteAudio(e){const t=this._connection.getSenders().filter((e=>e.track&&"audio"===e.track.kind));for(const n of t)n.track.enabled=!e}_toggleMuteVideo(e){const t=this._connection.getSenders().filter((e=>e.track&&"video"===e.track.kind));for(const n of t)n.track.enabled=!e}_newRTCSession(e,t){v.debug("newRTCSession()"),this._ua.newRTCSession(this,{originator:e,session:this,request:t})}_connecting(e){v.debug("session connecting"),v.debug('emit "connecting"'),this.emit("connecting",{request:e})}_progress(e,t){v.debug("session progress"),v.debug('emit "progress"'),this.emit("progress",{originator:e,response:t||null})}_accepted(e,t){v.debug("session accepted"),this._start_time=new Date,v.debug('emit "accepted"'),this.emit("accepted",{originator:e,response:t||null})}_confirmed(e,t){v.debug("session confirmed"),this._is_confirmed=!0,v.debug('emit "confirmed"'),this.emit("confirmed",{originator:e,ack:t||null})}_ended(e,t,n){v.debug("session ended"),this._end_time=new Date,this._close(),v.debug('emit "ended"'),this.emit("ended",{originator:e,message:t||null,cause:n})}_failed(e,t,n){v.debug("session failed"),v.debug('emit "_failed"'),this.emit("_failed",{originator:e,message:t||null,cause:n}),this._close(),v.debug('emit "failed"'),this.emit("failed",{originator:e,message:t||null,cause:n})}_onhold(e){v.debug("session onhold"),this._setLocalMediaStatus(),v.debug('emit "hold"'),this.emit("hold",{originator:e})}_onunhold(e){v.debug("session onunhold"),this._setLocalMediaStatus(),v.debug('emit "unhold"'),this.emit("unhold",{originator:e})}_onmute({audio:e,video:t}){v.debug("session onmute"),this._setLocalMediaStatus(),v.debug('emit "muted"'),this.emit("muted",{audio:e,video:t})}_onunmute({audio:e,video:t}){v.debug("session onunmute"),this._setLocalMediaStatus(),v.debug('emit "unmuted"'),this.emit("unmuted",{audio:e,video:t})}}},399:(e,t,n)=>{const s=n(633),r=n(259),i=n(582),l=n(771),o=n(722),a=n(128),u=n(445),c=n(555),h=n(898);n(833)("JsSIP")("version %s",s.version),e.exports={C:r,Exceptions:i,Utils:l,UA:o,URI:a,NameAddrHeader:u,WebSocketInterface:h,Grammar:c,debug:n(833),get name(){return s.title},get version(){return s.version}}},434:(e,t,n)=>{const s=n(152),r=n(259),i=new s("RTCSession:ReferNotifier");e.exports=class{constructor(e,t,n){this._session=e,this._id=t,this._expires=n||300,this._active=!0,this.notify(100)}notify(e,t){if(i.debug("notify()"),!1===this._active)return;let n;t=t||r.REASON_PHRASE[e]||"",n=e>=200?"terminated;reason=noresource":`active;expires=${this._expires}`,this._session.sendRequest(r.NOTIFY,{extraHeaders:[`Event: refer;id=${this._id}`,`Subscription-State: ${n}`,"Content-Type: message/sipfrag;version=2.0"],body:`SIP/2.0 ${e} ${t}`,eventHandlers:{onErrorResponse(){this._active=!1}}})}}},445:(e,t,n)=>{const s=n(128),r=n(555);e.exports=class e{static parse(e){return-1!==(e=r.parse(e,"Name_Addr_Header"))?e:void 0}constructor(e,t,n){if(!(e&&e instanceof s))throw new TypeError('missing or invalid "uri" parameter');this._uri=e,this._parameters={},this.display_name=t;for(const e in n)Object.prototype.hasOwnProperty.call(n,e)&&this.setParam(e,n[e])}get uri(){return this._uri}get display_name(){return this._display_name}set display_name(e){this._display_name=0===e?"0":e}setParam(e,t){e&&(this._parameters[e.toLowerCase()]=null==t?null:t.toString())}getParam(e){if(e)return this._parameters[e.toLowerCase()]}hasParam(e){if(e)return!!this._parameters.hasOwnProperty(e.toLowerCase())}deleteParam(e){if(e=e.toLowerCase(),this._parameters.hasOwnProperty(e)){const t=this._parameters[e];return delete this._parameters[e],t}}clearParams(){this._parameters={}}clone(){return new e(this._uri.clone(),this._display_name,JSON.parse(JSON.stringify(this._parameters)))}_quote(e){return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"')}toString(){let e=this._display_name?`"${this._quote(this._display_name)}" `:"";e+=`<${this._uri.toString()}>`;for(const t in this._parameters)Object.prototype.hasOwnProperty.call(this._parameters,t)&&(e+=`;${t}`,null!==this._parameters[t]&&(e+=`=${this._parameters[t]}`));return e}}},446:(e,t,n)=>{const s=n(152),r=n(259),i=n(996),l=n(717),o=new s("RequestSender"),a={onRequestTimeout:()=>{},onTransportError:()=>{},onReceiveResponse:()=>{},onAuthenticated:()=>{}};e.exports=class{constructor(e,t,n){this._ua=e,this._eventHandlers=n,this._method=t.method,this._request=t,this._auth=null,this._challenged=!1,this._staled=!1;for(const e in a)Object.prototype.hasOwnProperty.call(a,e)&&(this._eventHandlers[e]||(this._eventHandlers[e]=a[e]));e.status!==e.C.STATUS_USER_CLOSED||this._method===r.BYE&&this._method===r.ACK||this._eventHandlers.onTransportError()}send(){const e={onRequestTimeout:()=>{this._eventHandlers.onRequestTimeout()},onTransportError:()=>{this._eventHandlers.onTransportError()},onReceiveResponse:e=>{this._receiveResponse(e)}};switch(this._method){case"INVITE":this.clientTransaction=new l.InviteClientTransaction(this._ua,this._ua.transport,this._request,e);break;case"ACK":this.clientTransaction=new l.AckClientTransaction(this._ua,this._ua.transport,this._request,e);break;default:this.clientTransaction=new l.NonInviteClientTransaction(this._ua,this._ua.transport,this._request,e)}this._ua._configuration.authorization_jwt&&this._request.setHeader("Authorization",this._ua._configuration.authorization_jwt),this.clientTransaction.send()}_receiveResponse(e){let t,n;const s=e.status_code;if(401!==s&&407!==s||null===this._ua.configuration.password&&null===this._ua.configuration.ha1)this._eventHandlers.onReceiveResponse(e);else{if(401===e.status_code?(t=e.parseHeader("www-authenticate"),n="authorization"):(t=e.parseHeader("proxy-authenticate"),n="proxy-authorization"),!t)return o.debug(`${e.status_code} with wrong or missing challenge, cannot authenticate`),void this._eventHandlers.onReceiveResponse(e);if(!this._challenged||!this._staled&&!0===t.stale){if(this._auth||(this._auth=new i({username:this._ua.configuration.authorization_user,password:this._ua.configuration.password,realm:this._ua.configuration.realm,ha1:this._ua.configuration.ha1})),!this._auth.authenticate(this._request,t))return void this._eventHandlers.onReceiveResponse(e);this._challenged=!0,this._ua.set("realm",this._auth.get("realm")),this._ua.set("ha1",this._auth.get("ha1")),t.stale&&(this._staled=!0),this._request=this._request.clone(),this._request.cseq+=1,this._request.setHeader("cseq",`${this._request.cseq} ${this._method}`),this._request.setHeader(n,this._auth.toString()),this._eventHandlers.onAuthenticated(this._request),this.send()}else this._eventHandlers.onReceiveResponse(e)}}}},530:e=>{e.exports={T1:500,T2:4e3,T4:5e3,TIMER_B:32e3,TIMER_D:0,TIMER_F:32e3,TIMER_H:32e3,TIMER_I:0,TIMER_J:0,TIMER_K:0,TIMER_L:32e3,TIMER_M:32e3,PROVISIONAL_RESPONSE_INTERVAL:6e4}},555:(e,t,n)=>{e.exports=function(){function e(e){return'"'+e.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\x08/g,"\\b").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\f/g,"\\f").replace(/\r/g,"\\r").replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g,escape)+'"'}var t={parse:function(t,s){var r={CRLF:c,DIGIT:h,ALPHA:d,HEXDIG:_,WSP:p,OCTET:m,DQUOTE:f,SP:g,HTAB:T,alphanum:v,reserved:C,unreserved:E,mark:S,escaped:A,LWS:b,SWS:y,HCOLON:w,TEXT_UTF8_TRIM:R,TEXT_UTF8char:I,UTF8_NONASCII:O,UTF8_CONT:N,LHEX:function(){var e;return null===(e=h())&&(/^[a-f]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,0===l&&u("[a-f]"))),e},token:$,token_nodot:x,separators:function(){var e;return 40===t.charCodeAt(i)?(e="(",i++):(e=null,0===l&&u('"("')),null===e&&(41===t.charCodeAt(i)?(e=")",i++):(e=null,0===l&&u('")"')),null===e&&(60===t.charCodeAt(i)?(e="<",i++):(e=null,0===l&&u('"<"')),null===e&&(62===t.charCodeAt(i)?(e=">",i++):(e=null,0===l&&u('">"')),null===e&&(64===t.charCodeAt(i)?(e="@",i++):(e=null,0===l&&u('"@"')),null===e&&(44===t.charCodeAt(i)?(e=",",i++):(e=null,0===l&&u('","')),null===e&&(59===t.charCodeAt(i)?(e=";",i++):(e=null,0===l&&u('";"')),null===e&&(58===t.charCodeAt(i)?(e=":",i++):(e=null,0===l&&u('":"')),null===e&&(92===t.charCodeAt(i)?(e="\\",i++):(e=null,0===l&&u('"\\\\"')),null===e&&null===(e=f())&&(47===t.charCodeAt(i)?(e="/",i++):(e=null,0===l&&u('"/"')),null===e&&(91===t.charCodeAt(i)?(e="[",i++):(e=null,0===l&&u('"["')),null===e&&(93===t.charCodeAt(i)?(e="]",i++):(e=null,0===l&&u('"]"')),null===e&&(63===t.charCodeAt(i)?(e="?",i++):(e=null,0===l&&u('"?"')),null===e&&(61===t.charCodeAt(i)?(e="=",i++):(e=null,0===l&&u('"="')),null===e&&(123===t.charCodeAt(i)?(e="{",i++):(e=null,0===l&&u('"{"')),null===e&&(125===t.charCodeAt(i)?(e="}",i++):(e=null,0===l&&u('"}"')),null===e&&null===(e=g())&&(e=T())))))))))))))))),e},word:U,STAR:D,SLASH:P,EQUAL:M,LPAREN:L,RPAREN:q,RAQUOT:k,LAQUOT:H,COMMA:F,SEMI:j,COLON:V,LDQUOT:G,RDQUOT:B,comment:function e(){var t,n,s,r;if(r=i,null!==(t=L())){for(n=[],null===(s=z())&&null===(s=J())&&(s=e());null!==s;)n.push(s),null===(s=z())&&null===(s=J())&&(s=e());null!==n&&null!==(s=q())?t=[t,n,s]:(t=null,i=r)}else t=null,i=r;return t},ctext:z,quoted_string:W,quoted_string_clean:K,qdtext:Y,quoted_pair:J,SIP_URI_noparams:X,SIP_URI:Q,uri_scheme:Z,uri_scheme_sips:ee,uri_scheme_sip:te,userinfo:ne,user:se,user_unreserved:re,password:ie,hostport:le,host:oe,hostname:ae,domainlabel:ue,toplabel:ce,IPv6reference:he,IPv6address:de,h16:_e,ls32:pe,IPv4address:me,dec_octet:fe,port:ge,uri_parameters:Te,uri_parameter:ve,transport_param:Ce,user_param:Ee,method_param:Se,ttl_param:Ae,maddr_param:be,lr_param:ye,other_param:we,pname:Re,pvalue:Ie,paramchar:Oe,param_unreserved:Ne,headers:$e,header:xe,hname:Ue,hvalue:De,hnv_unreserved:Pe,Request_Response:function(){var e;return null===(e=ht())&&(e=Me()),e},Request_Line:Me,Request_URI:Le,absoluteURI:qe,hier_part:ke,net_path:He,abs_path:Fe,opaque_part:je,uric:Ve,uric_no_slash:Ge,path_segments:Be,segment:ze,param:We,pchar:Ke,scheme:Ye,authority:Je,srvr:Xe,reg_name:Qe,query:Ze,SIP_Version:et,INVITEm:tt,ACKm:nt,OPTIONSm:st,BYEm:rt,CANCELm:it,REGISTERm:lt,SUBSCRIBEm:ot,NOTIFYm:at,REFERm:ut,Method:ct,Status_Line:ht,Status_Code:dt,extension_code:_t,Reason_Phrase:pt,Allow_Events:function(){var e,t,n,s,r,l;if(r=i,null!==(e=qt())){for(t=[],l=i,null!==(n=F())&&null!==(s=qt())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=F())&&null!==(s=qt())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},Call_ID:function(){var e,n,s,r,o,a;return r=i,o=i,null!==(e=U())?(a=i,64===t.charCodeAt(i)?(n="@",i++):(n=null,0===l&&u('"@"')),null!==n&&null!==(s=U())?n=[n,s]:(n=null,i=a),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,i=o)):(e=null,i=o),null!==e&&(e=function(e){Fn=t.substring(i,e)}(r)),null===e&&(i=r),e},Contact:function(){var e,t,n,s,r,l,o;if(r=i,null===(e=D()))if(l=i,null!==(e=mt())){for(t=[],o=i,null!==(n=F())&&null!==(s=mt())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=F())&&null!==(s=mt())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=l)}else e=null,i=l;return null!==e&&(e=function(){var e,t;for(t=Fn.multi_header.length,e=0;e<t;e++)if(null===Fn.multi_header[e].parsed){Fn=null;break}Fn=null!==Fn?Fn.multi_header:-1}()),null===e&&(i=r),e},contact_param:mt,name_addr:ft,display_name:gt,contact_params:Tt,c_p_q:vt,c_p_expires:Ct,delta_seconds:Et,qvalue:St,generic_param:At,gen_value:bt,Content_Disposition:function(){var e,t,n,s,r,l;if(r=i,null!==(e=yt())){for(t=[],l=i,null!==(n=j())&&null!==(s=wt())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=j())&&null!==(s=wt())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},disp_type:yt,disp_param:wt,handling_param:Rt,Content_Encoding:function(){var e,t,n,s,r,l;if(r=i,null!==(e=$())){for(t=[],l=i,null!==(n=F())&&null!==(s=$())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=F())&&null!==(s=$())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},Content_Length:function(){var e,t,n;if(n=i,null!==(t=h()))for(e=[];null!==t;)e.push(t),t=h();else e=null;return null!==e&&(e=void(Fn=parseInt(e.join("")))),null===e&&(i=n),e},Content_Type:function(){var e,n;return n=i,null!==(e=It())&&(e=function(e){Fn=t.substring(i,e)}(n)),null===e&&(i=n),e},media_type:It,m_type:Ot,discrete_type:Nt,composite_type:$t,extension_token:xt,x_token:Ut,m_subtype:Dt,m_parameter:Pt,m_value:Mt,CSeq:function(){var e,t,n,s;return s=i,null!==(e=Lt())&&null!==(t=b())&&null!==(n=ct())?e=[e,t,n]:(e=null,i=s),e},CSeq_value:Lt,Expires:function(){var e,t;return t=i,null!==(e=Et())&&(e=void(Fn=e)),null===e&&(i=t),e},Event:function(){var e,t,n,s,r,l,o,a;if(r=i,l=i,null!==(e=qt())){for(t=[],o=i,null!==(n=j())&&null!==(s=At())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=j())&&null!==(s=At())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=l)}else e=null,i=l;return null!==e&&(a=e[0],e=void(Fn.event=a.join("").toLowerCase())),null===e&&(i=r),e},event_type:qt,From:function(){var e,t,n,s,r,l,o;if(r=i,l=i,null===(e=X())&&(e=ft()),null!==e){for(t=[],o=i,null!==(n=j())&&null!==(s=kt())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=j())&&null!==(s=kt())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=l)}else e=null,i=l;return null!==e&&(e=function(){var e=Fn.tag;try{Fn=new Hn(Fn.uri,Fn.display_name,Fn.params),e&&Fn.setParam("tag",e)}catch(e){Fn=-1}}()),null===e&&(i=r),e},from_param:kt,tag_param:Ht,Max_Forwards:function(){var e,t,n;if(n=i,null!==(t=h()))for(e=[];null!==t;)e.push(t),t=h();else e=null;return null!==e&&(e=void(Fn=parseInt(e.join("")))),null===e&&(i=n),e},Min_Expires:function(){var e,t;return t=i,null!==(e=Et())&&(e=void(Fn=e)),null===e&&(i=t),e},Name_Addr_Header:function(){var e,t,n,s,r,l,o,a,u,c;for(a=i,u=i,e=[],t=gt();null!==t;)e.push(t),t=gt();if(null!==e)if(null!==(t=H()))if(null!==(n=Q()))if(null!==(s=k())){for(r=[],c=i,null!==(l=j())&&null!==(o=At())?l=[l,o]:(l=null,i=c);null!==l;)r.push(l),c=i,null!==(l=j())&&null!==(o=At())?l=[l,o]:(l=null,i=c);null!==r?e=[e,t,n,s,r]:(e=null,i=u)}else e=null,i=u;else e=null,i=u;else e=null,i=u;else e=null,i=u;return null!==e&&(e=function(){try{Fn=new Hn(Fn.uri,Fn.display_name,Fn.params)}catch(e){Fn=-1}}()),null===e&&(i=a),e},Proxy_Authenticate:function(){return Ft()},challenge:Ft,other_challenge:jt,auth_param:Vt,digest_cln:Gt,realm:Bt,realm_value:zt,domain:Wt,URI:Kt,nonce:Yt,nonce_value:Jt,opaque:Xt,stale:Qt,algorithm:Zt,qop_options:en,qop_value:tn,Proxy_Require:function(){var e,t,n,s,r,l;if(r=i,null!==(e=$())){for(t=[],l=i,null!==(n=F())&&null!==(s=$())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=F())&&null!==(s=$())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},Record_Route:function(){var e,t,n,s,r,l,o;if(r=i,l=i,null!==(e=nn())){for(t=[],o=i,null!==(n=F())&&null!==(s=nn())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=F())&&null!==(s=nn())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=l)}else e=null,i=l;return null!==e&&(e=function(){var e,t;for(t=Fn.multi_header.length,e=0;e<t;e++)if(null===Fn.multi_header[e].parsed){Fn=null;break}Fn=null!==Fn?Fn.multi_header:-1}()),null===e&&(i=r),e},rec_route:nn,Reason:function(){var e,n,s,r,o,a,c;if(o=i,a=i,"sip"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,0===l&&u('"SIP"')),null===e&&(e=$()),null!==e){for(n=[],c=i,null!==(s=j())&&null!==(r=sn())?s=[s,r]:(s=null,i=c);null!==s;)n.push(s),c=i,null!==(s=j())&&null!==(r=sn())?s=[s,r]:(s=null,i=c);null!==n?e=[e,n]:(e=null,i=a)}else e=null,i=a;return null!==e&&(e=function(e,t){if(Fn.protocol=t.toLowerCase(),Fn.params||(Fn.params={}),Fn.params.text&&'"'===Fn.params.text[0]){var n=Fn.params.text;Fn.text=n.substring(1,n.length-1),delete Fn.params.text}}(0,e[0])),null===e&&(i=o),e},reason_param:sn,reason_cause:rn,Require:function(){var e,t,n,s,r,l;if(r=i,null!==(e=$())){for(t=[],l=i,null!==(n=F())&&null!==(s=$())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=F())&&null!==(s=$())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},Route:function(){var e,t,n,s,r,l;if(r=i,null!==(e=ln())){for(t=[],l=i,null!==(n=F())&&null!==(s=ln())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=F())&&null!==(s=ln())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},route_param:ln,Subscription_State:function(){var e,t,n,s,r,l;if(r=i,null!==(e=on())){for(t=[],l=i,null!==(n=j())&&null!==(s=an())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=j())&&null!==(s=an())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},substate_value:on,subexp_params:an,event_reason_value:un,Subject:function(){var e;return null!==(e=R())?e:""},Supported:function(){var e,t,n,s,r,l;if(r=i,null!==(e=$())){for(t=[],l=i,null!==(n=F())&&null!==(s=$())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=F())&&null!==(s=$())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return null!==e?e:""},To:function(){var e,t,n,s,r,l,o;if(r=i,l=i,null===(e=X())&&(e=ft()),null!==e){for(t=[],o=i,null!==(n=j())&&null!==(s=cn())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=j())&&null!==(s=cn())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=l)}else e=null,i=l;return null!==e&&(e=function(){var e=Fn.tag;try{Fn=new Hn(Fn.uri,Fn.display_name,Fn.params),e&&Fn.setParam("tag",e)}catch(e){Fn=-1}}()),null===e&&(i=r),e},to_param:cn,Via:function(){var e,t,n,s,r,l;if(r=i,null!==(e=hn())){for(t=[],l=i,null!==(n=F())&&null!==(s=hn())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=F())&&null!==(s=hn())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},via_param:hn,via_params:dn,via_ttl:_n,via_maddr:pn,via_received:mn,via_branch:fn,response_port:gn,rport:Tn,sent_protocol:vn,protocol_name:Cn,transport:En,sent_by:Sn,via_host:An,via_port:bn,ttl:yn,WWW_Authenticate:function(){return Ft()},Session_Expires:function(){var e,t,n,s,r,l;if(r=i,null!==(e=wn())){for(t=[],l=i,null!==(n=j())&&null!==(s=Rn())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=j())&&null!==(s=Rn())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},s_e_expires:wn,s_e_params:Rn,s_e_refresher:In,extension_header:function(){var e,t,n,s;return s=i,null!==(e=$())&&null!==(t=w())&&null!==(n=On())?e=[e,t,n]:(e=null,i=s),e},header_value:On,message_body:function(){var e,t;for(e=[],t=m();null!==t;)e.push(t),t=m();return e},uuid_URI:function(){var e,n,s;return s=i,"uuid:"===t.substr(i,5)?(e="uuid:",i+=5):(e=null,0===l&&u('"uuid:"')),null!==e&&null!==(n=Nn())?e=[e,n]:(e=null,i=s),e},uuid:Nn,hex4:$n,hex8:xn,hex12:Un,Refer_To:function(){var e,t,n,s,r,l,o;if(r=i,l=i,null===(e=X())&&(e=ft()),null!==e){for(t=[],o=i,null!==(n=j())&&null!==(s=At())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=j())&&null!==(s=At())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=l)}else e=null,i=l;return null!==e&&(e=function(){try{Fn=new Hn(Fn.uri,Fn.display_name,Fn.params)}catch(e){Fn=-1}}()),null===e&&(i=r),e},Replaces:function(){var e,t,n,s,r,l;if(r=i,null!==(e=Dn())){for(t=[],l=i,null!==(n=j())&&null!==(s=Pn())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=j())&&null!==(s=Pn())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},call_id:Dn,replaces_param:Pn,to_tag:Mn,from_tag:Ln,early_flag:qn};if(void 0!==s){if(void 0===r[s])throw new Error("Invalid rule name: "+e(s)+".")}else s="CRLF";var i=0,l=0,o=0,a=[];function u(e){i<o||(i>o&&(o=i,a=[]),a.push(e))}function c(){var e;return"\r\n"===t.substr(i,2)?(e="\r\n",i+=2):(e=null,0===l&&u('"\\r\\n"')),e}function h(){var e;return/^[0-9]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,0===l&&u("[0-9]")),e}function d(){var e;return/^[a-zA-Z]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,0===l&&u("[a-zA-Z]")),e}function _(){var e;return/^[0-9a-fA-F]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,0===l&&u("[0-9a-fA-F]")),e}function p(){var e;return null===(e=g())&&(e=T()),e}function m(){var e;return/^[\0-\xFF]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,0===l&&u("[\\0-\\xFF]")),e}function f(){var e;return/^["]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,0===l&&u('["]')),e}function g(){var e;return 32===t.charCodeAt(i)?(e=" ",i++):(e=null,0===l&&u('" "')),e}function T(){var e;return 9===t.charCodeAt(i)?(e="\t",i++):(e=null,0===l&&u('"\\t"')),e}function v(){var e;return/^[a-zA-Z0-9]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,0===l&&u("[a-zA-Z0-9]")),e}function C(){var e;return 59===t.charCodeAt(i)?(e=";",i++):(e=null,0===l&&u('";"')),null===e&&(47===t.charCodeAt(i)?(e="/",i++):(e=null,0===l&&u('"/"')),null===e&&(63===t.charCodeAt(i)?(e="?",i++):(e=null,0===l&&u('"?"')),null===e&&(58===t.charCodeAt(i)?(e=":",i++):(e=null,0===l&&u('":"')),null===e&&(64===t.charCodeAt(i)?(e="@",i++):(e=null,0===l&&u('"@"')),null===e&&(38===t.charCodeAt(i)?(e="&",i++):(e=null,0===l&&u('"&"')),null===e&&(61===t.charCodeAt(i)?(e="=",i++):(e=null,0===l&&u('"="')),null===e&&(43===t.charCodeAt(i)?(e="+",i++):(e=null,0===l&&u('"+"')),null===e&&(36===t.charCodeAt(i)?(e="$",i++):(e=null,0===l&&u('"$"')),null===e&&(44===t.charCodeAt(i)?(e=",",i++):(e=null,0===l&&u('","'))))))))))),e}function E(){var e;return null===(e=v())&&(e=S()),e}function S(){var e;return 45===t.charCodeAt(i)?(e="-",i++):(e=null,0===l&&u('"-"')),null===e&&(95===t.charCodeAt(i)?(e="_",i++):(e=null,0===l&&u('"_"')),null===e&&(46===t.charCodeAt(i)?(e=".",i++):(e=null,0===l&&u('"."')),null===e&&(33===t.charCodeAt(i)?(e="!",i++):(e=null,0===l&&u('"!"')),null===e&&(126===t.charCodeAt(i)?(e="~",i++):(e=null,0===l&&u('"~"')),null===e&&(42===t.charCodeAt(i)?(e="*",i++):(e=null,0===l&&u('"*"')),null===e&&(39===t.charCodeAt(i)?(e="'",i++):(e=null,0===l&&u('"\'"')),null===e&&(40===t.charCodeAt(i)?(e="(",i++):(e=null,0===l&&u('"("')),null===e&&(41===t.charCodeAt(i)?(e=")",i++):(e=null,0===l&&u('")"')))))))))),e}function A(){var e,n,s,r,o;return r=i,o=i,37===t.charCodeAt(i)?(e="%",i++):(e=null,0===l&&u('"%"')),null!==e&&null!==(n=_())&&null!==(s=_())?e=[e,n,s]:(e=null,i=o),null!==e&&(e=e.join("")),null===e&&(i=r),e}function b(){var e,t,n,s,r,l;for(s=i,r=i,l=i,e=[],t=p();null!==t;)e.push(t),t=p();if(null!==e&&null!==(t=c())?e=[e,t]:(e=null,i=l),null!==(e=null!==e?e:"")){if(null!==(n=p()))for(t=[];null!==n;)t.push(n),n=p();else t=null;null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return null!==e&&(e=" "),null===e&&(i=s),e}function y(){var e;return null!==(e=b())?e:""}function w(){var e,n,s,r,o;for(r=i,o=i,e=[],null===(n=g())&&(n=T());null!==n;)e.push(n),null===(n=g())&&(n=T());return null!==e?(58===t.charCodeAt(i)?(n=":",i++):(n=null,0===l&&u('":"')),null!==n&&null!==(s=y())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e=":"),null===e&&(i=r),e}function R(){var e,n,s,r,l,o,a;if(l=i,o=i,null!==(n=I()))for(e=[];null!==n;)e.push(n),n=I();else e=null;if(null!==e){for(n=[],a=i,s=[],r=b();null!==r;)s.push(r),r=b();for(null!==s&&null!==(r=I())?s=[s,r]:(s=null,i=a);null!==s;){for(n.push(s),a=i,s=[],r=b();null!==r;)s.push(r),r=b();null!==s&&null!==(r=I())?s=[s,r]:(s=null,i=a)}null!==n?e=[e,n]:(e=null,i=o)}else e=null,i=o;return null!==e&&(e=function(e){return t.substring(i,e)}(l)),null===e&&(i=l),e}function I(){var e;return/^[!-~]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,0===l&&u("[!-~]")),null===e&&(e=O()),e}function O(){var e;return/^[\x80-\uFFFF]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,0===l&&u("[\\x80-\\uFFFF]")),e}function N(){var e;return/^[\x80-\xBF]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,0===l&&u("[\\x80-\\xBF]")),e}function $(){var e,n,s;if(s=i,null===(n=v())&&(45===t.charCodeAt(i)?(n="-",i++):(n=null,0===l&&u('"-"')),null===n&&(46===t.charCodeAt(i)?(n=".",i++):(n=null,0===l&&u('"."')),null===n&&(33===t.charCodeAt(i)?(n="!",i++):(n=null,0===l&&u('"!"')),null===n&&(37===t.charCodeAt(i)?(n="%",i++):(n=null,0===l&&u('"%"')),null===n&&(42===t.charCodeAt(i)?(n="*",i++):(n=null,0===l&&u('"*"')),null===n&&(95===t.charCodeAt(i)?(n="_",i++):(n=null,0===l&&u('"_"')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,0===l&&u('"+"')),null===n&&(96===t.charCodeAt(i)?(n="`",i++):(n=null,0===l&&u('"`"')),null===n&&(39===t.charCodeAt(i)?(n="'",i++):(n=null,0===l&&u('"\'"')),null===n&&(126===t.charCodeAt(i)?(n="~",i++):(n=null,0===l&&u('"~"')))))))))))),null!==n)for(e=[];null!==n;)e.push(n),null===(n=v())&&(45===t.charCodeAt(i)?(n="-",i++):(n=null,0===l&&u('"-"')),null===n&&(46===t.charCodeAt(i)?(n=".",i++):(n=null,0===l&&u('"."')),null===n&&(33===t.charCodeAt(i)?(n="!",i++):(n=null,0===l&&u('"!"')),null===n&&(37===t.charCodeAt(i)?(n="%",i++):(n=null,0===l&&u('"%"')),null===n&&(42===t.charCodeAt(i)?(n="*",i++):(n=null,0===l&&u('"*"')),null===n&&(95===t.charCodeAt(i)?(n="_",i++):(n=null,0===l&&u('"_"')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,0===l&&u('"+"')),null===n&&(96===t.charCodeAt(i)?(n="`",i++):(n=null,0===l&&u('"`"')),null===n&&(39===t.charCodeAt(i)?(n="'",i++):(n=null,0===l&&u('"\'"')),null===n&&(126===t.charCodeAt(i)?(n="~",i++):(n=null,0===l&&u('"~"'))))))))))));else e=null;return null!==e&&(e=function(e){return t.substring(i,e)}(s)),null===e&&(i=s),e}function x(){var e,n,s;if(s=i,null===(n=v())&&(45===t.charCodeAt(i)?(n="-",i++):(n=null,0===l&&u('"-"')),null===n&&(33===t.charCodeAt(i)?(n="!",i++):(n=null,0===l&&u('"!"')),null===n&&(37===t.charCodeAt(i)?(n="%",i++):(n=null,0===l&&u('"%"')),null===n&&(42===t.charCodeAt(i)?(n="*",i++):(n=null,0===l&&u('"*"')),null===n&&(95===t.charCodeAt(i)?(n="_",i++):(n=null,0===l&&u('"_"')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,0===l&&u('"+"')),null===n&&(96===t.charCodeAt(i)?(n="`",i++):(n=null,0===l&&u('"`"')),null===n&&(39===t.charCodeAt(i)?(n="'",i++):(n=null,0===l&&u('"\'"')),null===n&&(126===t.charCodeAt(i)?(n="~",i++):(n=null,0===l&&u('"~"'))))))))))),null!==n)for(e=[];null!==n;)e.push(n),null===(n=v())&&(45===t.charCodeAt(i)?(n="-",i++):(n=null,0===l&&u('"-"')),null===n&&(33===t.charCodeAt(i)?(n="!",i++):(n=null,0===l&&u('"!"')),null===n&&(37===t.charCodeAt(i)?(n="%",i++):(n=null,0===l&&u('"%"')),null===n&&(42===t.charCodeAt(i)?(n="*",i++):(n=null,0===l&&u('"*"')),null===n&&(95===t.charCodeAt(i)?(n="_",i++):(n=null,0===l&&u('"_"')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,0===l&&u('"+"')),null===n&&(96===t.charCodeAt(i)?(n="`",i++):(n=null,0===l&&u('"`"')),null===n&&(39===t.charCodeAt(i)?(n="'",i++):(n=null,0===l&&u('"\'"')),null===n&&(126===t.charCodeAt(i)?(n="~",i++):(n=null,0===l&&u('"~"')))))))))));else e=null;return null!==e&&(e=function(e){return t.substring(i,e)}(s)),null===e&&(i=s),e}function U(){var e,n,s;if(s=i,null===(n=v())&&(45===t.charCodeAt(i)?(n="-",i++):(n=null,0===l&&u('"-"')),null===n&&(46===t.charCodeAt(i)?(n=".",i++):(n=null,0===l&&u('"."')),null===n&&(33===t.charCodeAt(i)?(n="!",i++):(n=null,0===l&&u('"!"')),null===n&&(37===t.charCodeAt(i)?(n="%",i++):(n=null,0===l&&u('"%"')),null===n&&(42===t.charCodeAt(i)?(n="*",i++):(n=null,0===l&&u('"*"')),null===n&&(95===t.charCodeAt(i)?(n="_",i++):(n=null,0===l&&u('"_"')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,0===l&&u('"+"')),null===n&&(96===t.charCodeAt(i)?(n="`",i++):(n=null,0===l&&u('"`"')),null===n&&(39===t.charCodeAt(i)?(n="'",i++):(n=null,0===l&&u('"\'"')),null===n&&(126===t.charCodeAt(i)?(n="~",i++):(n=null,0===l&&u('"~"')),null===n&&(40===t.charCodeAt(i)?(n="(",i++):(n=null,0===l&&u('"("')),null===n&&(41===t.charCodeAt(i)?(n=")",i++):(n=null,0===l&&u('")"')),null===n&&(60===t.charCodeAt(i)?(n="<",i++):(n=null,0===l&&u('"<"')),null===n&&(62===t.charCodeAt(i)?(n=">",i++):(n=null,0===l&&u('">"')),null===n&&(58===t.charCodeAt(i)?(n=":",i++):(n=null,0===l&&u('":"')),null===n&&(92===t.charCodeAt(i)?(n="\\",i++):(n=null,0===l&&u('"\\\\"')),null===n&&null===(n=f())&&(47===t.charCodeAt(i)?(n="/",i++):(n=null,0===l&&u('"/"')),null===n&&(91===t.charCodeAt(i)?(n="[",i++):(n=null,0===l&&u('"["')),null===n&&(93===t.charCodeAt(i)?(n="]",i++):(n=null,0===l&&u('"]"')),null===n&&(63===t.charCodeAt(i)?(n="?",i++):(n=null,0===l&&u('"?"')),null===n&&(123===t.charCodeAt(i)?(n="{",i++):(n=null,0===l&&u('"{"')),null===n&&(125===t.charCodeAt(i)?(n="}",i++):(n=null,0===l&&u('"}"')))))))))))))))))))))))),null!==n)for(e=[];null!==n;)e.push(n),null===(n=v())&&(45===t.charCodeAt(i)?(n="-",i++):(n=null,0===l&&u('"-"')),null===n&&(46===t.charCodeAt(i)?(n=".",i++):(n=null,0===l&&u('"."')),null===n&&(33===t.charCodeAt(i)?(n="!",i++):(n=null,0===l&&u('"!"')),null===n&&(37===t.charCodeAt(i)?(n="%",i++):(n=null,0===l&&u('"%"')),null===n&&(42===t.charCodeAt(i)?(n="*",i++):(n=null,0===l&&u('"*"')),null===n&&(95===t.charCodeAt(i)?(n="_",i++):(n=null,0===l&&u('"_"')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,0===l&&u('"+"')),null===n&&(96===t.charCodeAt(i)?(n="`",i++):(n=null,0===l&&u('"`"')),null===n&&(39===t.charCodeAt(i)?(n="'",i++):(n=null,0===l&&u('"\'"')),null===n&&(126===t.charCodeAt(i)?(n="~",i++):(n=null,0===l&&u('"~"')),null===n&&(40===t.charCodeAt(i)?(n="(",i++):(n=null,0===l&&u('"("')),null===n&&(41===t.charCodeAt(i)?(n=")",i++):(n=null,0===l&&u('")"')),null===n&&(60===t.charCodeAt(i)?(n="<",i++):(n=null,0===l&&u('"<"')),null===n&&(62===t.charCodeAt(i)?(n=">",i++):(n=null,0===l&&u('">"')),null===n&&(58===t.charCodeAt(i)?(n=":",i++):(n=null,0===l&&u('":"')),null===n&&(92===t.charCodeAt(i)?(n="\\",i++):(n=null,0===l&&u('"\\\\"')),null===n&&null===(n=f())&&(47===t.charCodeAt(i)?(n="/",i++):(n=null,0===l&&u('"/"')),null===n&&(91===t.charCodeAt(i)?(n="[",i++):(n=null,0===l&&u('"["')),null===n&&(93===t.charCodeAt(i)?(n="]",i++):(n=null,0===l&&u('"]"')),null===n&&(63===t.charCodeAt(i)?(n="?",i++):(n=null,0===l&&u('"?"')),null===n&&(123===t.charCodeAt(i)?(n="{",i++):(n=null,0===l&&u('"{"')),null===n&&(125===t.charCodeAt(i)?(n="}",i++):(n=null,0===l&&u('"}"'))))))))))))))))))))))));else e=null;return null!==e&&(e=function(e){return t.substring(i,e)}(s)),null===e&&(i=s),e}function D(){var e,n,s,r,o;return r=i,o=i,null!==(e=y())?(42===t.charCodeAt(i)?(n="*",i++):(n=null,0===l&&u('"*"')),null!==n&&null!==(s=y())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e="*"),null===e&&(i=r),e}function P(){var e,n,s,r,o;return r=i,o=i,null!==(e=y())?(47===t.charCodeAt(i)?(n="/",i++):(n=null,0===l&&u('"/"')),null!==n&&null!==(s=y())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e="/"),null===e&&(i=r),e}function M(){var e,n,s,r,o;return r=i,o=i,null!==(e=y())?(61===t.charCodeAt(i)?(n="=",i++):(n=null,0===l&&u('"="')),null!==n&&null!==(s=y())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e="="),null===e&&(i=r),e}function L(){var e,n,s,r,o;return r=i,o=i,null!==(e=y())?(40===t.charCodeAt(i)?(n="(",i++):(n=null,0===l&&u('"("')),null!==n&&null!==(s=y())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e="("),null===e&&(i=r),e}function q(){var e,n,s,r,o;return r=i,o=i,null!==(e=y())?(41===t.charCodeAt(i)?(n=")",i++):(n=null,0===l&&u('")"')),null!==n&&null!==(s=y())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e=")"),null===e&&(i=r),e}function k(){var e,n,s,r;return s=i,r=i,62===t.charCodeAt(i)?(e=">",i++):(e=null,0===l&&u('">"')),null!==e&&null!==(n=y())?e=[e,n]:(e=null,i=r),null!==e&&(e=">"),null===e&&(i=s),e}function H(){var e,n,s,r;return s=i,r=i,null!==(e=y())?(60===t.charCodeAt(i)?(n="<",i++):(n=null,0===l&&u('"<"')),null!==n?e=[e,n]:(e=null,i=r)):(e=null,i=r),null!==e&&(e="<"),null===e&&(i=s),e}function F(){var e,n,s,r,o;return r=i,o=i,null!==(e=y())?(44===t.charCodeAt(i)?(n=",",i++):(n=null,0===l&&u('","')),null!==n&&null!==(s=y())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e=","),null===e&&(i=r),e}function j(){var e,n,s,r,o;return r=i,o=i,null!==(e=y())?(59===t.charCodeAt(i)?(n=";",i++):(n=null,0===l&&u('";"')),null!==n&&null!==(s=y())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e=";"),null===e&&(i=r),e}function V(){var e,n,s,r,o;return r=i,o=i,null!==(e=y())?(58===t.charCodeAt(i)?(n=":",i++):(n=null,0===l&&u('":"')),null!==n&&null!==(s=y())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e=":"),null===e&&(i=r),e}function G(){var e,t,n,s;return n=i,s=i,null!==(e=y())&&null!==(t=f())?e=[e,t]:(e=null,i=s),null!==e&&(e='"'),null===e&&(i=n),e}function B(){var e,t,n,s;return n=i,s=i,null!==(e=f())&&null!==(t=y())?e=[e,t]:(e=null,i=s),null!==e&&(e='"'),null===e&&(i=n),e}function z(){var e;return/^[!-']/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,0===l&&u("[!-']")),null===e&&(/^[*-[]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,0===l&&u("[*-[]")),null===e&&(/^[\]-~]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,0===l&&u("[\\]-~]")),null===e&&null===(e=O())&&(e=b()))),e}function W(){var e,n,s,r,l,o;if(l=i,o=i,null!==(e=y()))if(null!==(n=f())){for(s=[],null===(r=Y())&&(r=J());null!==r;)s.push(r),null===(r=Y())&&(r=J());null!==s&&null!==(r=f())?e=[e,n,s,r]:(e=null,i=o)}else e=null,i=o;else e=null,i=o;return null!==e&&(e=function(e){return t.substring(i,e)}(l)),null===e&&(i=l),e}function K(){var e,n,s,r,l,o;if(l=i,o=i,null!==(e=y()))if(null!==(n=f())){for(s=[],null===(r=Y())&&(r=J());null!==r;)s.push(r),null===(r=Y())&&(r=J());null!==s&&null!==(r=f())?e=[e,n,s,r]:(e=null,i=o)}else e=null,i=o;else e=null,i=o;return null!==e&&(e=function(e){var n=t.substring(i,e).trim();return n.substring(1,n.length-1).replace(/\\([\x00-\x09\x0b-\x0c\x0e-\x7f])/g,"$1")}(l)),null===e&&(i=l),e}function Y(){var e;return null===(e=b())&&(33===t.charCodeAt(i)?(e="!",i++):(e=null,0===l&&u('"!"')),null===e&&(/^[#-[]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,0===l&&u("[#-[]")),null===e&&(/^[\]-~]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,0===l&&u("[\\]-~]")),null===e&&(e=O())))),e}function J(){var e,n,s;return s=i,92===t.charCodeAt(i)?(e="\\",i++):(e=null,0===l&&u('"\\\\"')),null!==e?(/^[\0-\t]/.test(t.charAt(i))?(n=t.charAt(i),i++):(n=null,0===l&&u("[\\0-\\t]")),null===n&&(/^[\x0B-\f]/.test(t.charAt(i))?(n=t.charAt(i),i++):(n=null,0===l&&u("[\\x0B-\\f]")),null===n&&(/^[\x0E-]/.test(t.charAt(i))?(n=t.charAt(i),i++):(n=null,0===l&&u("[\\x0E-]")))),null!==n?e=[e,n]:(e=null,i=s)):(e=null,i=s),e}function X(){var e,n,s,r,o,a;return o=i,a=i,null!==(e=Z())?(58===t.charCodeAt(i)?(n=":",i++):(n=null,0===l&&u('":"')),null!==n&&null!==(s=null!==(s=ne())?s:"")&&null!==(r=le())?e=[e,n,s,r]:(e=null,i=a)):(e=null,i=a),null!==e&&(e=function(){try{Fn.uri=new kn(Fn.scheme,Fn.user,Fn.host,Fn.port),delete Fn.scheme,delete Fn.user,delete Fn.host,delete Fn.host_type,delete Fn.port}catch(e){Fn=-1}}()),null===e&&(i=o),e}function Q(){var e,n,r,o,a,c,h,d;return h=i,d=i,null!==(e=Z())?(58===t.charCodeAt(i)?(n=":",i++):(n=null,0===l&&u('":"')),null!==n&&null!==(r=null!==(r=ne())?r:"")&&null!==(o=le())&&null!==(a=Te())&&null!==(c=null!==(c=$e())?c:"")?e=[e,n,r,o,a,c]:(e=null,i=d)):(e=null,i=d),null!==e&&(e=function(){try{Fn.uri=new kn(Fn.scheme,Fn.user,Fn.host,Fn.port,Fn.uri_params,Fn.uri_headers),delete Fn.scheme,delete Fn.user,delete Fn.host,delete Fn.host_type,delete Fn.port,delete Fn.uri_params,"SIP_URI"===s&&(Fn=Fn.uri)}catch(e){Fn=-1}}()),null===e&&(i=h),e}function Z(){var e;return null===(e=ee())&&(e=te()),e}function ee(){var e,n,s;return n=i,"sips"===t.substr(i,4).toLowerCase()?(e=t.substr(i,4),i+=4):(e=null,0===l&&u('"sips"')),null!==e&&(s=e,e=void(Fn.scheme=s.toLowerCase())),null===e&&(i=n),e}function te(){var e,n,s;return n=i,"sip"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,0===l&&u('"sip"')),null!==e&&(s=e,e=void(Fn.scheme=s.toLowerCase())),null===e&&(i=n),e}function ne(){var e,n,s,r,o,a;return r=i,o=i,null!==(e=se())?(a=i,58===t.charCodeAt(i)?(n=":",i++):(n=null,0===l&&u('":"')),null!==n&&null!==(s=ie())?n=[n,s]:(n=null,i=a),null!==(n=null!==n?n:"")?(64===t.charCodeAt(i)?(s="@",i++):(s=null,0===l&&u('"@"')),null!==s?e=[e,n,s]:(e=null,i=o)):(e=null,i=o)):(e=null,i=o),null!==e&&(e=function(e){Fn.user=decodeURIComponent(t.substring(i-1,e))}(r)),null===e&&(i=r),e}function se(){var e,t;if(null===(t=E())&&null===(t=A())&&(t=re()),null!==t)for(e=[];null!==t;)e.push(t),null===(t=E())&&null===(t=A())&&(t=re());else e=null;return e}function re(){var e;return 38===t.charCodeAt(i)?(e="&",i++):(e=null,0===l&&u('"&"')),null===e&&(61===t.charCodeAt(i)?(e="=",i++):(e=null,0===l&&u('"="')),null===e&&(43===t.charCodeAt(i)?(e="+",i++):(e=null,0===l&&u('"+"')),null===e&&(36===t.charCodeAt(i)?(e="$",i++):(e=null,0===l&&u('"$"')),null===e&&(44===t.charCodeAt(i)?(e=",",i++):(e=null,0===l&&u('","')),null===e&&(59===t.charCodeAt(i)?(e=";",i++):(e=null,0===l&&u('";"')),null===e&&(63===t.charCodeAt(i)?(e="?",i++):(e=null,0===l&&u('"?"')),null===e&&(47===t.charCodeAt(i)?(e="/",i++):(e=null,0===l&&u('"/"'))))))))),e}function ie(){var e,n,s;for(s=i,e=[],null===(n=E())&&null===(n=A())&&(38===t.charCodeAt(i)?(n="&",i++):(n=null,0===l&&u('"&"')),null===n&&(61===t.charCodeAt(i)?(n="=",i++):(n=null,0===l&&u('"="')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,0===l&&u('"+"')),null===n&&(36===t.charCodeAt(i)?(n="$",i++):(n=null,0===l&&u('"$"')),null===n&&(44===t.charCodeAt(i)?(n=",",i++):(n=null,0===l&&u('","')))))));null!==n;)e.push(n),null===(n=E())&&null===(n=A())&&(38===t.charCodeAt(i)?(n="&",i++):(n=null,0===l&&u('"&"')),null===n&&(61===t.charCodeAt(i)?(n="=",i++):(n=null,0===l&&u('"="')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,0===l&&u('"+"')),null===n&&(36===t.charCodeAt(i)?(n="$",i++):(n=null,0===l&&u('"$"')),null===n&&(44===t.charCodeAt(i)?(n=",",i++):(n=null,0===l&&u('","')))))));return null!==e&&(e=function(e){Fn.password=t.substring(i,e)}(s)),null===e&&(i=s),e}function le(){var e,n,s,r,o;return r=i,null!==(e=oe())?(o=i,58===t.charCodeAt(i)?(n=":",i++):(n=null,0===l&&u('":"')),null!==n&&null!==(s=ge())?n=[n,s]:(n=null,i=o),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,i=r)):(e=null,i=r),e}function oe(){var e,n;return n=i,null===(e=ae())&&null===(e=me())&&(e=he()),null!==e&&(e=function(e){return Fn.host=t.substring(i,e).toLowerCase(),Fn.host}(n)),null===e&&(i=n),e}function ae(){var e,n,s,r,o,a;for(r=i,o=i,e=[],a=i,null!==(n=ue())?(46===t.charCodeAt(i)?(s=".",i++):(s=null,0===l&&u('"."')),null!==s?n=[n,s]:(n=null,i=a)):(n=null,i=a);null!==n;)e.push(n),a=i,null!==(n=ue())?(46===t.charCodeAt(i)?(s=".",i++):(s=null,0===l&&u('"."')),null!==s?n=[n,s]:(n=null,i=a)):(n=null,i=a);return null!==e&&null!==(n=ce())?(46===t.charCodeAt(i)?(s=".",i++):(s=null,0===l&&u('"."')),null!==(s=null!==s?s:"")?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e=function(e){return Fn.host_type="domain",t.substring(i,e)}(r)),null===e&&(i=r),e}function ue(){var e,n,s,r;if(r=i,null!==(e=v())){for(n=[],null===(s=v())&&(45===t.charCodeAt(i)?(s="-",i++):(s=null,0===l&&u('"-"')),null===s&&(95===t.charCodeAt(i)?(s="_",i++):(s=null,0===l&&u('"_"'))));null!==s;)n.push(s),null===(s=v())&&(45===t.charCodeAt(i)?(s="-",i++):(s=null,0===l&&u('"-"')),null===s&&(95===t.charCodeAt(i)?(s="_",i++):(s=null,0===l&&u('"_"'))));null!==n?e=[e,n]:(e=null,i=r)}else e=null,i=r;return e}function ce(){var e,n,s,r;if(r=i,null!==(e=d())){for(n=[],null===(s=v())&&(45===t.charCodeAt(i)?(s="-",i++):(s=null,0===l&&u('"-"')),null===s&&(95===t.charCodeAt(i)?(s="_",i++):(s=null,0===l&&u('"_"'))));null!==s;)n.push(s),null===(s=v())&&(45===t.charCodeAt(i)?(s="-",i++):(s=null,0===l&&u('"-"')),null===s&&(95===t.charCodeAt(i)?(s="_",i++):(s=null,0===l&&u('"_"'))));null!==n?e=[e,n]:(e=null,i=r)}else e=null,i=r;return e}function he(){var e,n,s,r,o;return r=i,o=i,91===t.charCodeAt(i)?(e="[",i++):(e=null,0===l&&u('"["')),null!==e&&null!==(n=de())?(93===t.charCodeAt(i)?(s="]",i++):(s=null,0===l&&u('"]"')),null!==s?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e=function(e){return Fn.host_type="IPv6",t.substring(i,e)}(r)),null===e&&(i=r),e}function de(){var e,n,s,r,o,a,c,h,d,_,p,m,f,g,T,v;return g=i,T=i,null!==(e=_e())?(58===t.charCodeAt(i)?(n=":",i++):(n=null,0===l&&u('":"')),null!==n&&null!==(s=_e())?(58===t.charCodeAt(i)?(r=":",i++):(r=null,0===l&&u('":"')),null!==r&&null!==(o=_e())?(58===t.charCodeAt(i)?(a=":",i++):(a=null,0===l&&u('":"')),null!==a&&null!==(c=_e())?(58===t.charCodeAt(i)?(h=":",i++):(h=null,0===l&&u('":"')),null!==h&&null!==(d=_e())?(58===t.charCodeAt(i)?(_=":",i++):(_=null,0===l&&u('":"')),null!==_&&null!==(p=_e())?(58===t.charCodeAt(i)?(m=":",i++):(m=null,0===l&&u('":"')),null!==m&&null!==(f=pe())?e=[e,n,s,r,o,a,c,h,d,_,p,m,f]:(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T),null===e&&(T=i,"::"===t.substr(i,2)?(e="::",i+=2):(e=null,0===l&&u('"::"')),null!==e&&null!==(n=_e())?(58===t.charCodeAt(i)?(s=":",i++):(s=null,0===l&&u('":"')),null!==s&&null!==(r=_e())?(58===t.charCodeAt(i)?(o=":",i++):(o=null,0===l&&u('":"')),null!==o&&null!==(a=_e())?(58===t.charCodeAt(i)?(c=":",i++):(c=null,0===l&&u('":"')),null!==c&&null!==(h=_e())?(58===t.charCodeAt(i)?(d=":",i++):(d=null,0===l&&u('":"')),null!==d&&null!==(_=_e())?(58===t.charCodeAt(i)?(p=":",i++):(p=null,0===l&&u('":"')),null!==p&&null!==(m=pe())?e=[e,n,s,r,o,a,c,h,d,_,p,m]:(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T),null===e&&(T=i,"::"===t.substr(i,2)?(e="::",i+=2):(e=null,0===l&&u('"::"')),null!==e&&null!==(n=_e())?(58===t.charCodeAt(i)?(s=":",i++):(s=null,0===l&&u('":"')),null!==s&&null!==(r=_e())?(58===t.charCodeAt(i)?(o=":",i++):(o=null,0===l&&u('":"')),null!==o&&null!==(a=_e())?(58===t.charCodeAt(i)?(c=":",i++):(c=null,0===l&&u('":"')),null!==c&&null!==(h=_e())?(58===t.charCodeAt(i)?(d=":",i++):(d=null,0===l&&u('":"')),null!==d&&null!==(_=pe())?e=[e,n,s,r,o,a,c,h,d,_]:(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T),null===e&&(T=i,"::"===t.substr(i,2)?(e="::",i+=2):(e=null,0===l&&u('"::"')),null!==e&&null!==(n=_e())?(58===t.charCodeAt(i)?(s=":",i++):(s=null,0===l&&u('":"')),null!==s&&null!==(r=_e())?(58===t.charCodeAt(i)?(o=":",i++):(o=null,0===l&&u('":"')),null!==o&&null!==(a=_e())?(58===t.charCodeAt(i)?(c=":",i++):(c=null,0===l&&u('":"')),null!==c&&null!==(h=pe())?e=[e,n,s,r,o,a,c,h]:(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T),null===e&&(T=i,"::"===t.substr(i,2)?(e="::",i+=2):(e=null,0===l&&u('"::"')),null!==e&&null!==(n=_e())?(58===t.charCodeAt(i)?(s=":",i++):(s=null,0===l&&u('":"')),null!==s&&null!==(r=_e())?(58===t.charCodeAt(i)?(o=":",i++):(o=null,0===l&&u('":"')),null!==o&&null!==(a=pe())?e=[e,n,s,r,o,a]:(e=null,i=T)):(e=null,i=T)):(e=null,i=T),null===e&&(T=i,"::"===t.substr(i,2)?(e="::",i+=2):(e=null,0===l&&u('"::"')),null!==e&&null!==(n=_e())?(58===t.charCodeAt(i)?(s=":",i++):(s=null,0===l&&u('":"')),null!==s&&null!==(r=pe())?e=[e,n,s,r]:(e=null,i=T)):(e=null,i=T),null===e&&(T=i,"::"===t.substr(i,2)?(e="::",i+=2):(e=null,0===l&&u('"::"')),null!==e&&null!==(n=pe())?e=[e,n]:(e=null,i=T),null===e&&(T=i,"::"===t.substr(i,2)?(e="::",i+=2):(e=null,0===l&&u('"::"')),null!==e&&null!==(n=_e())?e=[e,n]:(e=null,i=T),null===e&&(T=i,null!==(e=_e())?("::"===t.substr(i,2)?(n="::",i+=2):(n=null,0===l&&u('"::"')),null!==n&&null!==(s=_e())?(58===t.charCodeAt(i)?(r=":",i++):(r=null,0===l&&u('":"')),null!==r&&null!==(o=_e())?(58===t.charCodeAt(i)?(a=":",i++):(a=null,0===l&&u('":"')),null!==a&&null!==(c=_e())?(58===t.charCodeAt(i)?(h=":",i++):(h=null,0===l&&u('":"')),null!==h&&null!==(d=_e())?(58===t.charCodeAt(i)?(_=":",i++):(_=null,0===l&&u('":"')),null!==_&&null!==(p=pe())?e=[e,n,s,r,o,a,c,h,d,_,p]:(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T),null===e&&(T=i,null!==(e=_e())?(v=i,58===t.charCodeAt(i)?(n=":",i++):(n=null,0===l&&u('":"')),null!==n&&null!==(s=_e())?n=[n,s]:(n=null,i=v),null!==(n=null!==n?n:"")?("::"===t.substr(i,2)?(s="::",i+=2):(s=null,0===l&&u('"::"')),null!==s&&null!==(r=_e())?(58===t.charCodeAt(i)?(o=":",i++):(o=null,0===l&&u('":"')),null!==o&&null!==(a=_e())?(58===t.charCodeAt(i)?(c=":",i++):(c=null,0===l&&u('":"')),null!==c&&null!==(h=_e())?(58===t.charCodeAt(i)?(d=":",i++):(d=null,0===l&&u('":"')),null!==d&&null!==(_=pe())?e=[e,n,s,r,o,a,c,h,d,_]:(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T),null===e&&(T=i,null!==(e=_e())?(v=i,58===t.charCodeAt(i)?(n=":",i++):(n=null,0===l&&u('":"')),null!==n&&null!==(s=_e())?n=[n,s]:(n=null,i=v),null!==(n=null!==n?n:"")?(v=i,58===t.charCodeAt(i)?(s=":",i++):(s=null,0===l&&u('":"')),null!==s&&null!==(r=_e())?s=[s,r]:(s=null,i=v),null!==(s=null!==s?s:"")?("::"===t.substr(i,2)?(r="::",i+=2):(r=null,0===l&&u('"::"')),null!==r&&null!==(o=_e())?(58===t.charCodeAt(i)?(a=":",i++):(a=null,0===l&&u('":"')),null!==a&&null!==(c=_e())?(58===t.charCodeAt(i)?(h=":",i++):(h=null,0===l&&u('":"')),null!==h&&null!==(d=pe())?e=[e,n,s,r,o,a,c,h,d]:(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T),null===e&&(T=i,null!==(e=_e())?(v=i,58===t.charCodeAt(i)?(n=":",i++):(n=null,0===l&&u('":"')),null!==n&&null!==(s=_e())?n=[n,s]:(n=null,i=v),null!==(n=null!==n?n:"")?(v=i,58===t.charCodeAt(i)?(s=":",i++):(s=null,0===l&&u('":"')),null!==s&&null!==(r=_e())?s=[s,r]:(s=null,i=v),null!==(s=null!==s?s:"")?(v=i,58===t.charCodeAt(i)?(r=":",i++):(r=null,0===l&&u('":"')),null!==r&&null!==(o=_e())?r=[r,o]:(r=null,i=v),null!==(r=null!==r?r:"")?("::"===t.substr(i,2)?(o="::",i+=2):(o=null,0===l&&u('"::"')),null!==o&&null!==(a=_e())?(58===t.charCodeAt(i)?(c=":",i++):(c=null,0===l&&u('":"')),null!==c&&null!==(h=pe())?e=[e,n,s,r,o,a,c,h]:(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T),null===e&&(T=i,null!==(e=_e())?(v=i,58===t.charCodeAt(i)?(n=":",i++):(n=null,0===l&&u('":"')),null!==n&&null!==(s=_e())?n=[n,s]:(n=null,i=v),null!==(n=null!==n?n:"")?(v=i,58===t.charCodeAt(i)?(s=":",i++):(s=null,0===l&&u('":"')),null!==s&&null!==(r=_e())?s=[s,r]:(s=null,i=v),null!==(s=null!==s?s:"")?(v=i,58===t.charCodeAt(i)?(r=":",i++):(r=null,0===l&&u('":"')),null!==r&&null!==(o=_e())?r=[r,o]:(r=null,i=v),null!==(r=null!==r?r:"")?(v=i,58===t.charCodeAt(i)?(o=":",i++):(o=null,0===l&&u('":"')),null!==o&&null!==(a=_e())?o=[o,a]:(o=null,i=v),null!==(o=null!==o?o:"")?("::"===t.substr(i,2)?(a="::",i+=2):(a=null,0===l&&u('"::"')),null!==a&&null!==(c=pe())?e=[e,n,s,r,o,a,c]:(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T),null===e&&(T=i,null!==(e=_e())?(v=i,58===t.charCodeAt(i)?(n=":",i++):(n=null,0===l&&u('":"')),null!==n&&null!==(s=_e())?n=[n,s]:(n=null,i=v),null!==(n=null!==n?n:"")?(v=i,58===t.charCodeAt(i)?(s=":",i++):(s=null,0===l&&u('":"')),null!==s&&null!==(r=_e())?s=[s,r]:(s=null,i=v),null!==(s=null!==s?s:"")?(v=i,58===t.charCodeAt(i)?(r=":",i++):(r=null,0===l&&u('":"')),null!==r&&null!==(o=_e())?r=[r,o]:(r=null,i=v),null!==(r=null!==r?r:"")?(v=i,58===t.charCodeAt(i)?(o=":",i++):(o=null,0===l&&u('":"')),null!==o&&null!==(a=_e())?o=[o,a]:(o=null,i=v),null!==(o=null!==o?o:"")?(v=i,58===t.charCodeAt(i)?(a=":",i++):(a=null,0===l&&u('":"')),null!==a&&null!==(c=_e())?a=[a,c]:(a=null,i=v),null!==(a=null!==a?a:"")?("::"===t.substr(i,2)?(c="::",i+=2):(c=null,0===l&&u('"::"')),null!==c&&null!==(h=_e())?e=[e,n,s,r,o,a,c,h]:(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T),null===e&&(T=i,null!==(e=_e())?(v=i,58===t.charCodeAt(i)?(n=":",i++):(n=null,0===l&&u('":"')),null!==n&&null!==(s=_e())?n=[n,s]:(n=null,i=v),null!==(n=null!==n?n:"")?(v=i,58===t.charCodeAt(i)?(s=":",i++):(s=null,0===l&&u('":"')),null!==s&&null!==(r=_e())?s=[s,r]:(s=null,i=v),null!==(s=null!==s?s:"")?(v=i,58===t.charCodeAt(i)?(r=":",i++):(r=null,0===l&&u('":"')),null!==r&&null!==(o=_e())?r=[r,o]:(r=null,i=v),null!==(r=null!==r?r:"")?(v=i,58===t.charCodeAt(i)?(o=":",i++):(o=null,0===l&&u('":"')),null!==o&&null!==(a=_e())?o=[o,a]:(o=null,i=v),null!==(o=null!==o?o:"")?(v=i,58===t.charCodeAt(i)?(a=":",i++):(a=null,0===l&&u('":"')),null!==a&&null!==(c=_e())?a=[a,c]:(a=null,i=v),null!==(a=null!==a?a:"")?(v=i,58===t.charCodeAt(i)?(c=":",i++):(c=null,0===l&&u('":"')),null!==c&&null!==(h=_e())?c=[c,h]:(c=null,i=v),null!==(c=null!==c?c:"")?("::"===t.substr(i,2)?(h="::",i+=2):(h=null,0===l&&u('"::"')),null!==h?e=[e,n,s,r,o,a,c,h]:(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T)):(e=null,i=T))))))))))))))),null!==e&&(e=function(e){return Fn.host_type="IPv6",t.substring(i,e)}(g)),null===e&&(i=g),e}function _e(){var e,t,n,s,r;return r=i,null!==(e=_())&&null!==(t=null!==(t=_())?t:"")&&null!==(n=null!==(n=_())?n:"")&&null!==(s=null!==(s=_())?s:"")?e=[e,t,n,s]:(e=null,i=r),e}function pe(){var e,n,s,r;return r=i,null!==(e=_e())?(58===t.charCodeAt(i)?(n=":",i++):(n=null,0===l&&u('":"')),null!==n&&null!==(s=_e())?e=[e,n,s]:(e=null,i=r)):(e=null,i=r),null===e&&(e=me()),e}function me(){var e,n,s,r,o,a,c,h,d;return h=i,d=i,null!==(e=fe())?(46===t.charCodeAt(i)?(n=".",i++):(n=null,0===l&&u('"."')),null!==n&&null!==(s=fe())?(46===t.charCodeAt(i)?(r=".",i++):(r=null,0===l&&u('"."')),null!==r&&null!==(o=fe())?(46===t.charCodeAt(i)?(a=".",i++):(a=null,0===l&&u('"."')),null!==a&&null!==(c=fe())?e=[e,n,s,r,o,a,c]:(e=null,i=d)):(e=null,i=d)):(e=null,i=d)):(e=null,i=d),null!==e&&(e=function(e){return Fn.host_type="IPv4",t.substring(i,e)}(h)),null===e&&(i=h),e}function fe(){var e,n,s,r;return r=i,"25"===t.substr(i,2)?(e="25",i+=2):(e=null,0===l&&u('"25"')),null!==e?(/^[0-5]/.test(t.charAt(i))?(n=t.charAt(i),i++):(n=null,0===l&&u("[0-5]")),null!==n?e=[e,n]:(e=null,i=r)):(e=null,i=r),null===e&&(r=i,50===t.charCodeAt(i)?(e="2",i++):(e=null,0===l&&u('"2"')),null!==e?(/^[0-4]/.test(t.charAt(i))?(n=t.charAt(i),i++):(n=null,0===l&&u("[0-4]")),null!==n&&null!==(s=h())?e=[e,n,s]:(e=null,i=r)):(e=null,i=r),null===e&&(r=i,49===t.charCodeAt(i)?(e="1",i++):(e=null,0===l&&u('"1"')),null!==e&&null!==(n=h())&&null!==(s=h())?e=[e,n,s]:(e=null,i=r),null===e&&(r=i,/^[1-9]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,0===l&&u("[1-9]")),null!==e&&null!==(n=h())?e=[e,n]:(e=null,i=r),null===e&&(e=h())))),e}function ge(){var e,t,n,s,r,l,o,a;return l=i,o=i,null!==(e=null!==(e=h())?e:"")&&null!==(t=null!==(t=h())?t:"")&&null!==(n=null!==(n=h())?n:"")&&null!==(s=null!==(s=h())?s:"")&&null!==(r=null!==(r=h())?r:"")?e=[e,t,n,s,r]:(e=null,i=o),null!==e&&(a=e,a=parseInt(a.join("")),Fn.port=a,e=a),null===e&&(i=l),e}function Te(){var e,n,s,r;for(e=[],r=i,59===t.charCodeAt(i)?(n=";",i++):(n=null,0===l&&u('";"')),null!==n&&null!==(s=ve())?n=[n,s]:(n=null,i=r);null!==n;)e.push(n),r=i,59===t.charCodeAt(i)?(n=";",i++):(n=null,0===l&&u('";"')),null!==n&&null!==(s=ve())?n=[n,s]:(n=null,i=r);return e}function ve(){var e;return null===(e=Ce())&&null===(e=Ee())&&null===(e=Se())&&null===(e=Ae())&&null===(e=be())&&null===(e=ye())&&(e=we()),e}function Ce(){var e,n,s,r,o;return s=i,r=i,"transport="===t.substr(i,10).toLowerCase()?(e=t.substr(i,10),i+=10):(e=null,0===l&&u('"transport="')),null!==e?("udp"===t.substr(i,3).toLowerCase()?(n=t.substr(i,3),i+=3):(n=null,0===l&&u('"udp"')),null===n&&("tcp"===t.substr(i,3).toLowerCase()?(n=t.substr(i,3),i+=3):(n=null,0===l&&u('"tcp"')),null===n&&("sctp"===t.substr(i,4).toLowerCase()?(n=t.substr(i,4),i+=4):(n=null,0===l&&u('"sctp"')),null===n&&("tls"===t.substr(i,3).toLowerCase()?(n=t.substr(i,3),i+=3):(n=null,0===l&&u('"tls"')),null===n&&(n=$())))),null!==n?e=[e,n]:(e=null,i=r)):(e=null,i=r),null!==e&&(o=e[1],Fn.uri_params||(Fn.uri_params={}),e=void(Fn.uri_params.transport=o.toLowerCase())),null===e&&(i=s),e}function Ee(){var e,n,s,r,o;return s=i,r=i,"user="===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,0===l&&u('"user="')),null!==e?("phone"===t.substr(i,5).toLowerCase()?(n=t.substr(i,5),i+=5):(n=null,0===l&&u('"phone"')),null===n&&("ip"===t.substr(i,2).toLowerCase()?(n=t.substr(i,2),i+=2):(n=null,0===l&&u('"ip"')),null===n&&(n=$())),null!==n?e=[e,n]:(e=null,i=r)):(e=null,i=r),null!==e&&(o=e[1],Fn.uri_params||(Fn.uri_params={}),e=void(Fn.uri_params.user=o.toLowerCase())),null===e&&(i=s),e}function Se(){var e,n,s,r,o;return s=i,r=i,"method="===t.substr(i,7).toLowerCase()?(e=t.substr(i,7),i+=7):(e=null,0===l&&u('"method="')),null!==e&&null!==(n=ct())?e=[e,n]:(e=null,i=r),null!==e&&(o=e[1],Fn.uri_params||(Fn.uri_params={}),e=void(Fn.uri_params.method=o)),null===e&&(i=s),e}function Ae(){var e,n,s,r,o;return s=i,r=i,"ttl="===t.substr(i,4).toLowerCase()?(e=t.substr(i,4),i+=4):(e=null,0===l&&u('"ttl="')),null!==e&&null!==(n=yn())?e=[e,n]:(e=null,i=r),null!==e&&(o=e[1],Fn.params||(Fn.params={}),e=void(Fn.params.ttl=o)),null===e&&(i=s),e}function be(){var e,n,s,r,o;return s=i,r=i,"maddr="===t.substr(i,6).toLowerCase()?(e=t.substr(i,6),i+=6):(e=null,0===l&&u('"maddr="')),null!==e&&null!==(n=oe())?e=[e,n]:(e=null,i=r),null!==e&&(o=e[1],Fn.uri_params||(Fn.uri_params={}),e=void(Fn.uri_params.maddr=o)),null===e&&(i=s),e}function ye(){var e,n,s,r,o,a;return r=i,o=i,"lr"===t.substr(i,2).toLowerCase()?(e=t.substr(i,2),i+=2):(e=null,0===l&&u('"lr"')),null!==e?(a=i,61===t.charCodeAt(i)?(n="=",i++):(n=null,0===l&&u('"="')),null!==n&&null!==(s=$())?n=[n,s]:(n=null,i=a),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,i=o)):(e=null,i=o),null!==e&&(Fn.uri_params||(Fn.uri_params={}),e=void(Fn.uri_params.lr=void 0)),null===e&&(i=r),e}function we(){var e,n,s,r,o,a,c,h;return r=i,o=i,null!==(e=Re())?(a=i,61===t.charCodeAt(i)?(n="=",i++):(n=null,0===l&&u('"="')),null!==n&&null!==(s=Ie())?n=[n,s]:(n=null,i=a),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,i=o)):(e=null,i=o),null!==e&&(c=e[0],h=e[1],Fn.uri_params||(Fn.uri_params={}),h=void 0===h?void 0:h[1],e=void(Fn.uri_params[c.toLowerCase()]=h)),null===e&&(i=r),e}function Re(){var e,t,n;if(n=i,null!==(t=Oe()))for(e=[];null!==t;)e.push(t),t=Oe();else e=null;return null!==e&&(e=e.join("")),null===e&&(i=n),e}function Ie(){var e,t,n;if(n=i,null!==(t=Oe()))for(e=[];null!==t;)e.push(t),t=Oe();else e=null;return null!==e&&(e=e.join("")),null===e&&(i=n),e}function Oe(){var e;return null===(e=Ne())&&null===(e=E())&&(e=A()),e}function Ne(){var e;return 91===t.charCodeAt(i)?(e="[",i++):(e=null,0===l&&u('"["')),null===e&&(93===t.charCodeAt(i)?(e="]",i++):(e=null,0===l&&u('"]"')),null===e&&(47===t.charCodeAt(i)?(e="/",i++):(e=null,0===l&&u('"/"')),null===e&&(58===t.charCodeAt(i)?(e=":",i++):(e=null,0===l&&u('":"')),null===e&&(38===t.charCodeAt(i)?(e="&",i++):(e=null,0===l&&u('"&"')),null===e&&(43===t.charCodeAt(i)?(e="+",i++):(e=null,0===l&&u('"+"')),null===e&&(36===t.charCodeAt(i)?(e="$",i++):(e=null,0===l&&u('"$"')))))))),e}function $e(){var e,n,s,r,o,a,c;if(a=i,63===t.charCodeAt(i)?(e="?",i++):(e=null,0===l&&u('"?"')),null!==e)if(null!==(n=xe())){for(s=[],c=i,38===t.charCodeAt(i)?(r="&",i++):(r=null,0===l&&u('"&"')),null!==r&&null!==(o=xe())?r=[r,o]:(r=null,i=c);null!==r;)s.push(r),c=i,38===t.charCodeAt(i)?(r="&",i++):(r=null,0===l&&u('"&"')),null!==r&&null!==(o=xe())?r=[r,o]:(r=null,i=c);null!==s?e=[e,n,s]:(e=null,i=a)}else e=null,i=a;else e=null,i=a;return e}function xe(){var e,n,s,r,o,a,c;return r=i,o=i,null!==(e=Ue())?(61===t.charCodeAt(i)?(n="=",i++):(n=null,0===l&&u('"="')),null!==n&&null!==(s=De())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(a=e[0],c=e[2],a=a.join("").toLowerCase(),c=c.join(""),Fn.uri_headers||(Fn.uri_headers={}),e=void(Fn.uri_headers[a]?Fn.uri_headers[a].push(c):Fn.uri_headers[a]=[c])),null===e&&(i=r),e}function Ue(){var e,t;if(null===(t=Pe())&&null===(t=E())&&(t=A()),null!==t)for(e=[];null!==t;)e.push(t),null===(t=Pe())&&null===(t=E())&&(t=A());else e=null;return e}function De(){var e,t;for(e=[],null===(t=Pe())&&null===(t=E())&&(t=A());null!==t;)e.push(t),null===(t=Pe())&&null===(t=E())&&(t=A());return e}function Pe(){var e;return 91===t.charCodeAt(i)?(e="[",i++):(e=null,0===l&&u('"["')),null===e&&(93===t.charCodeAt(i)?(e="]",i++):(e=null,0===l&&u('"]"')),null===e&&(47===t.charCodeAt(i)?(e="/",i++):(e=null,0===l&&u('"/"')),null===e&&(63===t.charCodeAt(i)?(e="?",i++):(e=null,0===l&&u('"?"')),null===e&&(58===t.charCodeAt(i)?(e=":",i++):(e=null,0===l&&u('":"')),null===e&&(43===t.charCodeAt(i)?(e="+",i++):(e=null,0===l&&u('"+"')),null===e&&(36===t.charCodeAt(i)?(e="$",i++):(e=null,0===l&&u('"$"')))))))),e}function Me(){var e,t,n,s,r,l;return l=i,null!==(e=ct())&&null!==(t=g())&&null!==(n=Le())&&null!==(s=g())&&null!==(r=et())?e=[e,t,n,s,r]:(e=null,i=l),e}function Le(){var e;return null===(e=Q())&&(e=qe()),e}function qe(){var e,n,s,r;return r=i,null!==(e=Ye())?(58===t.charCodeAt(i)?(n=":",i++):(n=null,0===l&&u('":"')),null!==n?(null===(s=ke())&&(s=je()),null!==s?e=[e,n,s]:(e=null,i=r)):(e=null,i=r)):(e=null,i=r),e}function ke(){var e,n,s,r,o;return r=i,null===(e=He())&&(e=Fe()),null!==e?(o=i,63===t.charCodeAt(i)?(n="?",i++):(n=null,0===l&&u('"?"')),null!==n&&null!==(s=Ze())?n=[n,s]:(n=null,i=o),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,i=r)):(e=null,i=r),e}function He(){var e,n,s,r;return r=i,"//"===t.substr(i,2)?(e="//",i+=2):(e=null,0===l&&u('"//"')),null!==e&&null!==(n=Je())&&null!==(s=null!==(s=Fe())?s:"")?e=[e,n,s]:(e=null,i=r),e}function Fe(){var e,n,s;return s=i,47===t.charCodeAt(i)?(e="/",i++):(e=null,0===l&&u('"/"')),null!==e&&null!==(n=Be())?e=[e,n]:(e=null,i=s),e}function je(){var e,t,n,s;if(s=i,null!==(e=Ge())){for(t=[],n=Ve();null!==n;)t.push(n),n=Ve();null!==t?e=[e,t]:(e=null,i=s)}else e=null,i=s;return e}function Ve(){var e;return null===(e=C())&&null===(e=E())&&(e=A()),e}function Ge(){var e;return null===(e=E())&&null===(e=A())&&(59===t.charCodeAt(i)?(e=";",i++):(e=null,0===l&&u('";"')),null===e&&(63===t.charCodeAt(i)?(e="?",i++):(e=null,0===l&&u('"?"')),null===e&&(58===t.charCodeAt(i)?(e=":",i++):(e=null,0===l&&u('":"')),null===e&&(64===t.charCodeAt(i)?(e="@",i++):(e=null,0===l&&u('"@"')),null===e&&(38===t.charCodeAt(i)?(e="&",i++):(e=null,0===l&&u('"&"')),null===e&&(61===t.charCodeAt(i)?(e="=",i++):(e=null,0===l&&u('"="')),null===e&&(43===t.charCodeAt(i)?(e="+",i++):(e=null,0===l&&u('"+"')),null===e&&(36===t.charCodeAt(i)?(e="$",i++):(e=null,0===l&&u('"$"')),null===e&&(44===t.charCodeAt(i)?(e=",",i++):(e=null,0===l&&u('","'))))))))))),e}function Be(){var e,n,s,r,o,a;if(o=i,null!==(e=ze())){for(n=[],a=i,47===t.charCodeAt(i)?(s="/",i++):(s=null,0===l&&u('"/"')),null!==s&&null!==(r=ze())?s=[s,r]:(s=null,i=a);null!==s;)n.push(s),a=i,47===t.charCodeAt(i)?(s="/",i++):(s=null,0===l&&u('"/"')),null!==s&&null!==(r=ze())?s=[s,r]:(s=null,i=a);null!==n?e=[e,n]:(e=null,i=o)}else e=null,i=o;return e}function ze(){var e,n,s,r,o,a;for(o=i,e=[],n=Ke();null!==n;)e.push(n),n=Ke();if(null!==e){for(n=[],a=i,59===t.charCodeAt(i)?(s=";",i++):(s=null,0===l&&u('";"')),null!==s&&null!==(r=We())?s=[s,r]:(s=null,i=a);null!==s;)n.push(s),a=i,59===t.charCodeAt(i)?(s=";",i++):(s=null,0===l&&u('";"')),null!==s&&null!==(r=We())?s=[s,r]:(s=null,i=a);null!==n?e=[e,n]:(e=null,i=o)}else e=null,i=o;return e}function We(){var e,t;for(e=[],t=Ke();null!==t;)e.push(t),t=Ke();return e}function Ke(){var e;return null===(e=E())&&null===(e=A())&&(58===t.charCodeAt(i)?(e=":",i++):(e=null,0===l&&u('":"')),null===e&&(64===t.charCodeAt(i)?(e="@",i++):(e=null,0===l&&u('"@"')),null===e&&(38===t.charCodeAt(i)?(e="&",i++):(e=null,0===l&&u('"&"')),null===e&&(61===t.charCodeAt(i)?(e="=",i++):(e=null,0===l&&u('"="')),null===e&&(43===t.charCodeAt(i)?(e="+",i++):(e=null,0===l&&u('"+"')),null===e&&(36===t.charCodeAt(i)?(e="$",i++):(e=null,0===l&&u('"$"')),null===e&&(44===t.charCodeAt(i)?(e=",",i++):(e=null,0===l&&u('","'))))))))),e}function Ye(){var e,n,s,r,o;if(r=i,o=i,null!==(e=d())){for(n=[],null===(s=d())&&null===(s=h())&&(43===t.charCodeAt(i)?(s="+",i++):(s=null,0===l&&u('"+"')),null===s&&(45===t.charCodeAt(i)?(s="-",i++):(s=null,0===l&&u('"-"')),null===s&&(46===t.charCodeAt(i)?(s=".",i++):(s=null,0===l&&u('"."')))));null!==s;)n.push(s),null===(s=d())&&null===(s=h())&&(43===t.charCodeAt(i)?(s="+",i++):(s=null,0===l&&u('"+"')),null===s&&(45===t.charCodeAt(i)?(s="-",i++):(s=null,0===l&&u('"-"')),null===s&&(46===t.charCodeAt(i)?(s=".",i++):(s=null,0===l&&u('"."')))));null!==n?e=[e,n]:(e=null,i=o)}else e=null,i=o;return null!==e&&(e=function(e){Fn.scheme=t.substring(i,e)}(r)),null===e&&(i=r),e}function Je(){var e;return null===(e=Xe())&&(e=Qe()),e}function Xe(){var e,n,s,r;return s=i,r=i,null!==(e=ne())?(64===t.charCodeAt(i)?(n="@",i++):(n=null,0===l&&u('"@"')),null!==n?e=[e,n]:(e=null,i=r)):(e=null,i=r),null!==(e=null!==e?e:"")&&null!==(n=le())?e=[e,n]:(e=null,i=s),null!==e?e:""}function Qe(){var e,n;if(null===(n=E())&&null===(n=A())&&(36===t.charCodeAt(i)?(n="$",i++):(n=null,0===l&&u('"$"')),null===n&&(44===t.charCodeAt(i)?(n=",",i++):(n=null,0===l&&u('","')),null===n&&(59===t.charCodeAt(i)?(n=";",i++):(n=null,0===l&&u('";"')),null===n&&(58===t.charCodeAt(i)?(n=":",i++):(n=null,0===l&&u('":"')),null===n&&(64===t.charCodeAt(i)?(n="@",i++):(n=null,0===l&&u('"@"')),null===n&&(38===t.charCodeAt(i)?(n="&",i++):(n=null,0===l&&u('"&"')),null===n&&(61===t.charCodeAt(i)?(n="=",i++):(n=null,0===l&&u('"="')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,0===l&&u('"+"')))))))))),null!==n)for(e=[];null!==n;)e.push(n),null===(n=E())&&null===(n=A())&&(36===t.charCodeAt(i)?(n="$",i++):(n=null,0===l&&u('"$"')),null===n&&(44===t.charCodeAt(i)?(n=",",i++):(n=null,0===l&&u('","')),null===n&&(59===t.charCodeAt(i)?(n=";",i++):(n=null,0===l&&u('";"')),null===n&&(58===t.charCodeAt(i)?(n=":",i++):(n=null,0===l&&u('":"')),null===n&&(64===t.charCodeAt(i)?(n="@",i++):(n=null,0===l&&u('"@"')),null===n&&(38===t.charCodeAt(i)?(n="&",i++):(n=null,0===l&&u('"&"')),null===n&&(61===t.charCodeAt(i)?(n="=",i++):(n=null,0===l&&u('"="')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,0===l&&u('"+"'))))))))));else e=null;return e}function Ze(){var e,t;for(e=[],t=Ve();null!==t;)e.push(t),t=Ve();return e}function et(){var e,n,s,r,o,a,c,d;if(c=i,d=i,"sip"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,0===l&&u('"SIP"')),null!==e)if(47===t.charCodeAt(i)?(n="/",i++):(n=null,0===l&&u('"/"')),null!==n){if(null!==(r=h()))for(s=[];null!==r;)s.push(r),r=h();else s=null;if(null!==s)if(46===t.charCodeAt(i)?(r=".",i++):(r=null,0===l&&u('"."')),null!==r){if(null!==(a=h()))for(o=[];null!==a;)o.push(a),a=h();else o=null;null!==o?e=[e,n,s,r,o]:(e=null,i=d)}else e=null,i=d;else e=null,i=d}else e=null,i=d;else e=null,i=d;return null!==e&&(e=function(e){Fn.sip_version=t.substring(i,e)}(c)),null===e&&(i=c),e}function tt(){var e;return"INVITE"===t.substr(i,6)?(e="INVITE",i+=6):(e=null,0===l&&u('"INVITE"')),e}function nt(){var e;return"ACK"===t.substr(i,3)?(e="ACK",i+=3):(e=null,0===l&&u('"ACK"')),e}function st(){var e;return"OPTIONS"===t.substr(i,7)?(e="OPTIONS",i+=7):(e=null,0===l&&u('"OPTIONS"')),e}function rt(){var e;return"BYE"===t.substr(i,3)?(e="BYE",i+=3):(e=null,0===l&&u('"BYE"')),e}function it(){var e;return"CANCEL"===t.substr(i,6)?(e="CANCEL",i+=6):(e=null,0===l&&u('"CANCEL"')),e}function lt(){var e;return"REGISTER"===t.substr(i,8)?(e="REGISTER",i+=8):(e=null,0===l&&u('"REGISTER"')),e}function ot(){var e;return"SUBSCRIBE"===t.substr(i,9)?(e="SUBSCRIBE",i+=9):(e=null,0===l&&u('"SUBSCRIBE"')),e}function at(){var e;return"NOTIFY"===t.substr(i,6)?(e="NOTIFY",i+=6):(e=null,0===l&&u('"NOTIFY"')),e}function ut(){var e;return"REFER"===t.substr(i,5)?(e="REFER",i+=5):(e=null,0===l&&u('"REFER"')),e}function ct(){var e,n;return n=i,null===(e=tt())&&null===(e=nt())&&null===(e=st())&&null===(e=rt())&&null===(e=it())&&null===(e=lt())&&null===(e=ot())&&null===(e=at())&&null===(e=ut())&&(e=$()),null!==e&&(e=function(e){return Fn.method=t.substring(i,e),Fn.method}(n)),null===e&&(i=n),e}function ht(){var e,t,n,s,r,l;return l=i,null!==(e=et())&&null!==(t=g())&&null!==(n=dt())&&null!==(s=g())&&null!==(r=pt())?e=[e,t,n,s,r]:(e=null,i=l),e}function dt(){var e,t,n;return t=i,null!==(e=_t())&&(n=e,e=void(Fn.status_code=parseInt(n.join("")))),null===e&&(i=t),e}function _t(){var e,t,n,s;return s=i,null!==(e=h())&&null!==(t=h())&&null!==(n=h())?e=[e,t,n]:(e=null,i=s),e}function pt(){var e,n,s;for(s=i,e=[],null===(n=C())&&null===(n=E())&&null===(n=A())&&null===(n=O())&&null===(n=N())&&null===(n=g())&&(n=T());null!==n;)e.push(n),null===(n=C())&&null===(n=E())&&null===(n=A())&&null===(n=O())&&null===(n=N())&&null===(n=g())&&(n=T());return null!==e&&(e=function(e){Fn.reason_phrase=t.substring(i,e)}(s)),null===e&&(i=s),e}function mt(){var e,t,n,s,r,l,o;if(r=i,l=i,null===(e=X())&&(e=ft()),null!==e){for(t=[],o=i,null!==(n=j())&&null!==(s=Tt())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=j())&&null!==(s=Tt())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=l)}else e=null,i=l;return null!==e&&(e=function(e){var t;Fn.multi_header||(Fn.multi_header=[]);try{t=new Hn(Fn.uri,Fn.display_name,Fn.params),delete Fn.uri,delete Fn.display_name,delete Fn.params}catch(e){t=null}Fn.multi_header.push({possition:i,offset:e,parsed:t})}(r)),null===e&&(i=r),e}function ft(){var e,t,n,s,r;return r=i,null!==(e=null!==(e=gt())?e:"")&&null!==(t=H())&&null!==(n=Q())&&null!==(s=k())?e=[e,t,n,s]:(e=null,i=r),e}function gt(){var e,t,n,s,r,l,o,a;if(r=i,l=i,null!==(e=$())){for(t=[],o=i,null!==(n=b())&&null!==(s=$())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=b())&&null!==(s=$())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=l)}else e=null,i=l;return null===e&&(e=K()),null!==e&&(a=e,e=void(Fn.display_name="string"==typeof a?a:a[1].reduce((function(e,t){return e+t[0]+t[1]}),a[0]))),null===e&&(i=r),e}function Tt(){var e;return null===(e=vt())&&null===(e=Ct())&&(e=At()),e}function vt(){var e,n,s,r,o,a;return r=i,o=i,"q"===t.substr(i,1).toLowerCase()?(e=t.substr(i,1),i++):(e=null,0===l&&u('"q"')),null!==e&&null!==(n=M())&&null!==(s=St())?e=[e,n,s]:(e=null,i=o),null!==e&&(a=e[2],Fn.params||(Fn.params={}),e=void(Fn.params.q=a)),null===e&&(i=r),e}function Ct(){var e,n,s,r,o,a;return r=i,o=i,"expires"===t.substr(i,7).toLowerCase()?(e=t.substr(i,7),i+=7):(e=null,0===l&&u('"expires"')),null!==e&&null!==(n=M())&&null!==(s=Et())?e=[e,n,s]:(e=null,i=o),null!==e&&(a=e[2],Fn.params||(Fn.params={}),e=void(Fn.params.expires=a)),null===e&&(i=r),e}function Et(){var e,t,n;if(n=i,null!==(t=h()))for(e=[];null!==t;)e.push(t),t=h();else e=null;return null!==e&&(e=parseInt(e.join(""))),null===e&&(i=n),e}function St(){var e,n,s,r,o,a,c,d;return a=i,c=i,48===t.charCodeAt(i)?(e="0",i++):(e=null,0===l&&u('"0"')),null!==e?(d=i,46===t.charCodeAt(i)?(n=".",i++):(n=null,0===l&&u('"."')),null!==n&&null!==(s=null!==(s=h())?s:"")&&null!==(r=null!==(r=h())?r:"")&&null!==(o=null!==(o=h())?o:"")?n=[n,s,r,o]:(n=null,i=d),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,i=c)):(e=null,i=c),null!==e&&(e=function(e){return parseFloat(t.substring(i,e))}(a)),null===e&&(i=a),e}function At(){var e,t,n,s,r,l,o,a;return s=i,r=i,null!==(e=$())?(l=i,null!==(t=M())&&null!==(n=bt())?t=[t,n]:(t=null,i=l),null!==(t=null!==t?t:"")?e=[e,t]:(e=null,i=r)):(e=null,i=r),null!==e&&(o=e[0],a=e[1],Fn.params||(Fn.params={}),a=void 0===a?void 0:a[1],e=void(Fn.params[o.toLowerCase()]=a)),null===e&&(i=s),e}function bt(){var e;return null===(e=$())&&null===(e=oe())&&(e=W()),e}function yt(){var e;return"render"===t.substr(i,6).toLowerCase()?(e=t.substr(i,6),i+=6):(e=null,0===l&&u('"render"')),null===e&&("session"===t.substr(i,7).toLowerCase()?(e=t.substr(i,7),i+=7):(e=null,0===l&&u('"session"')),null===e&&("icon"===t.substr(i,4).toLowerCase()?(e=t.substr(i,4),i+=4):(e=null,0===l&&u('"icon"')),null===e&&("alert"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,0===l&&u('"alert"')),null===e&&(e=$())))),e}function wt(){var e;return null===(e=Rt())&&(e=At()),e}function Rt(){var e,n,s,r;return r=i,"handling"===t.substr(i,8).toLowerCase()?(e=t.substr(i,8),i+=8):(e=null,0===l&&u('"handling"')),null!==e&&null!==(n=M())?("optional"===t.substr(i,8).toLowerCase()?(s=t.substr(i,8),i+=8):(s=null,0===l&&u('"optional"')),null===s&&("required"===t.substr(i,8).toLowerCase()?(s=t.substr(i,8),i+=8):(s=null,0===l&&u('"required"')),null===s&&(s=$())),null!==s?e=[e,n,s]:(e=null,i=r)):(e=null,i=r),e}function It(){var e,t,n,s,r,l,o,a;if(o=i,null!==(e=Ot()))if(null!==(t=P()))if(null!==(n=Dt())){for(s=[],a=i,null!==(r=j())&&null!==(l=Pt())?r=[r,l]:(r=null,i=a);null!==r;)s.push(r),a=i,null!==(r=j())&&null!==(l=Pt())?r=[r,l]:(r=null,i=a);null!==s?e=[e,t,n,s]:(e=null,i=o)}else e=null,i=o;else e=null,i=o;else e=null,i=o;return e}function Ot(){var e;return null===(e=Nt())&&(e=$t()),e}function Nt(){var e;return"text"===t.substr(i,4).toLowerCase()?(e=t.substr(i,4),i+=4):(e=null,0===l&&u('"text"')),null===e&&("image"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,0===l&&u('"image"')),null===e&&("audio"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,0===l&&u('"audio"')),null===e&&("video"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,0===l&&u('"video"')),null===e&&("application"===t.substr(i,11).toLowerCase()?(e=t.substr(i,11),i+=11):(e=null,0===l&&u('"application"')),null===e&&(e=xt()))))),e}function $t(){var e;return"message"===t.substr(i,7).toLowerCase()?(e=t.substr(i,7),i+=7):(e=null,0===l&&u('"message"')),null===e&&("multipart"===t.substr(i,9).toLowerCase()?(e=t.substr(i,9),i+=9):(e=null,0===l&&u('"multipart"')),null===e&&(e=xt())),e}function xt(){var e;return null===(e=$())&&(e=Ut()),e}function Ut(){var e,n,s;return s=i,"x-"===t.substr(i,2).toLowerCase()?(e=t.substr(i,2),i+=2):(e=null,0===l&&u('"x-"')),null!==e&&null!==(n=$())?e=[e,n]:(e=null,i=s),e}function Dt(){var e;return null===(e=xt())&&(e=$()),e}function Pt(){var e,t,n,s;return s=i,null!==(e=$())&&null!==(t=M())&&null!==(n=Mt())?e=[e,t,n]:(e=null,i=s),e}function Mt(){var e;return null===(e=$())&&(e=W()),e}function Lt(){var e,t,n,s;if(n=i,null!==(t=h()))for(e=[];null!==t;)e.push(t),t=h();else e=null;return null!==e&&(s=e,e=void(Fn.value=parseInt(s.join("")))),null===e&&(i=n),e}function qt(){var e,n,s,r,o,a;if(o=i,null!==(e=x())){for(n=[],a=i,46===t.charCodeAt(i)?(s=".",i++):(s=null,0===l&&u('"."')),null!==s&&null!==(r=x())?s=[s,r]:(s=null,i=a);null!==s;)n.push(s),a=i,46===t.charCodeAt(i)?(s=".",i++):(s=null,0===l&&u('"."')),null!==s&&null!==(r=x())?s=[s,r]:(s=null,i=a);null!==n?e=[e,n]:(e=null,i=o)}else e=null,i=o;return e}function kt(){var e;return null===(e=Ht())&&(e=At()),e}function Ht(){var e,n,s,r,o,a;return r=i,o=i,"tag"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,0===l&&u('"tag"')),null!==e&&null!==(n=M())&&null!==(s=$())?e=[e,n,s]:(e=null,i=o),null!==e&&(a=e[2],e=void(Fn.tag=a)),null===e&&(i=r),e}function Ft(){var e,n,s,r,o,a,c,h;if(c=i,"digest"===t.substr(i,6).toLowerCase()?(e=t.substr(i,6),i+=6):(e=null,0===l&&u('"Digest"')),null!==e)if(null!==(n=b()))if(null!==(s=Gt())){for(r=[],h=i,null!==(o=F())&&null!==(a=Gt())?o=[o,a]:(o=null,i=h);null!==o;)r.push(o),h=i,null!==(o=F())&&null!==(a=Gt())?o=[o,a]:(o=null,i=h);null!==r?e=[e,n,s,r]:(e=null,i=c)}else e=null,i=c;else e=null,i=c;else e=null,i=c;return null===e&&(e=jt()),e}function jt(){var e,t,n,s,r,l,o,a;if(o=i,null!==(e=$()))if(null!==(t=b()))if(null!==(n=Vt())){for(s=[],a=i,null!==(r=F())&&null!==(l=Vt())?r=[r,l]:(r=null,i=a);null!==r;)s.push(r),a=i,null!==(r=F())&&null!==(l=Vt())?r=[r,l]:(r=null,i=a);null!==s?e=[e,t,n,s]:(e=null,i=o)}else e=null,i=o;else e=null,i=o;else e=null,i=o;return e}function Vt(){var e,t,n,s;return s=i,null!==(e=$())&&null!==(t=M())?(null===(n=$())&&(n=W()),null!==n?e=[e,t,n]:(e=null,i=s)):(e=null,i=s),e}function Gt(){var e;return null===(e=Bt())&&null===(e=Wt())&&null===(e=Yt())&&null===(e=Xt())&&null===(e=Qt())&&null===(e=Zt())&&null===(e=en())&&(e=Vt()),e}function Bt(){var e,n,s,r;return r=i,"realm"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,0===l&&u('"realm"')),null!==e&&null!==(n=M())&&null!==(s=zt())?e=[e,n,s]:(e=null,i=r),e}function zt(){var e,t,n;return t=i,null!==(e=K())&&(n=e,e=void(Fn.realm=n)),null===e&&(i=t),e}function Wt(){var e,n,s,r,o,a,c,h,d;if(h=i,"domain"===t.substr(i,6).toLowerCase()?(e=t.substr(i,6),i+=6):(e=null,0===l&&u('"domain"')),null!==e)if(null!==(n=M()))if(null!==(s=G()))if(null!==(r=Kt())){if(o=[],d=i,null!==(c=g()))for(a=[];null!==c;)a.push(c),c=g();else a=null;for(null!==a&&null!==(c=Kt())?a=[a,c]:(a=null,i=d);null!==a;){if(o.push(a),d=i,null!==(c=g()))for(a=[];null!==c;)a.push(c),c=g();else a=null;null!==a&&null!==(c=Kt())?a=[a,c]:(a=null,i=d)}null!==o&&null!==(a=B())?e=[e,n,s,r,o,a]:(e=null,i=h)}else e=null,i=h;else e=null,i=h;else e=null,i=h;else e=null,i=h;return e}function Kt(){var e;return null===(e=qe())&&(e=Fe()),e}function Yt(){var e,n,s,r;return r=i,"nonce"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,0===l&&u('"nonce"')),null!==e&&null!==(n=M())&&null!==(s=Jt())?e=[e,n,s]:(e=null,i=r),e}function Jt(){var e,t,n;return t=i,null!==(e=K())&&(n=e,e=void(Fn.nonce=n)),null===e&&(i=t),e}function Xt(){var e,n,s,r,o,a;return r=i,o=i,"opaque"===t.substr(i,6).toLowerCase()?(e=t.substr(i,6),i+=6):(e=null,0===l&&u('"opaque"')),null!==e&&null!==(n=M())&&null!==(s=K())?e=[e,n,s]:(e=null,i=o),null!==e&&(a=e[2],e=void(Fn.opaque=a)),null===e&&(i=r),e}function Qt(){var e,n,s,r,o;return r=i,"stale"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,0===l&&u('"stale"')),null!==e&&null!==(n=M())?(o=i,"true"===t.substr(i,4).toLowerCase()?(s=t.substr(i,4),i+=4):(s=null,0===l&&u('"true"')),null!==s&&(s=void(Fn.stale=!0)),null===s&&(i=o),null===s&&(o=i,"false"===t.substr(i,5).toLowerCase()?(s=t.substr(i,5),i+=5):(s=null,0===l&&u('"false"')),null!==s&&(s=void(Fn.stale=!1)),null===s&&(i=o)),null!==s?e=[e,n,s]:(e=null,i=r)):(e=null,i=r),e}function Zt(){var e,n,s,r,o,a;return r=i,o=i,"algorithm"===t.substr(i,9).toLowerCase()?(e=t.substr(i,9),i+=9):(e=null,0===l&&u('"algorithm"')),null!==e&&null!==(n=M())?("md5"===t.substr(i,3).toLowerCase()?(s=t.substr(i,3),i+=3):(s=null,0===l&&u('"MD5"')),null===s&&("md5-sess"===t.substr(i,8).toLowerCase()?(s=t.substr(i,8),i+=8):(s=null,0===l&&u('"MD5-sess"')),null===s&&(s=$())),null!==s?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(a=e[2],e=void(Fn.algorithm=a.toUpperCase())),null===e&&(i=r),e}function en(){var e,n,s,r,o,a,c,h,d,_;if(h=i,"qop"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,0===l&&u('"qop"')),null!==e)if(null!==(n=M()))if(null!==(s=G())){if(d=i,null!==(r=tn())){for(o=[],_=i,44===t.charCodeAt(i)?(a=",",i++):(a=null,0===l&&u('","')),null!==a&&null!==(c=tn())?a=[a,c]:(a=null,i=_);null!==a;)o.push(a),_=i,44===t.charCodeAt(i)?(a=",",i++):(a=null,0===l&&u('","')),null!==a&&null!==(c=tn())?a=[a,c]:(a=null,i=_);null!==o?r=[r,o]:(r=null,i=d)}else r=null,i=d;null!==r&&null!==(o=B())?e=[e,n,s,r,o]:(e=null,i=h)}else e=null,i=h;else e=null,i=h;else e=null,i=h;return e}function tn(){var e,n,s;return n=i,"auth-int"===t.substr(i,8).toLowerCase()?(e=t.substr(i,8),i+=8):(e=null,0===l&&u('"auth-int"')),null===e&&("auth"===t.substr(i,4).toLowerCase()?(e=t.substr(i,4),i+=4):(e=null,0===l&&u('"auth"')),null===e&&(e=$())),null!==e&&(s=e,Fn.qop||(Fn.qop=[]),e=void Fn.qop.push(s.toLowerCase())),null===e&&(i=n),e}function nn(){var e,t,n,s,r,l,o;if(r=i,l=i,null!==(e=ft())){for(t=[],o=i,null!==(n=j())&&null!==(s=At())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=j())&&null!==(s=At())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=l)}else e=null,i=l;return null!==e&&(e=function(e){var t;Fn.multi_header||(Fn.multi_header=[]);try{t=new Hn(Fn.uri,Fn.display_name,Fn.params),delete Fn.uri,delete Fn.display_name,delete Fn.params}catch(e){t=null}Fn.multi_header.push({possition:i,offset:e,parsed:t})}(r)),null===e&&(i=r),e}function sn(){var e;return null===(e=rn())&&(e=At()),e}function rn(){var e,n,s,r,o,a,c;if(o=i,a=i,"cause"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,0===l&&u('"cause"')),null!==e)if(null!==(n=M())){if(null!==(r=h()))for(s=[];null!==r;)s.push(r),r=h();else s=null;null!==s?e=[e,n,s]:(e=null,i=a)}else e=null,i=a;else e=null,i=a;return null!==e&&(c=e[2],e=void(Fn.cause=parseInt(c.join("")))),null===e&&(i=o),e}function ln(){var e,t,n,s,r,l;if(r=i,null!==(e=ft())){for(t=[],l=i,null!==(n=j())&&null!==(s=At())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=j())&&null!==(s=At())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e}function on(){var e,n;return n=i,"active"===t.substr(i,6).toLowerCase()?(e=t.substr(i,6),i+=6):(e=null,0===l&&u('"active"')),null===e&&("pending"===t.substr(i,7).toLowerCase()?(e=t.substr(i,7),i+=7):(e=null,0===l&&u('"pending"')),null===e&&("terminated"===t.substr(i,10).toLowerCase()?(e=t.substr(i,10),i+=10):(e=null,0===l&&u('"terminated"')),null===e&&(e=$()))),null!==e&&(e=function(e){Fn.state=t.substring(i,e)}(n)),null===e&&(i=n),e}function an(){var e,n,s,r,o,a,c,h;return r=i,o=i,"reason"===t.substr(i,6).toLowerCase()?(e=t.substr(i,6),i+=6):(e=null,0===l&&u('"reason"')),null!==e&&null!==(n=M())&&null!==(s=un())?e=[e,n,s]:(e=null,i=o),null!==e&&(e=void(void 0!==(a=e[2])&&(Fn.reason=a))),null===e&&(i=r),null===e&&(r=i,o=i,"expires"===t.substr(i,7).toLowerCase()?(e=t.substr(i,7),i+=7):(e=null,0===l&&u('"expires"')),null!==e&&null!==(n=M())&&null!==(s=Et())?e=[e,n,s]:(e=null,i=o),null!==e&&(e=void(void 0!==(h=e[2])&&(Fn.expires=h))),null===e&&(i=r),null===e&&(r=i,o=i,"retry_after"===t.substr(i,11).toLowerCase()?(e=t.substr(i,11),i+=11):(e=null,0===l&&u('"retry_after"')),null!==e&&null!==(n=M())&&null!==(s=Et())?e=[e,n,s]:(e=null,i=o),null!==e&&(e=void(void 0!==(c=e[2])&&(Fn.retry_after=c))),null===e&&(i=r),null===e&&(e=At()))),e}function un(){var e;return"deactivated"===t.substr(i,11).toLowerCase()?(e=t.substr(i,11),i+=11):(e=null,0===l&&u('"deactivated"')),null===e&&("probation"===t.substr(i,9).toLowerCase()?(e=t.substr(i,9),i+=9):(e=null,0===l&&u('"probation"')),null===e&&("rejected"===t.substr(i,8).toLowerCase()?(e=t.substr(i,8),i+=8):(e=null,0===l&&u('"rejected"')),null===e&&("timeout"===t.substr(i,7).toLowerCase()?(e=t.substr(i,7),i+=7):(e=null,0===l&&u('"timeout"')),null===e&&("giveup"===t.substr(i,6).toLowerCase()?(e=t.substr(i,6),i+=6):(e=null,0===l&&u('"giveup"')),null===e&&("noresource"===t.substr(i,10).toLowerCase()?(e=t.substr(i,10),i+=10):(e=null,0===l&&u('"noresource"')),null===e&&("invariant"===t.substr(i,9).toLowerCase()?(e=t.substr(i,9),i+=9):(e=null,0===l&&u('"invariant"')),null===e&&(e=$()))))))),e}function cn(){var e;return null===(e=Ht())&&(e=At()),e}function hn(){var e,t,n,s,r,l,o,a;if(o=i,null!==(e=vn()))if(null!==(t=b()))if(null!==(n=Sn())){for(s=[],a=i,null!==(r=j())&&null!==(l=dn())?r=[r,l]:(r=null,i=a);null!==r;)s.push(r),a=i,null!==(r=j())&&null!==(l=dn())?r=[r,l]:(r=null,i=a);null!==s?e=[e,t,n,s]:(e=null,i=o)}else e=null,i=o;else e=null,i=o;else e=null,i=o;return e}function dn(){var e;return null===(e=_n())&&null===(e=pn())&&null===(e=mn())&&null===(e=fn())&&null===(e=gn())&&(e=At()),e}function _n(){var e,n,s,r,o,a;return r=i,o=i,"ttl"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,0===l&&u('"ttl"')),null!==e&&null!==(n=M())&&null!==(s=yn())?e=[e,n,s]:(e=null,i=o),null!==e&&(a=e[2],e=void(Fn.ttl=a)),null===e&&(i=r),e}function pn(){var e,n,s,r,o,a;return r=i,o=i,"maddr"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,0===l&&u('"maddr"')),null!==e&&null!==(n=M())&&null!==(s=oe())?e=[e,n,s]:(e=null,i=o),null!==e&&(a=e[2],e=void(Fn.maddr=a)),null===e&&(i=r),e}function mn(){var e,n,s,r,o,a;return r=i,o=i,"received"===t.substr(i,8).toLowerCase()?(e=t.substr(i,8),i+=8):(e=null,0===l&&u('"received"')),null!==e&&null!==(n=M())?(null===(s=me())&&(s=de()),null!==s?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(a=e[2],e=void(Fn.received=a)),null===e&&(i=r),e}function fn(){var e,n,s,r,o,a;return r=i,o=i,"branch"===t.substr(i,6).toLowerCase()?(e=t.substr(i,6),i+=6):(e=null,0===l&&u('"branch"')),null!==e&&null!==(n=M())&&null!==(s=$())?e=[e,n,s]:(e=null,i=o),null!==e&&(a=e[2],e=void(Fn.branch=a)),null===e&&(i=r),e}function gn(){var e,n,s,r,o;return r=i,"rport"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,0===l&&u('"rport"')),null!==e?(o=i,null!==(n=M())&&null!==(s=Tn())?n=[n,s]:(n=null,i=o),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,i=r)):(e=null,i=r),e}function Tn(){var e,t,n,s,r,l,o,a;return l=i,o=i,null!==(e=null!==(e=h())?e:"")&&null!==(t=null!==(t=h())?t:"")&&null!==(n=null!==(n=h())?n:"")&&null!==(s=null!==(s=h())?s:"")&&null!==(r=null!==(r=h())?r:"")?e=[e,t,n,s,r]:(e=null,i=o),null!==e&&(a=e,e=void(Fn.rport=parseInt(a.join("")))),null===e&&(i=l),e}function vn(){var e,t,n,s,r,l;return l=i,null!==(e=Cn())&&null!==(t=P())&&null!==(n=$())&&null!==(s=P())&&null!==(r=En())?e=[e,t,n,s,r]:(e=null,i=l),e}function Cn(){var e,n,s;return n=i,"sip"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,0===l&&u('"SIP"')),null===e&&(e=$()),null!==e&&(s=e,e=void(Fn.protocol=s)),null===e&&(i=n),e}function En(){var e,n,s;return n=i,"udp"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,0===l&&u('"UDP"')),null===e&&("tcp"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,0===l&&u('"TCP"')),null===e&&("tls"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,0===l&&u('"TLS"')),null===e&&("sctp"===t.substr(i,4).toLowerCase()?(e=t.substr(i,4),i+=4):(e=null,0===l&&u('"SCTP"')),null===e&&(e=$())))),null!==e&&(s=e,e=void(Fn.transport=s)),null===e&&(i=n),e}function Sn(){var e,t,n,s,r;return s=i,null!==(e=An())?(r=i,null!==(t=V())&&null!==(n=bn())?t=[t,n]:(t=null,i=r),null!==(t=null!==t?t:"")?e=[e,t]:(e=null,i=s)):(e=null,i=s),e}function An(){var e,n;return n=i,null===(e=me())&&null===(e=he())&&(e=ae()),null!==e&&(e=function(e){Fn.host=t.substring(i,e)}(n)),null===e&&(i=n),e}function bn(){var e,t,n,s,r,l,o,a;return l=i,o=i,null!==(e=null!==(e=h())?e:"")&&null!==(t=null!==(t=h())?t:"")&&null!==(n=null!==(n=h())?n:"")&&null!==(s=null!==(s=h())?s:"")&&null!==(r=null!==(r=h())?r:"")?e=[e,t,n,s,r]:(e=null,i=o),null!==e&&(a=e,e=void(Fn.port=parseInt(a.join("")))),null===e&&(i=l),e}function yn(){var e,t,n,s,r;return s=i,r=i,null!==(e=h())&&null!==(t=null!==(t=h())?t:"")&&null!==(n=null!==(n=h())?n:"")?e=[e,t,n]:(e=null,i=r),null!==e&&(e=parseInt(e.join(""))),null===e&&(i=s),e}function wn(){var e,t,n;return t=i,null!==(e=Et())&&(n=e,e=void(Fn.expires=n)),null===e&&(i=t),e}function Rn(){var e;return null===(e=In())&&(e=At()),e}function In(){var e,n,s,r,o,a;return r=i,o=i,"refresher"===t.substr(i,9).toLowerCase()?(e=t.substr(i,9),i+=9):(e=null,0===l&&u('"refresher"')),null!==e&&null!==(n=M())?("uac"===t.substr(i,3).toLowerCase()?(s=t.substr(i,3),i+=3):(s=null,0===l&&u('"uac"')),null===s&&("uas"===t.substr(i,3).toLowerCase()?(s=t.substr(i,3),i+=3):(s=null,0===l&&u('"uas"'))),null!==s?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(a=e[2],e=void(Fn.refresher=a.toLowerCase())),null===e&&(i=r),e}function On(){var e,t;for(e=[],null===(t=I())&&null===(t=N())&&(t=b());null!==t;)e.push(t),null===(t=I())&&null===(t=N())&&(t=b());return e}function Nn(){var e,n,s,r,o,a,c,h,d,_,p;return _=i,p=i,null!==(e=xn())?(45===t.charCodeAt(i)?(n="-",i++):(n=null,0===l&&u('"-"')),null!==n&&null!==(s=$n())?(45===t.charCodeAt(i)?(r="-",i++):(r=null,0===l&&u('"-"')),null!==r&&null!==(o=$n())?(45===t.charCodeAt(i)?(a="-",i++):(a=null,0===l&&u('"-"')),null!==a&&null!==(c=$n())?(45===t.charCodeAt(i)?(h="-",i++):(h=null,0===l&&u('"-"')),null!==h&&null!==(d=Un())?e=[e,n,s,r,o,a,c,h,d]:(e=null,i=p)):(e=null,i=p)):(e=null,i=p)):(e=null,i=p)):(e=null,i=p),null!==e&&(e=function(e){Fn=t.substring(i+5,e)}(_,e[0])),null===e&&(i=_),e}function $n(){var e,t,n,s,r;return r=i,null!==(e=_())&&null!==(t=_())&&null!==(n=_())&&null!==(s=_())?e=[e,t,n,s]:(e=null,i=r),e}function xn(){var e,t,n;return n=i,null!==(e=$n())&&null!==(t=$n())?e=[e,t]:(e=null,i=n),e}function Un(){var e,t,n,s;return s=i,null!==(e=$n())&&null!==(t=$n())&&null!==(n=$n())?e=[e,t,n]:(e=null,i=s),e}function Dn(){var e,n,s,r,o,a;return r=i,o=i,null!==(e=U())?(a=i,64===t.charCodeAt(i)?(n="@",i++):(n=null,0===l&&u('"@"')),null!==n&&null!==(s=U())?n=[n,s]:(n=null,i=a),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,i=o)):(e=null,i=o),null!==e&&(e=function(e){Fn.call_id=t.substring(i,e)}(r)),null===e&&(i=r),e}function Pn(){var e;return null===(e=Mn())&&null===(e=Ln())&&null===(e=qn())&&(e=At()),e}function Mn(){var e,n,s,r,o,a;return r=i,o=i,"to-tag"===t.substr(i,6)?(e="to-tag",i+=6):(e=null,0===l&&u('"to-tag"')),null!==e&&null!==(n=M())&&null!==(s=$())?e=[e,n,s]:(e=null,i=o),null!==e&&(a=e[2],e=void(Fn.to_tag=a)),null===e&&(i=r),e}function Ln(){var e,n,s,r,o,a;return r=i,o=i,"from-tag"===t.substr(i,8)?(e="from-tag",i+=8):(e=null,0===l&&u('"from-tag"')),null!==e&&null!==(n=M())&&null!==(s=$())?e=[e,n,s]:(e=null,i=o),null!==e&&(a=e[2],e=void(Fn.from_tag=a)),null===e&&(i=r),e}function qn(){var e,n;return n=i,"early-only"===t.substr(i,10)?(e="early-only",i+=10):(e=null,0===l&&u('"early-only"')),null!==e&&(e=void(Fn.early_only=!0)),null===e&&(i=n),e}var kn=n(128),Hn=n(445),Fn={};if(null===r[s]()||i!==t.length){var jn=Math.max(i,o),Vn=jn<t.length?t.charAt(jn):null,Gn=function(){for(var e=1,n=1,s=!1,r=0;r<Math.max(i,o);r++){var l=t.charAt(r);"\n"===l?(s||e++,n=1,s=!1):"\r"===l||"\u2028"===l||"\u2029"===l?(e++,n=1,s=!0):(n++,s=!1)}return{line:e,column:n}}();return new this.SyntaxError(function(e){e.sort();for(var t=null,n=[],s=0;s<e.length;s++)e[s]!==t&&(n.push(e[s]),t=e[s]);return n}(a),Vn,jn,Gn.line,Gn.column),-1}return Fn},toSource:function(){return this._source},SyntaxError:function(t,n,s,r,i){this.name="SyntaxError",this.expected=t,this.found=n,this.message=function(t,n){var s;switch(t.length){case 0:s="end of input";break;case 1:s=t[0];break;default:s=t.slice(0,t.length-1).join(", ")+" or "+t[t.length-1]}return"Expected "+s+" but "+(n?e(n):"end of input")+" found."}(t,n),this.offset=s,this.line=r,this.column=i}};return t.SyntaxError.prototype=Error.prototype,t}()},582:e=>{class t extends Error{constructor(e,t){super(),this.code=1,this.name="CONFIGURATION_ERROR",this.parameter=e,this.value=t,this.message=this.value?`Invalid value ${JSON.stringify(this.value)} for parameter "${this.parameter}"`:`Missing parameter: ${this.parameter}`}}class n extends Error{constructor(e){super(),this.code=2,this.name="INVALID_STATE_ERROR",this.status=e,this.message=`Invalid status: ${e}`}}class s extends Error{constructor(e){super(),this.code=3,this.name="NOT_SUPPORTED_ERROR",this.message=e}}class r extends Error{constructor(e){super(),this.code=4,this.name="NOT_READY_ERROR",this.message=e}}e.exports={ConfigurationError:t,InvalidStateError:n,NotSupportedError:s,NotReadyError:r}},585:e=>{var t=1e3,n=60*t,s=60*n,r=24*s,i=7*r;function l(e,t,n,s){var r=t>=1.5*n;return Math.round(e/n)+" "+s+(r?"s":"")}e.exports=function(e,o){o=o||{};var a,u,c=typeof e;if("string"===c&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var l=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(l){var o=parseFloat(l[1]);switch((l[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return o*i;case"days":case"day":case"d":return o*r;case"hours":case"hour":case"hrs":case"hr":case"h":return o*s;case"minutes":case"minute":case"mins":case"min":case"m":return o*n;case"seconds":case"second":case"secs":case"sec":case"s":return o*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}}}(e);if("number"===c&&isFinite(e))return o.long?(a=e,(u=Math.abs(a))>=r?l(a,u,r,"day"):u>=s?l(a,u,s,"hour"):u>=n?l(a,u,n,"minute"):u>=t?l(a,u,t,"second"):a+" ms"):function(e){var i=Math.abs(e);return i>=r?Math.round(e/r)+"d":i>=s?Math.round(e/s)+"h":i>=n?Math.round(e/n)+"m":i>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},602:e=>{var t=e.exports={v:[{name:"version",reg:/^(\d*)$/}],o:[{name:"origin",reg:/^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,names:["username","sessionId","sessionVersion","netType","ipVer","address"],format:"%s %s %d %s IP%d %s"}],s:[{name:"name"}],i:[{name:"description"}],u:[{name:"uri"}],e:[{name:"email"}],p:[{name:"phone"}],z:[{name:"timezones"}],r:[{name:"repeats"}],t:[{name:"timing",reg:/^(\d*) (\d*)/,names:["start","stop"],format:"%d %d"}],c:[{name:"connection",reg:/^IN IP(\d) (\S*)/,names:["version","ip"],format:"IN IP%d %s"}],b:[{push:"bandwidth",reg:/^(TIAS|AS|CT|RR|RS):(\d*)/,names:["type","limit"],format:"%s:%s"}],m:[{reg:/^(\w*) (\d*) ([\w/]*)(?: (.*))?/,names:["type","port","protocol","payloads"],format:"%s %d %s %s"}],a:[{push:"rtp",reg:/^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,names:["payload","codec","rate","encoding"],format:function(e){return e.encoding?"rtpmap:%d %s/%s/%s":e.rate?"rtpmap:%d %s/%s":"rtpmap:%d %s"}},{push:"fmtp",reg:/^fmtp:(\d*) ([\S| ]*)/,names:["payload","config"],format:"fmtp:%d %s"},{name:"control",reg:/^control:(.*)/,format:"control:%s"},{name:"rtcp",reg:/^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,names:["port","netType","ipVer","address"],format:function(e){return null!=e.address?"rtcp:%d %s IP%d %s":"rtcp:%d"}},{push:"rtcpFbTrrInt",reg:/^rtcp-fb:(\*|\d*) trr-int (\d*)/,names:["payload","value"],format:"rtcp-fb:%s trr-int %d"},{push:"rtcpFb",reg:/^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,names:["payload","type","subtype"],format:function(e){return null!=e.subtype?"rtcp-fb:%s %s %s":"rtcp-fb:%s %s"}},{push:"ext",reg:/^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,names:["value","direction","encrypt-uri","uri","config"],format:function(e){return"extmap:%d"+(e.direction?"/%s":"%v")+(e["encrypt-uri"]?" %s":"%v")+" %s"+(e.config?" %s":"")}},{name:"extmapAllowMixed",reg:/^(extmap-allow-mixed)/},{push:"crypto",reg:/^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,names:["id","suite","config","sessionConfig"],format:function(e){return null!=e.sessionConfig?"crypto:%d %s %s %s":"crypto:%d %s %s"}},{name:"setup",reg:/^setup:(\w*)/,format:"setup:%s"},{name:"connectionType",reg:/^connection:(new|existing)/,format:"connection:%s"},{name:"mid",reg:/^mid:([^\s]*)/,format:"mid:%s"},{name:"msid",reg:/^msid:(.*)/,format:"msid:%s"},{name:"ptime",reg:/^ptime:(\d*(?:\.\d*)*)/,format:"ptime:%d"},{name:"maxptime",reg:/^maxptime:(\d*(?:\.\d*)*)/,format:"maxptime:%d"},{name:"direction",reg:/^(sendrecv|recvonly|sendonly|inactive)/},{name:"icelite",reg:/^(ice-lite)/},{name:"iceUfrag",reg:/^ice-ufrag:(\S*)/,format:"ice-ufrag:%s"},{name:"icePwd",reg:/^ice-pwd:(\S*)/,format:"ice-pwd:%s"},{name:"fingerprint",reg:/^fingerprint:(\S*) (\S*)/,names:["type","hash"],format:"fingerprint:%s %s"},{push:"candidates",reg:/^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,names:["foundation","component","transport","priority","ip","port","type","raddr","rport","tcptype","generation","network-id","network-cost"],format:function(e){var t="candidate:%s %d %s %d %s %d typ %s";return t+=null!=e.raddr?" raddr %s rport %d":"%v%v",t+=null!=e.tcptype?" tcptype %s":"%v",null!=e.generation&&(t+=" generation %d"),(t+=null!=e["network-id"]?" network-id %d":"%v")+(null!=e["network-cost"]?" network-cost %d":"%v")}},{name:"endOfCandidates",reg:/^(end-of-candidates)/},{name:"remoteCandidates",reg:/^remote-candidates:(.*)/,format:"remote-candidates:%s"},{name:"iceOptions",reg:/^ice-options:(\S*)/,format:"ice-options:%s"},{push:"ssrcs",reg:/^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,names:["id","attribute","value"],format:function(e){var t="ssrc:%d";return null!=e.attribute&&(t+=" %s",null!=e.value&&(t+=":%s")),t}},{push:"ssrcGroups",reg:/^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,names:["semantics","ssrcs"],format:"ssrc-group:%s %s"},{name:"msidSemantic",reg:/^msid-semantic:\s?(\w*) (\S*)/,names:["semantic","token"],format:"msid-semantic: %s %s"},{push:"groups",reg:/^group:(\w*) (.*)/,names:["type","mids"],format:"group:%s %s"},{name:"rtcpMux",reg:/^(rtcp-mux)/},{name:"rtcpRsize",reg:/^(rtcp-rsize)/},{name:"sctpmap",reg:/^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,names:["sctpmapNumber","app","maxMessageSize"],format:function(e){return null!=e.maxMessageSize?"sctpmap:%s %s %s":"sctpmap:%s %s"}},{name:"xGoogleFlag",reg:/^x-google-flag:([^\s]*)/,format:"x-google-flag:%s"},{push:"rids",reg:/^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,names:["id","direction","params"],format:function(e){return e.params?"rid:%s %s %s":"rid:%s %s"}},{push:"imageattrs",reg:new RegExp("^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"),names:["pt","dir1","attrs1","dir2","attrs2"],format:function(e){return"imageattr:%s %s %s"+(e.dir2?" %s %s":"")}},{name:"simulcast",reg:new RegExp("^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"),names:["dir1","list1","dir2","list2"],format:function(e){return"simulcast:%s %s"+(e.dir2?" %s %s":"")}},{name:"simulcast_03",reg:/^simulcast:[\s\t]+([\S+\s\t]+)$/,names:["value"],format:"simulcast: %s"},{name:"framerate",reg:/^framerate:(\d+(?:$|\.\d+))/,format:"framerate:%s"},{name:"sourceFilter",reg:/^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,names:["filterMode","netType","addressTypes","destAddress","srcList"],format:"source-filter: %s %s %s %s %s"},{name:"bundleOnly",reg:/^(bundle-only)/},{name:"label",reg:/^label:(.+)/,format:"label:%s"},{name:"sctpPort",reg:/^sctp-port:(\d+)$/,format:"sctp-port:%s"},{name:"maxMessageSize",reg:/^max-message-size:(\d+)$/,format:"max-message-size:%s"},{push:"tsRefClocks",reg:/^ts-refclk:([^\s=]*)(?:=(\S*))?/,names:["clksrc","clksrcExt"],format:function(e){return"ts-refclk:%s"+(null!=e.clksrcExt?"=%s":"")}},{name:"mediaClk",reg:/^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,names:["id","mediaClockName","mediaClockValue","rateNumerator","rateDenominator"],format:function(e){var t="mediaclk:";return t+=null!=e.id?"id=%s %s":"%v%s",t+=null!=e.mediaClockValue?"=%s":"",(t+=null!=e.rateNumerator?" rate=%s":"")+(null!=e.rateDenominator?"/%s":"")}},{name:"keywords",reg:/^keywds:(.+)$/,format:"keywds:%s"},{name:"content",reg:/^content:(.+)/,format:"content:%s"},{name:"bfcpFloorCtrl",reg:/^floorctrl:(c-only|s-only|c-s)/,format:"floorctrl:%s"},{name:"bfcpConfId",reg:/^confid:(\d+)/,format:"confid:%s"},{name:"bfcpUserId",reg:/^userid:(\d+)/,format:"userid:%s"},{name:"bfcpFloorId",reg:/^floorid:(.+) (?:m-stream|mstrm):(.+)/,names:["id","mStream"],format:"floorid:%s mstrm:%s"},{push:"invalid",names:["value"]}]};Object.keys(t).forEach((function(e){t[e].forEach((function(e){e.reg||(e.reg=/(.*)/),e.format||(e.format="%s")}))}))},614:(e,t,n)=>{const s=n(152),r=n(771),i=n(259),l=n(663),o=n(446),a=new s("Registrator");e.exports=class{constructor(e,t){this._reg_id=1,this._ua=e,this._transport=t,this._registrar=e.configuration.registrar_server,this._expires=e.configuration.register_expires,this._call_id=r.createRandomToken(22),this._cseq=0,this._to_uri=e.configuration.uri,this._registrationTimer=null,this._registering=!1,this._registered=!1,this._contact=this._ua.contact.toString(),this._contact+=";+sip.ice",this._extraHeaders=[],this._extraContactParams="",this._sipInstance=`"<urn:uuid:${this._ua.configuration.instance_id}>"`,this._contact+=`;reg-id=${this._reg_id}`,this._contact+=`;+sip.instance=${this._sipInstance}`}get registered(){return this._registered}setExtraHeaders(e){Array.isArray(e)||(e=[]),this._extraHeaders=e.slice()}setExtraContactParams(e){e instanceof Object||(e={}),this._extraContactParams="";for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t)){const n=e[t];this._extraContactParams+=`;${t}`,n&&(this._extraContactParams+=`=${n}`)}}register(){if(this._registering)return void a.debug("Register request in progress...");const e=this._extraHeaders.slice();e.push(`Contact: ${this._contact};expires=${this._expires}${this._extraContactParams}`),e.push(`Expires: ${this._expires}`);const t=new l.OutgoingRequest(i.REGISTER,this._registrar,this._ua,{to_uri:this._to_uri,call_id:this._call_id,cseq:this._cseq+=1},e),n=new o(this._ua,t,{onRequestTimeout:()=>{this._registrationFailure(null,i.causes.REQUEST_TIMEOUT)},onTransportError:()=>{this._registrationFailure(null,i.causes.CONNECTION_ERROR)},onAuthenticated:()=>{this._cseq+=1},onReceiveResponse:e=>{if(e.cseq===this._cseq)switch(null!==this._registrationTimer&&(clearTimeout(this._registrationTimer),this._registrationTimer=null),!0){case/^1[0-9]{2}$/.test(e.status_code):break;case/^2[0-9]{2}$/.test(e.status_code):{if(this._registering=!1,!e.hasHeader("Contact")){a.debug("no Contact header in response to REGISTER, response ignored");break}const t=e.headers.Contact.reduce(((e,t)=>e.concat(t.parsed)),[]);let n=t.find((e=>this._sipInstance===e.getParam("+sip.instance")&&this._reg_id===parseInt(e.getParam("reg-id"))));if(n||(n=t.find((e=>e.uri.user===this._ua.contact.uri.user))),!n){a.debug("no Contact header pointing to us, response ignored");break}let s=n.getParam("expires");!s&&e.hasHeader("expires")&&(s=e.getHeader("expires")),s||(s=this._expires),s=Number(s),s<10&&(s=10);const r=s>64?1e3*s/2+Math.floor(1e3*(s/2-32)*Math.random()):1e3*s-5e3;this._registrationTimer=setTimeout((()=>{this._registrationTimer=null,0===this._ua.listeners("registrationExpiring").length?this.register():this._ua.emit("registrationExpiring")}),r),n.hasParam("temp-gruu")&&(this._ua.contact.temp_gruu=n.getParam("temp-gruu").replace(/"/g,"")),n.hasParam("pub-gruu")&&(this._ua.contact.pub_gruu=n.getParam("pub-gruu").replace(/"/g,"")),this._registered||(this._registered=!0,this._ua.registered({response:e}));break}case/^423$/.test(e.status_code):e.hasHeader("min-expires")?(this._expires=Number(e.getHeader("min-expires")),this._expires<10&&(this._expires=10),this.register()):(a.debug("423 response received for REGISTER without Min-Expires"),this._registrationFailure(e,i.causes.SIP_FAILURE_CODE));break;default:{const t=r.sipErrorCause(e.status_code);this._registrationFailure(e,t)}}}});this._registering=!0,n.send()}unregister(e={}){if(!this._registered)return void a.debug("already unregistered");this._registered=!1,null!==this._registrationTimer&&(clearTimeout(this._registrationTimer),this._registrationTimer=null);const t=this._extraHeaders.slice();e.all?t.push(`Contact: *${this._extraContactParams}`):t.push(`Contact: ${this._contact};expires=0${this._extraContactParams}`),t.push("Expires: 0");const n=new l.OutgoingRequest(i.REGISTER,this._registrar,this._ua,{to_uri:this._to_uri,call_id:this._call_id,cseq:this._cseq+=1},t);new o(this._ua,n,{onRequestTimeout:()=>{this._unregistered(null,i.causes.REQUEST_TIMEOUT)},onTransportError:()=>{this._unregistered(null,i.causes.CONNECTION_ERROR)},onAuthenticated:()=>{this._cseq+=1},onReceiveResponse:e=>{switch(!0){case/^1[0-9]{2}$/.test(e.status_code):break;case/^2[0-9]{2}$/.test(e.status_code):this._unregistered(e);break;default:{const t=r.sipErrorCause(e.status_code);this._unregistered(e,t)}}}}).send()}close(){this._registered&&this.unregister()}onTransportClosed(){this._registering=!1,null!==this._registrationTimer&&(clearTimeout(this._registrationTimer),this._registrationTimer=null),this._registered&&(this._registered=!1,this._ua.unregistered({}))}_registrationFailure(e,t){this._registering=!1,this._ua.registrationFailed({response:e||null,cause:t}),this._registered&&(this._registered=!1,this._ua.unregistered({response:e||null,cause:t}))}_unregistered(e,t){this._registering=!1,this._registered=!1,this._ua.unregistered({response:e||null,cause:t||null})}}},633:e=>{"use strict";e.exports=JSON.parse('{"name":"jssip","title":"JsSIP","description":"the Javascript SIP library","version":"3.9.0","homepage":"https://jssip.net","contributors":["José Luis Millán <jmillan@aliax.net> (https://github.com/jmillan)","Iñaki Baz Castillo <ibc@aliax.net> (https://inakibaz.me)"],"types":"lib/JsSIP.d.ts","main":"lib-es5/JsSIP.js","keywords":["sip","websocket","webrtc","node","browser","library"],"license":"MIT","repository":{"type":"git","url":"https://github.com/versatica/JsSIP.git"},"bugs":{"url":"https://github.com/versatica/JsSIP/issues"},"dependencies":{"@types/debug":"^4.1.5","@types/node":"^14.14.34","debug":"^4.3.1","events":"^3.3.0","sdp-transform":"^2.14.1"},"devDependencies":{"@babel/core":"^7.13.10","@babel/preset-env":"^7.13.10","ansi-colors":"^3.2.4","browserify":"^16.5.1","eslint":"^5.16.0","fancy-log":"^1.3.3","gulp":"^4.0.2","gulp-babel":"^8.0.0","gulp-eslint":"^5.0.0","gulp-expect-file":"^1.0.2","gulp-header":"^2.0.9","gulp-nodeunit-runner":"^0.2.2","gulp-plumber":"^1.2.1","gulp-rename":"^1.4.0","gulp-uglify-es":"^1.0.4","pegjs":"^0.7.0","vinyl-buffer":"^1.0.1","vinyl-source-stream":"^2.0.0"},"scripts":{"lint":"gulp lint","test":"gulp test","prepublishOnly":"gulp babel"}}')},635:(e,t,n)=>{const s=n(7).EventEmitter,r=n(152),i=n(259),l=n(582),o=n(771),a=new r("RTCSession:DTMF"),u={MIN_DURATION:70,MAX_DURATION:6e3,DEFAULT_DURATION:100,MIN_INTER_TONE_GAP:50,DEFAULT_INTER_TONE_GAP:500};e.exports=class extends s{constructor(e){super(),this._session=e,this._direction=null,this._tone=null,this._duration=null,this._request=null}get tone(){return this._tone}get duration(){return this._duration}send(e,t={}){if(void 0===e)throw new TypeError("Not enough arguments");if(this._direction="outgoing",this._session.status!==this._session.C.STATUS_CONFIRMED&&this._session.status!==this._session.C.STATUS_WAITING_FOR_ACK)throw new l.InvalidStateError(this._session.status);const n=o.cloneArray(t.extraHeaders);if(this.eventHandlers=o.cloneObject(t.eventHandlers),"string"==typeof e)e=e.toUpperCase();else{if("number"!=typeof e)throw new TypeError(`Invalid tone: ${e}`);e=e.toString()}if(!e.match(/^[0-9A-DR#*]$/))throw new TypeError(`Invalid tone: ${e}`);this._tone=e,this._duration=t.duration,n.push("Content-Type: application/dtmf-relay");let s=`Signal=${this._tone}\r\n`;s+=`Duration=${this._duration}`,this._session.newDTMF({originator:"local",dtmf:this,request:this._request}),this._session.sendRequest(i.INFO,{extraHeaders:n,eventHandlers:{onSuccessResponse:e=>{this.emit("succeeded",{originator:"remote",response:e})},onErrorResponse:e=>{this.eventHandlers.onFailed&&this.eventHandlers.onFailed(),this.emit("failed",{originator:"remote",response:e})},onRequestTimeout:()=>{this._session.onRequestTimeout()},onTransportError:()=>{this._session.onTransportError()},onDialogError:()=>{this._session.onDialogError()}},body:s})}init_incoming(e){const t=/^(Signal\s*?=\s*?)([0-9A-D#*]{1})(\s)?.*/,n=/^(Duration\s?=\s?)([0-9]{1,4})(\s)?.*/;if(this._direction="incoming",this._request=e,e.reply(200),e.body){const s=e.body.split("\n");s.length>=1&&t.test(s[0])&&(this._tone=s[0].replace(t,"$2")),s.length>=2&&n.test(s[1])&&(this._duration=parseInt(s[1].replace(n,"$2"),10))}this._duration||(this._duration=u.DEFAULT_DURATION),this._tone?this._session.newDTMF({originator:"remote",dtmf:this,request:e}):a.debug("invalid INFO DTMF received, discarded")}},e.exports.C=u},663:(e,t,n)=>{const s=n(363),r=n(152),i=n(259),l=n(771),o=n(445),a=n(555),u=new r("SIPMessage");class c{constructor(e,t,n,s,r,a){if(!e||!t||!n)return null;s=s||{},this.ua=n,this.headers={},this.method=e,this.ruri=t,this.body=a,this.extraHeaders=l.cloneArray(r),s.route_set?this.setHeader("route",s.route_set):n.configuration.use_preloaded_route&&this.setHeader("route",`<${n.transport.sip_uri};lr>`),this.setHeader("via",""),this.setHeader("max-forwards",i.MAX_FORWARDS);const u=s.to_uri||t,c=s.to_tag?{tag:s.to_tag}:null,h=void 0!==s.to_display_name?s.to_display_name:null;this.to=new o(u,h,c),this.setHeader("to",this.to.toString());const d=s.from_uri||n.configuration.uri,_={tag:s.from_tag||l.newTag()};let p;p=void 0!==s.from_display_name?s.from_display_name:n.configuration.display_name?n.configuration.display_name:null,this.from=new o(d,p,_),this.setHeader("from",this.from.toString());const m=s.call_id||n.configuration.jssip_id+l.createRandomToken(15);this.call_id=m,this.setHeader("call-id",m);const f=s.cseq||Math.floor(1e4*Math.random());this.cseq=f,this.setHeader("cseq",`${f} ${e}`)}setHeader(e,t){const n=new RegExp(`^\\s*${e}\\s*:`,"i");for(let e=0;e<this.extraHeaders.length;e++)n.test(this.extraHeaders[e])&&this.extraHeaders.splice(e,1);this.headers[l.headerize(e)]=Array.isArray(t)?t:[t]}getHeader(e){const t=this.headers[l.headerize(e)];if(t){if(t[0])return t[0]}else{const t=new RegExp(`^\\s*${e}\\s*:`,"i");for(const e of this.extraHeaders)if(t.test(e))return e.substring(e.indexOf(":")+1).trim()}}getHeaders(e){const t=this.headers[l.headerize(e)],n=[];if(t){for(const e of t)n.push(e);return n}{const t=new RegExp(`^\\s*${e}\\s*:`,"i");for(const e of this.extraHeaders)t.test(e)&&n.push(e.substring(e.indexOf(":")+1).trim());return n}}hasHeader(e){if(this.headers[l.headerize(e)])return!0;{const t=new RegExp(`^\\s*${e}\\s*:`,"i");for(const e of this.extraHeaders)if(t.test(e))return!0}return!1}parseSDP(e){return!e&&this.sdp||(this.sdp=s.parse(this.body||"")),this.sdp}toString(){let e=`${this.method} ${this.ruri} SIP/2.0\r\n`;for(const t in this.headers)if(Object.prototype.hasOwnProperty.call(this.headers,t))for(const n of this.headers[t])e+=`${t}: ${n}\r\n`;for(const t of this.extraHeaders)e+=`${t.trim()}\r\n`;const t=[];switch(this.method){case i.REGISTER:t.push("path","gruu");break;case i.INVITE:this.ua.configuration.session_timers&&t.push("timer"),(this.ua.contact.pub_gruu||this.ua.contact.temp_gruu)&&t.push("gruu"),t.push("ice","replaces");break;case i.UPDATE:this.ua.configuration.session_timers&&t.push("timer"),t.push("ice")}t.push("outbound");const n=this.ua.configuration.user_agent||i.USER_AGENT;return e+=`Allow: ${i.ALLOWED_METHODS}\r\n`,e+=`Supported: ${t}\r\n`,e+=`User-Agent: ${n}\r\n`,this.body?(e+=`Content-Length: ${l.str_utf8_length(this.body)}\r\n\r\n`,e+=this.body):e+="Content-Length: 0\r\n\r\n",e}clone(){const e=new c(this.method,this.ruri,this.ua);return Object.keys(this.headers).forEach((function(t){e.headers[t]=this.headers[t].slice()}),this),e.body=this.body,e.extraHeaders=l.cloneArray(this.extraHeaders),e.to=this.to,e.from=this.from,e.call_id=this.call_id,e.cseq=this.cseq,e}}class h extends c{constructor(e,t,n,s,r){super(i.INVITE,e,t,n,s,r),this.transaction=null}cancel(e){this.transaction.cancel(e)}clone(){const e=new h(this.ruri,this.ua);return Object.keys(this.headers).forEach((function(t){e.headers[t]=this.headers[t].slice()}),this),e.body=this.body,e.extraHeaders=l.cloneArray(this.extraHeaders),e.to=this.to,e.from=this.from,e.call_id=this.call_id,e.cseq=this.cseq,e.transaction=this.transaction,e}}class d{constructor(){this.data=null,this.headers=null,this.method=null,this.via=null,this.via_branch=null,this.call_id=null,this.cseq=null,this.from=null,this.from_tag=null,this.to=null,this.to_tag=null,this.body=null,this.sdp=null}addHeader(e,t){const n={raw:t};e=l.headerize(e),this.headers[e]?this.headers[e].push(n):this.headers[e]=[n]}getHeader(e){const t=this.headers[l.headerize(e)];if(t)return t[0]?t[0].raw:void 0}getHeaders(e){const t=this.headers[l.headerize(e)],n=[];if(!t)return[];for(const e of t)n.push(e.raw);return n}hasHeader(e){return!!this.headers[l.headerize(e)]}parseHeader(e,t=0){if(e=l.headerize(e),!this.headers[e])return void u.debug(`header "${e}" not present`);if(t>=this.headers[e].length)return void u.debug(`not so many "${e}" headers present`);const n=this.headers[e][t],s=n.raw;if(n.parsed)return n.parsed;const r=a.parse(s,e.replace(/-/g,"_"));return-1===r?(this.headers[e].splice(t,1),void u.debug(`error parsing "${e}" header field with value "${s}"`)):(n.parsed=r,r)}s(e,t){return this.parseHeader(e,t)}setHeader(e,t){const n={raw:t};this.headers[l.headerize(e)]=[n]}parseSDP(e){return!e&&this.sdp||(this.sdp=s.parse(this.body||"")),this.sdp}toString(){return this.data}}e.exports={OutgoingRequest:c,InitialOutgoingInviteRequest:h,IncomingRequest:class extends d{constructor(e){super(),this.ua=e,this.headers={},this.ruri=null,this.transport=null,this.server_transaction=null}reply(e,t,n,s,r,o){const a=[];let u=this.getHeader("To");if(t=t||null,!(e=e||null)||e<100||e>699)throw new TypeError(`Invalid status_code: ${e}`);if(t&&"string"!=typeof t&&!(t instanceof String))throw new TypeError(`Invalid reason_phrase: ${t}`);t=t||i.REASON_PHRASE[e]||"",n=l.cloneArray(n);let c=`SIP/2.0 ${e} ${t}\r\n`;if(this.method===i.INVITE&&e>100&&e<=200){const e=this.getHeaders("record-route");for(const t of e)c+=`Record-Route: ${t}\r\n`}const h=this.getHeaders("via");for(const e of h)c+=`Via: ${e}\r\n`;!this.to_tag&&e>100?u+=`;tag=${l.newTag()}`:this.to_tag&&!this.s("to").hasParam("tag")&&(u+=`;tag=${this.to_tag}`),c+=`To: ${u}\r\n`,c+=`From: ${this.getHeader("From")}\r\n`,c+=`Call-ID: ${this.call_id}\r\n`,c+=`CSeq: ${this.cseq} ${this.method}\r\n`;for(const e of n)c+=`${e.trim()}\r\n`;switch(this.method){case i.INVITE:this.ua.configuration.session_timers&&a.push("timer"),(this.ua.contact.pub_gruu||this.ua.contact.temp_gruu)&&a.push("gruu"),a.push("ice","replaces");break;case i.UPDATE:this.ua.configuration.session_timers&&a.push("timer"),s&&a.push("ice"),a.push("replaces")}a.push("outbound"),this.method===i.OPTIONS?(c+=`Allow: ${i.ALLOWED_METHODS}\r\n`,c+=`Accept: ${i.ACCEPTED_BODY_TYPES}\r\n`):405===e?c+=`Allow: ${i.ALLOWED_METHODS}\r\n`:415===e&&(c+=`Accept: ${i.ACCEPTED_BODY_TYPES}\r\n`),c+=`Supported: ${a}\r\n`,s?(c+="Content-Type: application/sdp\r\n",c+=`Content-Length: ${l.str_utf8_length(s)}\r\n\r\n`,c+=s):c+="Content-Length: 0\r\n\r\n",this.server_transaction.receiveResponse(e,c,r,o)}reply_sl(e=null,t=null){const n=this.getHeaders("via");if(!e||e<100||e>699)throw new TypeError(`Invalid status_code: ${e}`);if(t&&"string"!=typeof t&&!(t instanceof String))throw new TypeError(`Invalid reason_phrase: ${t}`);let s=`SIP/2.0 ${e} ${t=t||i.REASON_PHRASE[e]||""}\r\n`;for(const e of n)s+=`Via: ${e}\r\n`;let r=this.getHeader("To");!this.to_tag&&e>100?r+=`;tag=${l.newTag()}`:this.to_tag&&!this.s("to").hasParam("tag")&&(r+=`;tag=${this.to_tag}`),s+=`To: ${r}\r\n`,s+=`From: ${this.getHeader("From")}\r\n`,s+=`Call-ID: ${this.call_id}\r\n`,s+=`CSeq: ${this.cseq} ${this.method}\r\n`,s+="Content-Length: 0\r\n\r\n",this.transport.send(s)}},IncomingResponse:class extends d{constructor(){super(),this.headers={},this.status_code=null,this.reason_phrase=null}}}},708:(e,t,n)=>{const s=n(7).EventEmitter,r=n(152),i=n(259),l=n(663),o=n(771),a=n(446),u=n(582),c=new r("Options");e.exports=class extends s{constructor(e){super(),this._ua=e,this._request=null,this._closed=!1,this._direction=null,this._local_identity=null,this._remote_identity=null,this._is_replied=!1,this._data={}}get direction(){return this._direction}get local_identity(){return this._local_identity}get remote_identity(){return this._remote_identity}send(e,t,n={}){const s=e;if(void 0===e)throw new TypeError("A target is required for OPTIONS");if(!(e=this._ua.normalizeTarget(e)))throw new TypeError(`Invalid target: ${s}`);const r=o.cloneArray(n.extraHeaders),u=o.cloneObject(n.eventHandlers),c=n.contentType||"application/sdp";for(const e in u)Object.prototype.hasOwnProperty.call(u,e)&&this.on(e,u[e]);r.push(`Content-Type: ${c}`),this._request=new l.OutgoingRequest(i.OPTIONS,e,this._ua,null,r),t&&(this._request.body=t);const h=new a(this._ua,this._request,{onRequestTimeout:()=>{this._onRequestTimeout()},onTransportError:()=>{this._onTransportError()},onReceiveResponse:e=>{this._receiveResponse(e)}});this._newOptions("local",this._request),h.send()}init_incoming(e){this._request=e,this._newOptions("remote",e),this._is_replied||(this._is_replied=!0,e.reply(200)),this._close()}accept(e={}){const t=o.cloneArray(e.extraHeaders),n=e.body;if("incoming"!==this._direction)throw new u.NotSupportedError('"accept" not supported for outgoing Options');if(this._is_replied)throw new Error("incoming Options already replied");this._is_replied=!0,this._request.reply(200,null,t,n)}reject(e={}){const t=e.status_code||480,n=e.reason_phrase,s=o.cloneArray(e.extraHeaders),r=e.body;if("incoming"!==this._direction)throw new u.NotSupportedError('"reject" not supported for outgoing Options');if(this._is_replied)throw new Error("incoming Options already replied");if(t<300||t>=700)throw new TypeError(`Invalid status_code: ${t}`);this._is_replied=!0,this._request.reply(t,n,s,r)}_receiveResponse(e){if(!this._closed)switch(!0){case/^1[0-9]{2}$/.test(e.status_code):break;case/^2[0-9]{2}$/.test(e.status_code):this._succeeded("remote",e);break;default:{const t=o.sipErrorCause(e.status_code);this._failed("remote",e,t);break}}}_onRequestTimeout(){this._closed||this._failed("system",null,i.causes.REQUEST_TIMEOUT)}_onTransportError(){this._closed||this._failed("system",null,i.causes.CONNECTION_ERROR)}_close(){this._closed=!0,this._ua.destroyMessage(this)}_newOptions(e,t){"remote"===e?(this._direction="incoming",this._local_identity=t.to,this._remote_identity=t.from):"local"===e&&(this._direction="outgoing",this._local_identity=t.from,this._remote_identity=t.to),this._ua.newOptions(this,{originator:e,message:this,request:t})}_failed(e,t,n){c.debug("OPTIONS failed"),this._close(),c.debug('emit "failed"'),this.emit("failed",{originator:e,response:t||null,cause:n})}_succeeded(e,t){c.debug("OPTIONS succeeded"),this._close(),c.debug('emit "succeeded"'),this.emit("succeeded",{originator:e,response:t})}}},717:(e,t,n)=>{const s=n(7).EventEmitter,r=n(152),i=n(259),l=n(663),o=n(530),a=new r("NonInviteClientTransaction"),u=new r("InviteClientTransaction"),c=new r("AckClientTransaction"),h=new r("NonInviteServerTransaction"),d=new r("InviteServerTransaction"),_={STATUS_TRYING:1,STATUS_PROCEEDING:2,STATUS_CALLING:3,STATUS_ACCEPTED:4,STATUS_COMPLETED:5,STATUS_TERMINATED:6,STATUS_CONFIRMED:7,NON_INVITE_CLIENT:"nict",NON_INVITE_SERVER:"nist",INVITE_CLIENT:"ict",INVITE_SERVER:"ist"};e.exports={C:_,NonInviteClientTransaction:class extends s{constructor(e,t,n,s){super(),this.type=_.NON_INVITE_CLIENT,this.id=`z9hG4bK${Math.floor(1e7*Math.random())}`,this.ua=e,this.transport=t,this.request=n,this.eventHandlers=s;let r=`SIP/2.0/${t.via_transport}`;r+=` ${e.configuration.via_host};branch=${this.id}`,this.request.setHeader("via",r),this.ua.newTransaction(this)}get C(){return _}stateChanged(e){this.state=e,this.emit("stateChanged")}send(){this.stateChanged(_.STATUS_TRYING),this.F=setTimeout((()=>{this.timer_F()}),o.TIMER_F),this.transport.send(this.request)||this.onTransportError()}onTransportError(){a.debug(`transport error occurred, deleting transaction ${this.id}`),clearTimeout(this.F),clearTimeout(this.K),this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this),this.eventHandlers.onTransportError()}timer_F(){a.debug(`Timer F expired for transaction ${this.id}`),this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this),this.eventHandlers.onRequestTimeout()}timer_K(){this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this)}receiveResponse(e){const t=e.status_code;if(t<200)switch(this.state){case _.STATUS_TRYING:case _.STATUS_PROCEEDING:this.stateChanged(_.STATUS_PROCEEDING),this.eventHandlers.onReceiveResponse(e)}else switch(this.state){case _.STATUS_TRYING:case _.STATUS_PROCEEDING:this.stateChanged(_.STATUS_COMPLETED),clearTimeout(this.F),408===t?this.eventHandlers.onRequestTimeout():this.eventHandlers.onReceiveResponse(e),this.K=setTimeout((()=>{this.timer_K()}),o.TIMER_K)}}},InviteClientTransaction:class extends s{constructor(e,t,n,s){super(),this.type=_.INVITE_CLIENT,this.id=`z9hG4bK${Math.floor(1e7*Math.random())}`,this.ua=e,this.transport=t,this.request=n,this.eventHandlers=s,n.transaction=this;let r=`SIP/2.0/${t.via_transport}`;r+=` ${e.configuration.via_host};branch=${this.id}`,this.request.setHeader("via",r),this.ua.newTransaction(this)}get C(){return _}stateChanged(e){this.state=e,this.emit("stateChanged")}send(){this.stateChanged(_.STATUS_CALLING),this.B=setTimeout((()=>{this.timer_B()}),o.TIMER_B),this.transport.send(this.request)||this.onTransportError()}onTransportError(){clearTimeout(this.B),clearTimeout(this.D),clearTimeout(this.M),this.state!==_.STATUS_ACCEPTED&&(u.debug(`transport error occurred, deleting transaction ${this.id}`),this.eventHandlers.onTransportError()),this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this)}timer_M(){u.debug(`Timer M expired for transaction ${this.id}`),this.state===_.STATUS_ACCEPTED&&(clearTimeout(this.B),this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this))}timer_B(){u.debug(`Timer B expired for transaction ${this.id}`),this.state===_.STATUS_CALLING&&(this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this),this.eventHandlers.onRequestTimeout())}timer_D(){u.debug(`Timer D expired for transaction ${this.id}`),clearTimeout(this.B),this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this)}sendACK(e){const t=new l.OutgoingRequest(i.ACK,this.request.ruri,this.ua,{route_set:this.request.getHeaders("route"),call_id:this.request.getHeader("call-id"),cseq:this.request.cseq});t.setHeader("from",this.request.getHeader("from")),t.setHeader("via",this.request.getHeader("via")),t.setHeader("to",e.getHeader("to")),this.D=setTimeout((()=>{this.timer_D()}),o.TIMER_D),this.transport.send(t)}cancel(e){if(this.state!==_.STATUS_PROCEEDING)return;const t=new l.OutgoingRequest(i.CANCEL,this.request.ruri,this.ua,{route_set:this.request.getHeaders("route"),call_id:this.request.getHeader("call-id"),cseq:this.request.cseq});t.setHeader("from",this.request.getHeader("from")),t.setHeader("via",this.request.getHeader("via")),t.setHeader("to",this.request.getHeader("to")),e&&t.setHeader("reason",e),this.transport.send(t)}receiveResponse(e){const t=e.status_code;if(t>=100&&t<=199)switch(this.state){case _.STATUS_CALLING:this.stateChanged(_.STATUS_PROCEEDING),this.eventHandlers.onReceiveResponse(e);break;case _.STATUS_PROCEEDING:this.eventHandlers.onReceiveResponse(e)}else if(t>=200&&t<=299)switch(this.state){case _.STATUS_CALLING:case _.STATUS_PROCEEDING:this.stateChanged(_.STATUS_ACCEPTED),this.M=setTimeout((()=>{this.timer_M()}),o.TIMER_M),this.eventHandlers.onReceiveResponse(e);break;case _.STATUS_ACCEPTED:this.eventHandlers.onReceiveResponse(e)}else if(t>=300&&t<=699)switch(this.state){case _.STATUS_CALLING:case _.STATUS_PROCEEDING:this.stateChanged(_.STATUS_COMPLETED),this.sendACK(e),this.eventHandlers.onReceiveResponse(e);break;case _.STATUS_COMPLETED:this.sendACK(e)}}},AckClientTransaction:class extends s{constructor(e,t,n,s){super(),this.id=`z9hG4bK${Math.floor(1e7*Math.random())}`,this.transport=t,this.request=n,this.eventHandlers=s;let r=`SIP/2.0/${t.via_transport}`;r+=` ${e.configuration.via_host};branch=${this.id}`,this.request.setHeader("via",r)}get C(){return _}send(){this.transport.send(this.request)||this.onTransportError()}onTransportError(){c.debug(`transport error occurred for transaction ${this.id}`),this.eventHandlers.onTransportError()}},NonInviteServerTransaction:class extends s{constructor(e,t,n){super(),this.type=_.NON_INVITE_SERVER,this.id=n.via_branch,this.ua=e,this.transport=t,this.request=n,this.last_response="",n.server_transaction=this,this.state=_.STATUS_TRYING,e.newTransaction(this)}get C(){return _}stateChanged(e){this.state=e,this.emit("stateChanged")}timer_J(){h.debug(`Timer J expired for transaction ${this.id}`),this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this)}onTransportError(){this.transportError||(this.transportError=!0,h.debug(`transport error occurred, deleting transaction ${this.id}`),clearTimeout(this.J),this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this))}receiveResponse(e,t,n,s){if(100===e)switch(this.state){case _.STATUS_TRYING:this.stateChanged(_.STATUS_PROCEEDING),this.transport.send(t)||this.onTransportError();break;case _.STATUS_PROCEEDING:this.last_response=t,this.transport.send(t)?n&&n():(this.onTransportError(),s&&s())}else if(e>=200&&e<=699)switch(this.state){case _.STATUS_TRYING:case _.STATUS_PROCEEDING:this.stateChanged(_.STATUS_COMPLETED),this.last_response=t,this.J=setTimeout((()=>{this.timer_J()}),o.TIMER_J),this.transport.send(t)?n&&n():(this.onTransportError(),s&&s())}}},InviteServerTransaction:class extends s{constructor(e,t,n){super(),this.type=_.INVITE_SERVER,this.id=n.via_branch,this.ua=e,this.transport=t,this.request=n,this.last_response="",n.server_transaction=this,this.state=_.STATUS_PROCEEDING,e.newTransaction(this),this.resendProvisionalTimer=null,n.reply(100)}get C(){return _}stateChanged(e){this.state=e,this.emit("stateChanged")}timer_H(){d.debug(`Timer H expired for transaction ${this.id}`),this.state===_.STATUS_COMPLETED&&d.debug("ACK not received, dialog will be terminated"),this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this)}timer_I(){this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this)}timer_L(){d.debug(`Timer L expired for transaction ${this.id}`),this.state===_.STATUS_ACCEPTED&&(this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this))}onTransportError(){this.transportError||(this.transportError=!0,d.debug(`transport error occurred, deleting transaction ${this.id}`),null!==this.resendProvisionalTimer&&(clearInterval(this.resendProvisionalTimer),this.resendProvisionalTimer=null),clearTimeout(this.L),clearTimeout(this.H),clearTimeout(this.I),this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this))}resend_provisional(){this.transport.send(this.last_response)||this.onTransportError()}receiveResponse(e,t,n,s){if(e>=100&&e<=199&&this.state===_.STATUS_PROCEEDING&&(this.transport.send(t)||this.onTransportError(),this.last_response=t),e>100&&e<=199&&this.state===_.STATUS_PROCEEDING)null===this.resendProvisionalTimer&&(this.resendProvisionalTimer=setInterval((()=>{this.resend_provisional()}),o.PROVISIONAL_RESPONSE_INTERVAL));else if(e>=200&&e<=299)switch(this.state){case _.STATUS_PROCEEDING:this.stateChanged(_.STATUS_ACCEPTED),this.last_response=t,this.L=setTimeout((()=>{this.timer_L()}),o.TIMER_L),null!==this.resendProvisionalTimer&&(clearInterval(this.resendProvisionalTimer),this.resendProvisionalTimer=null);case _.STATUS_ACCEPTED:this.transport.send(t)?n&&n():(this.onTransportError(),s&&s())}else e>=300&&e<=699&&this.state===_.STATUS_PROCEEDING&&(null!==this.resendProvisionalTimer&&(clearInterval(this.resendProvisionalTimer),this.resendProvisionalTimer=null),this.transport.send(t)?(this.stateChanged(_.STATUS_COMPLETED),this.H=setTimeout((()=>{this.timer_H()}),o.TIMER_H),n&&n()):(this.onTransportError(),s&&s()))}},checkTransaction:function({_transactions:e},t){let n;switch(t.method){case i.INVITE:if(n=e.ist[t.via_branch],n)return n.state===_.STATUS_PROCEEDING&&n.transport.send(n.last_response),!0;break;case i.ACK:if(n=e.ist[t.via_branch],!n)return!1;if(n.state===_.STATUS_ACCEPTED)return!1;if(n.state===_.STATUS_COMPLETED)return n.state=_.STATUS_CONFIRMED,n.I=setTimeout((()=>{n.timer_I()}),o.TIMER_I),!0;break;case i.CANCEL:return n=e.ist[t.via_branch],n?(t.reply_sl(200),n.state!==_.STATUS_PROCEEDING):(t.reply_sl(481),!0);default:if(n=e.nist[t.via_branch],n){switch(n.state){case _.STATUS_TRYING:break;case _.STATUS_PROCEEDING:case _.STATUS_COMPLETED:n.transport.send(n.last_response)}return!0}}}}},722:(e,t,n)=>{const s=n(7).EventEmitter,r=n(152),i=n(259),l=n(614),o=n(377),a=n(221),u=n(708),c=n(717),h=n(167),d=n(771),_=n(582),p=n(128),m=n(211),f=n(663),g=n(32),T=n(53),v=new r("UA"),C={STATUS_INIT:0,STATUS_READY:1,STATUS_USER_CLOSED:2,STATUS_NOT_READY:3,CONFIGURATION_ERROR:1,NETWORK_ERROR:2};function E(e){this.emit("connecting",e)}function S(e){this._status!==C.STATUS_USER_CLOSED&&(this._status=C.STATUS_READY,this._error=null,this.emit("connected",e),this._dynConfiguration.register&&this._registrator.register())}function A(e){const t=["nict","ict","nist","ist"];for(const e of t)for(const t in this._transactions[e])Object.prototype.hasOwnProperty.call(this._transactions[e],t)&&this._transactions[e][t].onTransportError();this.emit("disconnected",e),this._registrator.onTransportClosed(),this._status!==C.STATUS_USER_CLOSED&&(this._status=C.STATUS_NOT_READY,this._error=C.NETWORK_ERROR)}function b(e){const t=e.transport;let n=e.message;if(n=m.parseMessage(n,this),n&&!(this._status===C.STATUS_USER_CLOSED&&n instanceof f.IncomingRequest)&&g(n,this,t))if(n instanceof f.IncomingRequest)n.transport=t,this.receiveRequest(n);else if(n instanceof f.IncomingResponse){let e;switch(n.method){case i.INVITE:e=this._transactions.ict[n.via_branch],e&&e.receiveResponse(n);break;case i.ACK:break;default:e=this._transactions.nict[n.via_branch],e&&e.receiveResponse(n)}}}e.exports=class extends s{static get C(){return C}constructor(e){if(v.debug("new() [configuration:%o]",e),super(),this._cache={credentials:{}},this._configuration=Object.assign({},T.settings),this._dynConfiguration={},this._dialogs={},this._applicants={},this._sessions={},this._transport=null,this._contact=null,this._status=C.STATUS_INIT,this._error=null,this._transactions={nist:{},nict:{},ist:{},ict:{}},this._data={},this._closeTimer=null,void 0===e)throw new TypeError("Not enough arguments");try{this._loadConfig(e)}catch(e){throw this._status=C.STATUS_NOT_READY,this._error=C.CONFIGURATION_ERROR,e}this._registrator=new l(this)}get C(){return C}get status(){return this._status}get contact(){return this._contact}get configuration(){return this._configuration}get transport(){return this._transport}start(){v.debug("start()"),this._status===C.STATUS_INIT?this._transport.connect():this._status===C.STATUS_USER_CLOSED?(v.debug("restarting UA"),null!==this._closeTimer&&(clearTimeout(this._closeTimer),this._closeTimer=null,this._transport.disconnect()),this._status=C.STATUS_INIT,this._transport.connect()):this._status===C.STATUS_READY?v.debug("UA is in READY status, not restarted"):v.debug("ERROR: connection is down, Auto-Recovery system is trying to reconnect"),this._dynConfiguration.register=this._configuration.register}register(){v.debug("register()"),this._dynConfiguration.register=!0,this._registrator.register()}unregister(e){v.debug("unregister()"),this._dynConfiguration.register=!1,this._registrator.unregister(e)}registrator(){return this._registrator}isRegistered(){return this._registrator.registered}isConnected(){return this._transport.isConnected()}call(e,t){v.debug("call()");const n=new o(this);return n.connect(e,t),n}sendMessage(e,t,n){v.debug("sendMessage()");const s=new a(this);return s.send(e,t,n),s}sendOptions(e,t,n){v.debug("sendOptions()");const s=new u(this);return s.send(e,t,n),s}terminateSessions(e){v.debug("terminateSessions()");for(const t in this._sessions)this._sessions[t].isEnded()||this._sessions[t].terminate(e)}stop(){if(v.debug("stop()"),this._dynConfiguration={},this._status===C.STATUS_USER_CLOSED)return void v.debug("UA already closed");this._registrator.close();const e=Object.keys(this._sessions).length;for(const e in this._sessions)if(Object.prototype.hasOwnProperty.call(this._sessions,e)){v.debug(`closing session ${e}`);try{this._sessions[e].terminate()}catch(e){}}for(const e in this._applicants)if(Object.prototype.hasOwnProperty.call(this._applicants,e))try{this._applicants[e].close()}catch(e){}this._status=C.STATUS_USER_CLOSED,0===Object.keys(this._transactions.nict).length+Object.keys(this._transactions.nist).length+Object.keys(this._transactions.ict).length+Object.keys(this._transactions.ist).length&&0===e?this._transport.disconnect():this._closeTimer=setTimeout((()=>{this._closeTimer=null,this._transport.disconnect()}),2e3)}normalizeTarget(e){return d.normalizeTarget(e,this._configuration.hostport_params)}get(e){switch(e){case"authorization_user":return this._configuration.authorization_user;case"realm":return this._configuration.realm;case"ha1":return this._configuration.ha1;case"authorization_jwt":return this._configuration.authorization_jwt;default:return void v.warn('get() | cannot get "%s" parameter in runtime',e)}}set(e,t){switch(e){case"authorization_user":this._configuration.authorization_user=String(t);break;case"password":this._configuration.password=String(t);break;case"realm":this._configuration.realm=String(t);break;case"ha1":this._configuration.ha1=String(t),this._configuration.password=null;break;case"authorization_jwt":this._configuration.authorization_jwt=String(t);break;case"display_name":this._configuration.display_name=t;break;default:return v.warn('set() | cannot set "%s" parameter in runtime',e),!1}return!0}newTransaction(e){this._transactions[e.type][e.id]=e,this.emit("newTransaction",{transaction:e})}destroyTransaction(e){delete this._transactions[e.type][e.id],this.emit("transactionDestroyed",{transaction:e})}newDialog(e){this._dialogs[e.id]=e}destroyDialog(e){delete this._dialogs[e.id]}newMessage(e,t){this._applicants[e]=e,this.emit("newMessage",t)}newOptions(e,t){this._applicants[e]=e,this.emit("newOptions",t)}destroyMessage(e){delete this._applicants[e]}newRTCSession(e,t){this._sessions[e.id]=e,this.emit("newRTCSession",t)}destroyRTCSession(e){delete this._sessions[e.id]}registered(e){this.emit("registered",e)}unregistered(e){this.emit("unregistered",e)}registrationFailed(e){this.emit("registrationFailed",e)}receiveRequest(e){const t=e.method;if(e.ruri.user!==this._configuration.uri.user&&e.ruri.user!==this._contact.uri.user)return v.debug("Request-URI does not point to us"),void(e.method!==i.ACK&&e.reply_sl(404));if(e.ruri.scheme===i.SIPS)return void e.reply_sl(416);if(c.checkTransaction(this,e))return;if(t===i.INVITE?new c.InviteServerTransaction(this,this._transport,e):t!==i.ACK&&t!==i.CANCEL&&new c.NonInviteServerTransaction(this,this._transport,e),t===i.OPTIONS){if(0===this.listeners("newOptions").length)return void e.reply(200);new u(this).init_incoming(e)}else if(t===i.MESSAGE){if(0===this.listeners("newMessage").length)return void e.reply(405);new a(this).init_incoming(e)}else if(t===i.INVITE&&!e.to_tag&&0===this.listeners("newRTCSession").length)return void e.reply(405);let n,s;if(e.to_tag)n=this._findDialog(e.call_id,e.from_tag,e.to_tag),n?n.receiveRequest(e):t===i.NOTIFY?(s=this._findSession(e),s?s.receiveRequest(e):(v.debug("received NOTIFY request for a non existent subscription"),e.reply(481,"Subscription does not exist"))):t!==i.ACK&&e.reply(481);else switch(t){case i.INVITE:if(window.RTCPeerConnection)if(e.hasHeader("replaces")){const t=e.replaces;n=this._findDialog(t.call_id,t.from_tag,t.to_tag),n?(s=n.owner,s.isEnded()?e.reply(603):s.receiveRequest(e)):e.reply(481)}else s=new o(this),s.init_incoming(e);else v.warn("INVITE received but WebRTC is not supported"),e.reply(488);break;case i.BYE:e.reply(481);break;case i.CANCEL:s=this._findSession(e),s?s.receiveRequest(e):v.debug("received CANCEL request for a non existent session");break;case i.ACK:break;case i.NOTIFY:this.emit("sipEvent",{event:e.event,request:e}),e.reply(200);break;default:e.reply(405)}}_findSession({call_id:e,from_tag:t,to_tag:n}){const s=e+t,r=this._sessions[s],i=e+n,l=this._sessions[i];return r||l||null}_findDialog(e,t,n){let s=e+t+n,r=this._dialogs[s];return r||(s=e+n+t,r=this._dialogs[s],r||null)}_loadConfig(e){try{T.load(this._configuration,e)}catch(e){throw e}0===this._configuration.display_name&&(this._configuration.display_name="0"),this._configuration.instance_id||(this._configuration.instance_id=d.newUUID()),this._configuration.jssip_id=d.createRandomToken(5);const t=this._configuration.uri.clone();t.user=null,this._configuration.hostport_params=t.toString().replace(/^sip:/i,"");try{this._transport=new h(this._configuration.sockets,{max_interval:this._configuration.connection_recovery_max_interval,min_interval:this._configuration.connection_recovery_min_interval}),this._transport.onconnecting=E.bind(this),this._transport.onconnect=S.bind(this),this._transport.ondisconnect=A.bind(this),this._transport.ondata=b.bind(this)}catch(e){throw v.warn(e),new _.ConfigurationError("sockets",this._configuration.sockets)}if(delete this._configuration.sockets,this._configuration.authorization_user||(this._configuration.authorization_user=this._configuration.uri.user),!this._configuration.registrar_server){const e=this._configuration.uri.clone();e.user=null,e.clearParams(),e.clearHeaders(),this._configuration.registrar_server=e}this._configuration.no_answer_timeout*=1e3,this._configuration.contact_uri?this._configuration.via_host=this._configuration.contact_uri.host:this._configuration.contact_uri=new p("sip",d.createRandomToken(8),this._configuration.via_host,null,{transport:"ws"}),this._contact={pub_gruu:null,temp_gruu:null,uri:this._configuration.contact_uri,toString(e={}){const t=e.anonymous||null,n=e.outbound||null;let s="<";return s+=t?this.temp_gruu||"sip:anonymous@anonymous.invalid;transport=ws":this.pub_gruu||this.uri.toString(),!n||(t?this.temp_gruu:this.pub_gruu)||(s+=";ob"),s+=">",s}};const n=["authorization_user","password","realm","ha1","authorization_jwt","display_name","register"];for(const e in this._configuration)Object.prototype.hasOwnProperty.call(this._configuration,e)&&(-1!==n.indexOf(e)?Object.defineProperty(this._configuration,e,{writable:!0,configurable:!1}):Object.defineProperty(this._configuration,e,{writable:!1,configurable:!1}));v.debug("configuration parameters after validation:");for(const e in this._configuration)if(Object.prototype.hasOwnProperty.call(T.settings,e))switch(e){case"uri":case"registrar_server":v.debug(`- ${e}: ${this._configuration[e]}`);break;case"password":case"ha1":case"authorization_jwt":v.debug(`- ${e}: NOT SHOWN`);break;default:v.debug(`- ${e}: ${JSON.stringify(this._configuration[e])}`)}}}},736:(e,t,n)=>{e.exports=function(e){function t(e){let n,r,i,l=null;function o(...e){if(!o.enabled)return;const s=o,r=Number(new Date),i=r-(n||r);s.diff=i,s.prev=n,s.curr=r,n=r,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let l=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,r)=>{if("%%"===n)return"%";l++;const i=t.formatters[r];if("function"==typeof i){const t=e[l];n=i.call(s,t),e.splice(l,1),l--}return n})),t.formatArgs.call(s,e),(s.log||t.log).apply(s,e)}return o.namespace=e,o.useColors=t.useColors(),o.color=t.selectColor(e),o.extend=s,o.destroy=t.destroy,Object.defineProperty(o,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==l?l:(r!==t.namespaces&&(r=t.namespaces,i=t.enabled(e)),i),set:e=>{l=e}}),"function"==typeof t.init&&t.init(o),o}function s(e,n){const s=t(this.namespace+(void 0===n?":":n)+e);return s.log=this.log,s}function r(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(r),...t.skips.map(r).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const s=("string"==typeof e?e:"").split(/[\s,]+/),r=s.length;for(n=0;n<r;n++)s[n]&&("-"===(e=s[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.slice(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,s;for(n=0,s=t.skips.length;n<s;n++)if(t.skips[n].test(e))return!1;for(n=0,s=t.names.length;n<s;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(585),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},748:(e,t,n)=>{const s=n(7).EventEmitter,r=n(259),i=n(582),l=n(771);e.exports=class extends s{constructor(e){super(),this._session=e,this._direction=null,this._contentType=null,this._body=null}get contentType(){return this._contentType}get body(){return this._body}send(e,t,n={}){if(this._direction="outgoing",void 0===e)throw new TypeError("Not enough arguments");if(this._session.status!==this._session.C.STATUS_CONFIRMED&&this._session.status!==this._session.C.STATUS_WAITING_FOR_ACK)throw new i.InvalidStateError(this._session.status);this._contentType=e,this._body=t;const s=l.cloneArray(n.extraHeaders);s.push(`Content-Type: ${e}`),this._session.newInfo({originator:"local",info:this,request:this.request}),this._session.sendRequest(r.INFO,{extraHeaders:s,eventHandlers:{onSuccessResponse:e=>{this.emit("succeeded",{originator:"remote",response:e})},onErrorResponse:e=>{this.emit("failed",{originator:"remote",response:e})},onTransportError:()=>{this._session.onTransportError()},onRequestTimeout:()=>{this._session.onRequestTimeout()},onDialogError:()=>{this._session.onDialogError()}},body:t})}init_incoming(e){this._direction="incoming",this.request=e,e.reply(200),this._contentType=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0,this._body=e.body,this._session.newInfo({originator:"remote",info:this,request:e})}}},771:(e,t,n)=>{const s=n(259),r=n(128),i=n(555);t.str_utf8_length=e=>unescape(encodeURIComponent(e)).length;const l=t.isFunction=e=>void 0!==e&&"[object Function]"===Object.prototype.toString.call(e);t.isString=e=>void 0!==e&&"[object String]"===Object.prototype.toString.call(e),t.isDecimal=e=>!isNaN(e)&&parseFloat(e)===parseInt(e,10),t.isEmpty=e=>null===e||""===e||void 0===e||Array.isArray(e)&&0===e.length||"number"==typeof e&&isNaN(e),t.hasMethods=function(e,...t){for(const n of t)if(l(e[n]))return!1;return!0};const o=t.createRandomToken=(e,t=32)=>{let n,s,r="";for(n=0;n<e;n++)s=Math.random()*t|0,r+=s.toString(t);return r};t.newTag=()=>o(10),t.newUUID=()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(e=>{const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})),t.hostType=e=>{if(e)return-1!==(e=i.parse(e,"host"))?e.host_type:void 0};const a=t.escapeUser=e=>encodeURIComponent(decodeURIComponent(e)).replace(/%3A/gi,":").replace(/%2B/gi,"+").replace(/%3F/gi,"?").replace(/%2F/gi,"/");t.normalizeTarget=(e,t)=>{if(e){if(e instanceof r)return e;if("string"==typeof e){const n=e.split("@");let i,l,o;switch(n.length){case 1:if(!t)return;i=e,l=t;break;case 2:i=n[0],l=n[1];break;default:i=n.slice(0,n.length-1).join("@"),l=n[n.length-1]}return i=i.replace(/^(sips?|tel):/i,""),/^[-.()]*\+?[0-9\-.()]+$/.test(i)&&(i=i.replace(/[-.()]/g,"")),e=`${s.SIP}:${a(i)}@${l}`,(o=r.parse(e))?o:void 0}}},t.headerize=e=>{const t={"Call-Id":"Call-ID",Cseq:"CSeq","Www-Authenticate":"WWW-Authenticate"},n=e.toLowerCase().replace(/_/g,"-").split("-");let s="";const r=n.length;let i;for(i=0;i<r;i++)0!==i&&(s+="-"),s+=n[i].charAt(0).toUpperCase()+n[i].substring(1);return t[s]&&(s=t[s]),s},t.sipErrorCause=e=>{for(const t in s.SIP_ERROR_CAUSES)if(-1!==s.SIP_ERROR_CAUSES[t].indexOf(e))return s.causes[t];return s.causes.SIP_FAILURE_CODE},t.getRandomTestNetIP=()=>`192.0.2.${Math.floor(254*Math.random()+1)}`,t.calculateMD5=e=>{function t(e,t){return e<<t|e>>>32-t}function n(e,t){const n=2147483648&e,s=2147483648&t,r=1073741824&e,i=1073741824&t,l=(1073741823&e)+(1073741823&t);return r&i?2147483648^l^n^s:r|i?1073741824&l?3221225472^l^n^s:1073741824^l^n^s:l^n^s}function s(e,s,r,i,l,o,a){return e=n(e,n(n(function(e,t,n){return e&t|~e&n}(s,r,i),l),a)),n(t(e,o),s)}function r(e,s,r,i,l,o,a){return e=n(e,n(n(function(e,t,n){return e&n|t&~n}(s,r,i),l),a)),n(t(e,o),s)}function i(e,s,r,i,l,o,a){return e=n(e,n(n(function(e,t,n){return e^t^n}(s,r,i),l),a)),n(t(e,o),s)}function l(e,s,r,i,l,o,a){return e=n(e,n(n(function(e,t,n){return t^(e|~n)}(s,r,i),l),a)),n(t(e,o),s)}function o(e){let t,n,s="",r="";for(n=0;n<=3;n++)t=e>>>8*n&255,r=`0${t.toString(16)}`,s+=r.substr(r.length-2,2);return s}let a,u,c,h,d,_,p,m,f,g=[];for(e=function(e){e=e.replace(/\r\n/g,"\n");let t="";for(let n=0;n<e.length;n++){const s=e.charCodeAt(n);s<128?t+=String.fromCharCode(s):s>127&&s<2048?(t+=String.fromCharCode(s>>6|192),t+=String.fromCharCode(63&s|128)):(t+=String.fromCharCode(s>>12|224),t+=String.fromCharCode(s>>6&63|128),t+=String.fromCharCode(63&s|128))}return t}(e),g=function(e){let t;const n=e.length,s=n+8,r=16*((s-s%64)/64+1),i=new Array(r-1);let l=0,o=0;for(;o<n;)t=(o-o%4)/4,l=o%4*8,i[t]=i[t]|e.charCodeAt(o)<<l,o++;return t=(o-o%4)/4,l=o%4*8,i[t]=i[t]|128<<l,i[r-2]=n<<3,i[r-1]=n>>>29,i}(e),_=1732584193,p=4023233417,m=2562383102,f=271733878,a=0;a<g.length;a+=16)u=_,c=p,h=m,d=f,_=s(_,p,m,f,g[a+0],7,3614090360),f=s(f,_,p,m,g[a+1],12,3905402710),m=s(m,f,_,p,g[a+2],17,606105819),p=s(p,m,f,_,g[a+3],22,3250441966),_=s(_,p,m,f,g[a+4],7,4118548399),f=s(f,_,p,m,g[a+5],12,1200080426),m=s(m,f,_,p,g[a+6],17,2821735955),p=s(p,m,f,_,g[a+7],22,4249261313),_=s(_,p,m,f,g[a+8],7,1770035416),f=s(f,_,p,m,g[a+9],12,2336552879),m=s(m,f,_,p,g[a+10],17,4294925233),p=s(p,m,f,_,g[a+11],22,2304563134),_=s(_,p,m,f,g[a+12],7,1804603682),f=s(f,_,p,m,g[a+13],12,4254626195),m=s(m,f,_,p,g[a+14],17,2792965006),p=s(p,m,f,_,g[a+15],22,1236535329),_=r(_,p,m,f,g[a+1],5,4129170786),f=r(f,_,p,m,g[a+6],9,3225465664),m=r(m,f,_,p,g[a+11],14,643717713),p=r(p,m,f,_,g[a+0],20,3921069994),_=r(_,p,m,f,g[a+5],5,3593408605),f=r(f,_,p,m,g[a+10],9,38016083),m=r(m,f,_,p,g[a+15],14,3634488961),p=r(p,m,f,_,g[a+4],20,3889429448),_=r(_,p,m,f,g[a+9],5,568446438),f=r(f,_,p,m,g[a+14],9,3275163606),m=r(m,f,_,p,g[a+3],14,4107603335),p=r(p,m,f,_,g[a+8],20,1163531501),_=r(_,p,m,f,g[a+13],5,2850285829),f=r(f,_,p,m,g[a+2],9,4243563512),m=r(m,f,_,p,g[a+7],14,1735328473),p=r(p,m,f,_,g[a+12],20,2368359562),_=i(_,p,m,f,g[a+5],4,4294588738),f=i(f,_,p,m,g[a+8],11,2272392833),m=i(m,f,_,p,g[a+11],16,1839030562),p=i(p,m,f,_,g[a+14],23,4259657740),_=i(_,p,m,f,g[a+1],4,2763975236),f=i(f,_,p,m,g[a+4],11,1272893353),m=i(m,f,_,p,g[a+7],16,4139469664),p=i(p,m,f,_,g[a+10],23,3200236656),_=i(_,p,m,f,g[a+13],4,681279174),f=i(f,_,p,m,g[a+0],11,3936430074),m=i(m,f,_,p,g[a+3],16,3572445317),p=i(p,m,f,_,g[a+6],23,76029189),_=i(_,p,m,f,g[a+9],4,3654602809),f=i(f,_,p,m,g[a+12],11,3873151461),m=i(m,f,_,p,g[a+15],16,530742520),p=i(p,m,f,_,g[a+2],23,3299628645),_=l(_,p,m,f,g[a+0],6,4096336452),f=l(f,_,p,m,g[a+7],10,1126891415),m=l(m,f,_,p,g[a+14],15,2878612391),p=l(p,m,f,_,g[a+5],21,4237533241),_=l(_,p,m,f,g[a+12],6,1700485571),f=l(f,_,p,m,g[a+3],10,2399980690),m=l(m,f,_,p,g[a+10],15,4293915773),p=l(p,m,f,_,g[a+1],21,2240044497),_=l(_,p,m,f,g[a+8],6,1873313359),f=l(f,_,p,m,g[a+15],10,4264355552),m=l(m,f,_,p,g[a+6],15,2734768916),p=l(p,m,f,_,g[a+13],21,1309151649),_=l(_,p,m,f,g[a+4],6,4149444226),f=l(f,_,p,m,g[a+11],10,3174756917),m=l(m,f,_,p,g[a+2],15,718787259),p=l(p,m,f,_,g[a+9],21,3951481745),_=n(_,u),p=n(p,c),m=n(m,h),f=n(f,d);return(o(_)+o(p)+o(m)+o(f)).toLowerCase()},t.closeMediaStream=e=>{if(e)try{let t;if(e.getTracks){t=e.getTracks();for(const e of t)e.stop()}else{t=e.getAudioTracks();for(const e of t)e.stop();t=e.getVideoTracks();for(const e of t)e.stop()}}catch(t){"function"!=typeof e.stop&&"object"!=typeof e.stop||e.stop()}},t.cloneArray=e=>e&&e.slice()||[],t.cloneObject=(e,t={})=>e&&Object.assign({},e)||t},804:(e,t,n)=>{var s=n(602),r=/%[sdv%]/g,i=function(e){var t=1,n=arguments,s=n.length;return e.replace(r,(function(e){if(t>=s)return e;var r=n[t];switch(t+=1,e){case"%%":return"%";case"%s":return String(r);case"%d":return Number(r);case"%v":return""}}))},l=function(e,t,n){var s=[e+"="+(t.format instanceof Function?t.format(t.push?n:n[t.name]):t.format)];if(t.names)for(var r=0;r<t.names.length;r+=1){var l=t.names[r];t.name?s.push(n[t.name][l]):s.push(n[t.names[r]])}else s.push(n[t.name]);return i.apply(null,s)},o=["v","o","s","i","u","e","p","c","b","t","r","z","a"],a=["i","c","b","a"];e.exports=function(e,t){t=t||{},null==e.version&&(e.version=0),null==e.name&&(e.name=" "),e.media.forEach((function(e){null==e.payloads&&(e.payloads="")}));var n=t.outerOrder||o,r=t.innerOrder||a,i=[];return n.forEach((function(t){s[t].forEach((function(n){n.name in e&&null!=e[n.name]?i.push(l(t,n,e)):n.push in e&&null!=e[n.push]&&e[n.push].forEach((function(e){i.push(l(t,n,e))}))}))})),e.media.forEach((function(e){i.push(l("m",s.m[0],e)),r.forEach((function(t){s[t].forEach((function(n){n.name in e&&null!=e[n.name]?i.push(l(t,n,e)):n.push in e&&null!=e[n.push]&&e[n.push].forEach((function(e){i.push(l(t,n,e))}))}))}))})),i.join("\r\n")+"\r\n"}},833:(e,t,n)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let s=0,r=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(s++,"%c"===e&&(r=s))})),t.splice(r,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(736)(t);const{formatters:s}=e.exports;s.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},893:(e,t,n)=>{const s=n(152),r=n(771),i=n(555),l=new s("Socket");t.isSocket=e=>{if(Array.isArray(e))return!1;if(void 0===e)return l.warn("undefined JsSIP.Socket instance"),!1;try{if(!r.isString(e.url))throw l.warn("missing or invalid JsSIP.Socket url property"),new Error("Missing or invalid JsSIP.Socket url property");if(!r.isString(e.via_transport))throw l.warn("missing or invalid JsSIP.Socket via_transport property"),new Error("Missing or invalid JsSIP.Socket via_transport property");if(-1===i.parse(e.sip_uri,"SIP_URI"))throw l.warn("missing or invalid JsSIP.Socket sip_uri property"),new Error("missing or invalid JsSIP.Socket sip_uri property")}catch(e){return!1}try{["connect","disconnect","send"].forEach((t=>{if(!r.isFunction(e[t]))throw l.warn(`missing or invalid JsSIP.Socket method: ${t}`),new Error(`Missing or invalid JsSIP.Socket method: ${t}`)}))}catch(e){return!1}return!0}},898:(e,t,n)=>{const s=n(152),r=n(555),i=new s("WebSocketInterface");e.exports=class{constructor(e){i.debug('new() [url:"%s"]',e),this._url=e,this._sip_uri=null,this._via_transport=null,this._ws=null;const t=r.parse(e,"absoluteURI");if(-1===t)throw i.warn(`invalid WebSocket URI: ${e}`),new TypeError(`Invalid argument: ${e}`);if("wss"!==t.scheme&&"ws"!==t.scheme)throw i.warn(`invalid WebSocket URI scheme: ${t.scheme}`),new TypeError(`Invalid argument: ${e}`);this._sip_uri=`sip:${t.host}${t.port?`:${t.port}`:""};transport=ws`,this._via_transport=t.scheme.toUpperCase()}get via_transport(){return this._via_transport}set via_transport(e){this._via_transport=e.toUpperCase()}get sip_uri(){return this._sip_uri}get url(){return this._url}connect(){if(i.debug("connect()"),this.isConnected())i.debug(`WebSocket ${this._url} is already connected`);else if(this.isConnecting())i.debug(`WebSocket ${this._url} is connecting`);else{this._ws&&this.disconnect(),i.debug(`connecting to WebSocket ${this._url}`);try{this._ws=new WebSocket(this._url,"sip"),this._ws.binaryType="arraybuffer",this._ws.onopen=this._onOpen.bind(this),this._ws.onclose=this._onClose.bind(this),this._ws.onmessage=this._onMessage.bind(this),this._ws.onerror=this._onError.bind(this)}catch(e){this._onError(e)}}}disconnect(){i.debug("disconnect()"),this._ws&&(this._ws.onopen=()=>{},this._ws.onclose=()=>{},this._ws.onmessage=()=>{},this._ws.onerror=()=>{},this._ws.close(),this._ws=null)}send(e){return i.debug("send()"),this.isConnected()?(this._ws.send(e),!0):(i.warn("unable to send message, WebSocket is not open"),!1)}isConnected(){return this._ws&&this._ws.readyState===this._ws.OPEN}isConnecting(){return this._ws&&this._ws.readyState===this._ws.CONNECTING}_onOpen(){i.debug(`WebSocket ${this._url} connected`),this.onconnect()}_onClose({wasClean:e,code:t,reason:n}){i.debug(`WebSocket ${this._url} closed`),!1===e&&i.debug("WebSocket abrupt disconnection"),this.ondisconnect(!e,t,n)}_onMessage({data:e}){i.debug("received WebSocket message"),this.ondata(e)}_onError(e){i.warn(`WebSocket ${this._url} error: `,e)}}},996:(e,t,n)=>{const s=n(152),r=n(771),i=new s("DigestAuthentication");e.exports=class{constructor(e){this._credentials=e,this._cnonce=null,this._nc=0,this._ncHex="00000000",this._algorithm=null,this._realm=null,this._nonce=null,this._opaque=null,this._stale=null,this._qop=null,this._method=null,this._uri=null,this._ha1=null,this._response=null}get(e){switch(e){case"realm":return this._realm;case"ha1":return this._ha1;default:return void i.warn('get() | cannot get "%s" parameter',e)}}authenticate({method:e,ruri:t,body:n},s,l=null){if(this._algorithm=s.algorithm,this._realm=s.realm,this._nonce=s.nonce,this._opaque=s.opaque,this._stale=s.stale,this._algorithm){if("MD5"!==this._algorithm)return i.warn('authenticate() | challenge with Digest algorithm different than "MD5", authentication aborted'),!1}else this._algorithm="MD5";if(!this._nonce)return i.warn("authenticate() | challenge without Digest nonce, authentication aborted"),!1;if(!this._realm)return i.warn("authenticate() | challenge without Digest realm, authentication aborted"),!1;if(!this._credentials.password){if(!this._credentials.ha1)return i.warn("authenticate() | no plain SIP password nor ha1 provided, authentication aborted"),!1;if(this._credentials.realm!==this._realm)return i.warn('authenticate() | no plain SIP password, and stored `realm` does not match the given `realm`, cannot authenticate [stored:"%s", given:"%s"]',this._credentials.realm,this._realm),!1}if(s.qop)if(s.qop.indexOf("auth-int")>-1)this._qop="auth-int";else{if(!(s.qop.indexOf("auth")>-1))return i.warn('authenticate() | challenge without Digest qop different than "auth" or "auth-int", authentication aborted'),!1;this._qop="auth"}else this._qop=null;this._method=e,this._uri=t,this._cnonce=l||r.createRandomToken(12),this._nc+=1;const o=Number(this._nc).toString(16);let a,u;return this._ncHex="00000000".substr(0,8-o.length)+o,4294967296===this._nc&&(this._nc=1,this._ncHex="00000001"),this._credentials.password?this._ha1=r.calculateMD5(`${this._credentials.username}:${this._realm}:${this._credentials.password}`):this._ha1=this._credentials.ha1,"auth"===this._qop?(a=`${this._method}:${this._uri}`,u=r.calculateMD5(a),i.debug('authenticate() | using qop=auth [a2:"%s"]',a),this._response=r.calculateMD5(`${this._ha1}:${this._nonce}:${this._ncHex}:${this._cnonce}:auth:${u}`)):"auth-int"===this._qop?(a=`${this._method}:${this._uri}:${r.calculateMD5(n||"")}`,u=r.calculateMD5(a),i.debug('authenticate() | using qop=auth-int [a2:"%s"]',a),this._response=r.calculateMD5(`${this._ha1}:${this._nonce}:${this._ncHex}:${this._cnonce}:auth-int:${u}`)):null===this._qop&&(a=`${this._method}:${this._uri}`,u=r.calculateMD5(a),i.debug('authenticate() | using qop=null [a2:"%s"]',a),this._response=r.calculateMD5(`${this._ha1}:${this._nonce}:${u}`)),i.debug("authenticate() | response generated"),!0}toString(){const e=[];if(!this._response)throw new Error("response field does not exist, cannot generate Authorization header");return e.push(`algorithm=${this._algorithm}`),e.push(`username="${this._credentials.username}"`),e.push(`realm="${this._realm}"`),e.push(`nonce="${this._nonce}"`),e.push(`uri="${this._uri}"`),e.push(`response="${this._response}"`),this._opaque&&e.push(`opaque="${this._opaque}"`),this._qop&&(e.push(`qop=${this._qop}`),e.push(`cnonce="${this._cnonce}"`),e.push(`nc=${this._ncHex}`)),`Digest ${e.join(", ")}`}}}},t={};function n(s){var r=t[s];if(void 0!==r)return r.exports;var i=t[s]={exports:{}};return e[s](i,i.exports,n),i.exports}(()=>{"use strict";var e=n(399);const t="4.0.5";var s,r;console.info(`%c SIP-CORE %c ${t} `,"color: white; background: dodgerblue; font-weight: 700;","color: dodgerblue; background: white; font-weight: 700;"),function(e){e[e.IDLE=0]="IDLE",e[e.INCOMING=1]="INCOMING",e[e.OUTGOING=2]="OUTGOING",e[e.CONNECTING=3]="CONNECTING",e[e.CONNECTED=4]="CONNECTED"}(s||(s={})),function(e){e.INPUT="audioinput",e.OUTPUT="audiooutput"}(r||(r={}));const i=new class{ua;RTCSession=null;version=t;hass;user;config;heartBeatHandle=null;heartBeatIntervalMs=3e4;callTimerHandle=null;wssUrl;iceCandidateTimeout=null;callOptions;currentAudioInputId=localStorage.getItem("sipcore-audio-input")||null;currentAudioOutputId=localStorage.getItem("sipcore-audio-output")||null;remoteAudioStream=null;remoteVideoStream=null;constructor(){this.config=this.fetchConfig();const e=document.querySelector("home-assistant");if(!e)throw new Error("Home Assistant element not found");this.hass=e.hass;const t=this.hass.states["text.asterisk_addon_ingress_entry"]?.state;if(t){const e="https:"==window.location.protocol?"wss":"ws";this.wssUrl=`${e}://${window.location.host}${t}/ws`}else{if(!this.config.custom_wss_url)throw new Error("No ingress entry or custom WSS URL provided");this.wssUrl=this.config.custom_wss_url}this.user=this.config.users.find((e=>e.ha_username===this.hass.user.name))||this.config.backup_user,console.info(`Selected user: ${this.user.ha_username} (${this.user.extension})`),this.callOptions={mediaConstraints:{audio:!0,video:this.config.sip_video},rtcConstraints:{offerToReceiveAudio:!0,offerToReceiveVideo:this.config.sip_video},pcConfig:this.config.ice_config},this.handleRemoteTrackEvent=this.handleRemoteTrackEvent.bind(this),this.handleIceGatheringStateChangeEvent=this.handleIceGatheringStateChangeEvent.bind(this),this.ua=this.setupUA()}get remoteExtension(){return this.RTCSession?.remote_identity.uri.user||null}get remoteName(){return this.RTCSession?.remote_identity.display_name||this.RTCSession?.remote_identity.uri.user||null}get registered(){return this.ua.isRegistered()}get callState(){return this.RTCSession?.isEstablished()?s.CONNECTED:"connecting"===this.RTCSession?.connection?.connectionState?s.CONNECTING:this.RTCSession?.isInProgress()?"incoming"===this.RTCSession?.direction?s.INCOMING:s.OUTGOING:s.IDLE}get callDuration(){if(this.RTCSession?.start_time){var e=Math.floor((Date.now()-this.RTCSession.start_time.getTime())/1e3),t=e%60;return`${Math.floor(e/60)}:${t<10?"0":""}${t}`}return"0:00"}async setupAudio(){let e=document.createElement("audio");e.id="remoteAudio",e.autoplay=!0,e.style.display="none",document.body.appendChild(e),this.currentAudioInputId&&await this.setAudioDevice(this.currentAudioInputId,r.INPUT),this.currentAudioOutputId&&await this.setAudioDevice(this.currentAudioOutputId,r.OUTPUT)}setupPopup(){let e=this.config.popup_override_component||"sip-call-dialog";document.getElementsByTagName(e).length<1&&document.body.appendChild(document.createElement(e))}startCallTimer(){this.callTimerHandle=setInterval((()=>{this.triggerUpdate()}),1e3)}stopCallTimer(){this.callTimerHandle&&(clearInterval(this.callTimerHandle),this.callTimerHandle=null)}async init(){await this.createHassioSession(),await this.setupAudio(),this.config.sip_video&&await navigator.mediaDevices.getUserMedia({video:!0,audio:!0}),console.info(`Connecting to ${this.wssUrl}...`),this.ua.start(),null!==this.config.popup_config&&this.setupPopup(),this.triggerUpdate();const e=new URLSearchParams(window.location.search).get("call");e&&(console.info(`Autocalling ${e}...`),this.startCall(e))}fetchConfig(){const e=new XMLHttpRequest;if(e.open("GET",`/local/sip-config.json?${(new Date).getTime()}`,!1),e.send(null),200===e.status){const t=JSON.parse(e.responseText);return console.debug("SIP-Core Config fetched:",t),t}throw new Error(`Failed to fetch config: ${e.statusText}`)}answerCall(){this.callState===s.INCOMING?(this.RTCSession?.answer(this.callOptions),this.triggerUpdate()):console.warn("Not in incoming call state. Cannot answer.")}endCall(){this.RTCSession?.terminate(),this.triggerUpdate()}startCall(e){this.ua.call(e,this.callOptions)}triggerUpdate(){window.dispatchEvent(new Event("sipcore-update"))}setupUA(){const t=new e.WebSocketInterface(this.wssUrl),n=new e.UA({sockets:[t],uri:`${this.user.extension}@${this.config.pbx_server||window.location.host}`,authorization_user:this.user.extension,display_name:this.user.display_name||this.user.ha_username,password:this.user.password,register:!0});return n.on("registered",(e=>{console.info("Registered"),this.triggerUpdate(),null!=this.heartBeatHandle&&clearInterval(this.heartBeatHandle),this.heartBeatHandle=setInterval((()=>{console.debug("Sending heartbeat"),t.send("\n\n")}),this.heartBeatIntervalMs)})),n.on("unregistered",(e=>{console.warn("Unregistered"),this.triggerUpdate(),null!=this.heartBeatHandle&&clearInterval(this.heartBeatHandle)})),n.on("registrationFailed",(e=>{console.error("Registration failed:",e),this.triggerUpdate(),null!=this.heartBeatHandle&&clearInterval(this.heartBeatHandle),"Connection Error"===e.cause&&(console.error("Connection error. Retrying..."),setTimeout((()=>{this.ua.start()}),5e3))})),n.on("newRTCSession",(e=>{if(console.debug(`New RTC Session: ${e.originator}`),null!==this.RTCSession)return console.info("Terminating new RTC session"),void e.session.terminate();switch(this.RTCSession=e.session,e.session.on("failed",(e=>{console.warn("Call failed:",e),window.dispatchEvent(new Event("sipcore-call-ended")),this.RTCSession=null,this.remoteVideoStream=null,this.remoteAudioStream=null,this.stopCallTimer(),this.triggerUpdate()})),e.session.on("ended",(e=>{console.info("Call ended:",e),window.dispatchEvent(new Event("sipcore-call-ended")),this.RTCSession=null,this.remoteVideoStream=null,this.remoteAudioStream=null,this.stopCallTimer(),this.triggerUpdate()})),e.session.on("accepted",(e=>{console.info("Call accepted"),this.startCallTimer(),this.triggerUpdate()})),e.session.on("icecandidate",(e=>{console.debug("ICE candidate:",e.candidate?.candidate),null!=this.iceCandidateTimeout&&clearTimeout(this.iceCandidateTimeout),this.iceCandidateTimeout=setTimeout((()=>{console.debug("ICE stopped gathering candidates due to timeout"),e.ready()}),this.config.ice_config.iceGatheringTimeout||5e3)})),window.dispatchEvent(new Event("sipcore-call-started")),e.session.direction){case"incoming":console.info("Incoming call"),this.triggerUpdate(),e.session.on("peerconnection",(e=>{console.info("Incoming call peer connection established"),e.peerconnection.addEventListener("track",this.handleRemoteTrackEvent),e.peerconnection.addEventListener("icegatheringstatechange",this.handleIceGatheringStateChangeEvent)})),this.config.auto_answer&&(console.info("Auto answering call..."),this.answerCall());break;case"outgoing":console.info("Outgoing call"),console.info("PLAYING"),new Audio("/local/ring-tones/ring-tone.mp3").play().catch((()=>console.info("cant play"))),console.info("PLAYWEDD"),this.triggerUpdate(),e.session.connection.addEventListener("track",this.handleRemoteTrackEvent),e.session.connection.addEventListener("icegatheringstatechange",this.handleIceGatheringStateChangeEvent)}})),n}handleIceGatheringStateChangeEvent(e){console.debug("ICE gathering state changed:",e.target?.iceGatheringState),"complete"===e.target?.iceGatheringState&&(console.info("ICE gathering complete"),null!=this.iceCandidateTimeout&&clearTimeout(this.iceCandidateTimeout))}async handleRemoteTrackEvent(e){let t=null;e.streams.length>0?(console.debug(`Received remote streams amount: ${e.streams.length}. Using first stream...`),t=e.streams[0]):(console.debug("No associated streams. Creating new stream..."),t=new MediaStream,t.addTrack(e.track));let n=document.getElementById("remoteAudio");if("audio"===e.track.kind&&n.srcObject!=t){this.remoteAudioStream=t,n.srcObject=t;try{await n.play()}catch(e){console.error("Error starting audio playback: "+e)}}"video"===e.track.kind&&(console.info("Received remote video track"),this.remoteVideoStream=t),this.triggerUpdate()}setIngressCookie(e){return document.cookie=`ingress_session=${e};path=/api/hassio_ingress/;SameSite=Strict${"https:"===location.protocol?";Secure":""}`,e}async createHassioSession(){const e=await this.hass.callWS({type:"supervisor/api",endpoint:"/ingress/session",method:"post"});return this.setIngressCookie(e.session)}async validateHassioSession(e){await this.hass.callWS({type:"supervisor/api",endpoint:"/ingress/validate_session",method:"post",data:{session:e}}),this.setIngressCookie(e)}async getAudioDevices(e){return await navigator.mediaDevices.getUserMedia({audio:!0}),(await navigator.mediaDevices.enumerateDevices()).filter((t=>t.kind==e))}async setAudioDevice(e,t){switch(console.info(`Setting audio device ${e} (${t})`),t){case r.INPUT:try{await navigator.mediaDevices.getUserMedia({audio:{deviceId:{exact:e}}}),console.info(`Audio input set to ${this.currentAudioInputId}`)}catch(e){console.error(`Error setting audio input: ${e}`),await navigator.mediaDevices.getUserMedia({audio:!0}),console.info("Audio input set to default"),this.currentAudioInputId=null,localStorage.removeItem("sipcore-audio-input"),this.triggerUpdate()}this.currentAudioInputId=e,localStorage.setItem("sipcore-audio-input",e);break;case r.OUTPUT:var n=document.querySelector("#remoteAudio");try{await n.setSinkId(this.currentAudioOutputId)}catch(e){console.error(`Error setting audio output: ${e}`),this.currentAudioOutputId=null,localStorage.removeItem("sipcore-audio-output"),this.triggerUpdate(),console.info("Audio output set to default");break}this.currentAudioOutputId=e,localStorage.setItem("sipcore-audio-output",e)}}};function l(e,t,n,s){var r,i=arguments.length,l=i<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,n):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,s);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(l=(i<3?r(l):i>3?r(t,n,l):r(t,n))||l);return i>3&&l&&Object.defineProperty(t,n,l),l}i.init().catch((e=>{console.error("Error initializing SIP Core:",e)})),window.sipCore=i,Object.create,Object.create;const o=window,a=o.ShadowRoot&&(void 0===o.ShadyCSS||o.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,u=Symbol(),c=new WeakMap;class h{constructor(e,t,n){if(this._$cssResult$=!0,n!==u)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e,this.t=t}get styleSheet(){let e=this.o;const t=this.t;if(a&&void 0===e){const n=void 0!==t&&1===t.length;n&&(e=c.get(t)),void 0===e&&((this.o=e=new CSSStyleSheet).replaceSync(this.cssText),n&&c.set(t,e))}return e}toString(){return this.cssText}}const d=(e,...t)=>{const n=1===e.length?e[0]:t.reduce(((t,n,s)=>t+(e=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw Error("Value passed to 'css' function must be a 'css' function result: "+e+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(n)+e[s+1]),e[0]);return new h(n,e,u)},_=a?e=>e:e=>e instanceof CSSStyleSheet?(e=>{let t="";for(const n of e.cssRules)t+=n.cssText;return(e=>new h("string"==typeof e?e:e+"",void 0,u))(t)})(e):e;var p;const m=window,f=m.trustedTypes,g=f?f.emptyScript:"",T=m.reactiveElementPolyfillSupport,v={toAttribute(e,t){switch(t){case Boolean:e=e?g:null;break;case Object:case Array:e=null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){let n=e;switch(t){case Boolean:n=null!==e;break;case Number:n=null===e?null:Number(e);break;case Object:case Array:try{n=JSON.parse(e)}catch(e){n=null}}return n}},C=(e,t)=>t!==e&&(t==t||e==e),E={attribute:!0,type:String,converter:v,reflect:!1,hasChanged:C},S="finalized";class A extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this._$Eu()}static addInitializer(e){var t;this.finalize(),(null!==(t=this.h)&&void 0!==t?t:this.h=[]).push(e)}static get observedAttributes(){this.finalize();const e=[];return this.elementProperties.forEach(((t,n)=>{const s=this._$Ep(n,t);void 0!==s&&(this._$Ev.set(s,n),e.push(s))})),e}static createProperty(e,t=E){if(t.state&&(t.attribute=!1),this.finalize(),this.elementProperties.set(e,t),!t.noAccessor&&!this.prototype.hasOwnProperty(e)){const n="symbol"==typeof e?Symbol():"__"+e,s=this.getPropertyDescriptor(e,n,t);void 0!==s&&Object.defineProperty(this.prototype,e,s)}}static getPropertyDescriptor(e,t,n){return{get(){return this[t]},set(s){const r=this[e];this[t]=s,this.requestUpdate(e,r,n)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this.elementProperties.get(e)||E}static finalize(){if(this.hasOwnProperty(S))return!1;this[S]=!0;const e=Object.getPrototypeOf(this);if(e.finalize(),void 0!==e.h&&(this.h=[...e.h]),this.elementProperties=new Map(e.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const e=this.properties,t=[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)];for(const n of t)this.createProperty(n,e[n])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(e){const t=[];if(Array.isArray(e)){const n=new Set(e.flat(1/0).reverse());for(const e of n)t.unshift(_(e))}else void 0!==e&&t.push(_(e));return t}static _$Ep(e,t){const n=t.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof e?e.toLowerCase():void 0}_$Eu(){var e;this._$E_=new Promise((e=>this.enableUpdating=e)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(e=this.constructor.h)||void 0===e||e.forEach((e=>e(this)))}addController(e){var t,n;(null!==(t=this._$ES)&&void 0!==t?t:this._$ES=[]).push(e),void 0!==this.renderRoot&&this.isConnected&&(null===(n=e.hostConnected)||void 0===n||n.call(e))}removeController(e){var t;null===(t=this._$ES)||void 0===t||t.splice(this._$ES.indexOf(e)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((e,t)=>{this.hasOwnProperty(t)&&(this._$Ei.set(t,this[t]),delete this[t])}))}createRenderRoot(){var e;const t=null!==(e=this.shadowRoot)&&void 0!==e?e:this.attachShadow(this.constructor.shadowRootOptions);return((e,t)=>{a?e.adoptedStyleSheets=t.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet)):t.forEach((t=>{const n=document.createElement("style"),s=o.litNonce;void 0!==s&&n.setAttribute("nonce",s),n.textContent=t.cssText,e.appendChild(n)}))})(t,this.constructor.elementStyles),t}connectedCallback(){var e;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostConnected)||void 0===t?void 0:t.call(e)}))}enableUpdating(e){}disconnectedCallback(){var e;null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostDisconnected)||void 0===t?void 0:t.call(e)}))}attributeChangedCallback(e,t,n){this._$AK(e,n)}_$EO(e,t,n=E){var s;const r=this.constructor._$Ep(e,n);if(void 0!==r&&!0===n.reflect){const i=(void 0!==(null===(s=n.converter)||void 0===s?void 0:s.toAttribute)?n.converter:v).toAttribute(t,n.type);this._$El=e,null==i?this.removeAttribute(r):this.setAttribute(r,i),this._$El=null}}_$AK(e,t){var n;const s=this.constructor,r=s._$Ev.get(e);if(void 0!==r&&this._$El!==r){const e=s.getPropertyOptions(r),i="function"==typeof e.converter?{fromAttribute:e.converter}:void 0!==(null===(n=e.converter)||void 0===n?void 0:n.fromAttribute)?e.converter:v;this._$El=r,this[r]=i.fromAttribute(t,e.type),this._$El=null}}requestUpdate(e,t,n){let s=!0;void 0!==e&&(((n=n||this.constructor.getPropertyOptions(e)).hasChanged||C)(this[e],t)?(this._$AL.has(e)||this._$AL.set(e,t),!0===n.reflect&&this._$El!==e&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(e,n))):s=!1),!this.isUpdatePending&&s&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(e){Promise.reject(e)}const e=this.scheduleUpdate();return null!=e&&await e,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var e;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((e,t)=>this[t]=e)),this._$Ei=void 0);let t=!1;const n=this._$AL;try{t=this.shouldUpdate(n),t?(this.willUpdate(n),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostUpdate)||void 0===t?void 0:t.call(e)})),this.update(n)):this._$Ek()}catch(e){throw t=!1,this._$Ek(),e}t&&this._$AE(n)}willUpdate(e){}_$AE(e){var t;null===(t=this._$ES)||void 0===t||t.forEach((e=>{var t;return null===(t=e.hostUpdated)||void 0===t?void 0:t.call(e)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(e)),this.updated(e)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(e){return!0}update(e){void 0!==this._$EC&&(this._$EC.forEach(((e,t)=>this._$EO(t,this[t],e))),this._$EC=void 0),this._$Ek()}updated(e){}firstUpdated(e){}}var b;A[S]=!0,A.elementProperties=new Map,A.elementStyles=[],A.shadowRootOptions={mode:"open"},null==T||T({ReactiveElement:A}),(null!==(p=m.reactiveElementVersions)&&void 0!==p?p:m.reactiveElementVersions=[]).push("1.6.3");const y=window,w=y.trustedTypes,R=w?w.createPolicy("lit-html",{createHTML:e=>e}):void 0,I="$lit$",O=`lit$${(Math.random()+"").slice(9)}$`,N="?"+O,$=`<${N}>`,x=document,U=()=>x.createComment(""),D=e=>null===e||"object"!=typeof e&&"function"!=typeof e,P=Array.isArray,M="[ \t\n\f\r]",L=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,q=/-->/g,k=/>/g,H=RegExp(`>|${M}(?:([^\\s"'>=/]+)(${M}*=${M}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),F=/'/g,j=/"/g,V=/^(?:script|style|textarea|title)$/i,G=e=>(t,...n)=>({_$litType$:e,strings:t,values:n}),B=G(1),z=(G(2),Symbol.for("lit-noChange")),W=Symbol.for("lit-nothing"),K=new WeakMap,Y=x.createTreeWalker(x,129,null,!1);function J(e,t){if(!Array.isArray(e)||!e.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==R?R.createHTML(t):t}const X=(e,t)=>{const n=e.length-1,s=[];let r,i=2===t?"<svg>":"",l=L;for(let t=0;t<n;t++){const n=e[t];let o,a,u=-1,c=0;for(;c<n.length&&(l.lastIndex=c,a=l.exec(n),null!==a);)c=l.lastIndex,l===L?"!--"===a[1]?l=q:void 0!==a[1]?l=k:void 0!==a[2]?(V.test(a[2])&&(r=RegExp("</"+a[2],"g")),l=H):void 0!==a[3]&&(l=H):l===H?">"===a[0]?(l=null!=r?r:L,u=-1):void 0===a[1]?u=-2:(u=l.lastIndex-a[2].length,o=a[1],l=void 0===a[3]?H:'"'===a[3]?j:F):l===j||l===F?l=H:l===q||l===k?l=L:(l=H,r=void 0);const h=l===H&&e[t+1].startsWith("/>")?" ":"";i+=l===L?n+$:u>=0?(s.push(o),n.slice(0,u)+I+n.slice(u)+O+h):n+O+(-2===u?(s.push(void 0),t):h)}return[J(e,i+(e[n]||"<?>")+(2===t?"</svg>":"")),s]};class Q{constructor({strings:e,_$litType$:t},n){let s;this.parts=[];let r=0,i=0;const l=e.length-1,o=this.parts,[a,u]=X(e,t);if(this.el=Q.createElement(a,n),Y.currentNode=this.el.content,2===t){const e=this.el.content,t=e.firstChild;t.remove(),e.append(...t.childNodes)}for(;null!==(s=Y.nextNode())&&o.length<l;){if(1===s.nodeType){if(s.hasAttributes()){const e=[];for(const t of s.getAttributeNames())if(t.endsWith(I)||t.startsWith(O)){const n=u[i++];if(e.push(t),void 0!==n){const e=s.getAttribute(n.toLowerCase()+I).split(O),t=/([.?@])?(.*)/.exec(n);o.push({type:1,index:r,name:t[2],strings:e,ctor:"."===t[1]?se:"?"===t[1]?ie:"@"===t[1]?le:ne})}else o.push({type:6,index:r})}for(const t of e)s.removeAttribute(t)}if(V.test(s.tagName)){const e=s.textContent.split(O),t=e.length-1;if(t>0){s.textContent=w?w.emptyScript:"";for(let n=0;n<t;n++)s.append(e[n],U()),Y.nextNode(),o.push({type:2,index:++r});s.append(e[t],U())}}}else if(8===s.nodeType)if(s.data===N)o.push({type:2,index:r});else{let e=-1;for(;-1!==(e=s.data.indexOf(O,e+1));)o.push({type:7,index:r}),e+=O.length-1}r++}}static createElement(e,t){const n=x.createElement("template");return n.innerHTML=e,n}}function Z(e,t,n=e,s){var r,i,l,o;if(t===z)return t;let a=void 0!==s?null===(r=n._$Co)||void 0===r?void 0:r[s]:n._$Cl;const u=D(t)?void 0:t._$litDirective$;return(null==a?void 0:a.constructor)!==u&&(null===(i=null==a?void 0:a._$AO)||void 0===i||i.call(a,!1),void 0===u?a=void 0:(a=new u(e),a._$AT(e,n,s)),void 0!==s?(null!==(l=(o=n)._$Co)&&void 0!==l?l:o._$Co=[])[s]=a:n._$Cl=a),void 0!==a&&(t=Z(e,a._$AS(e,t.values),a,s)),t}class ee{constructor(e,t){this._$AV=[],this._$AN=void 0,this._$AD=e,this._$AM=t}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(e){var t;const{el:{content:n},parts:s}=this._$AD,r=(null!==(t=null==e?void 0:e.creationScope)&&void 0!==t?t:x).importNode(n,!0);Y.currentNode=r;let i=Y.nextNode(),l=0,o=0,a=s[0];for(;void 0!==a;){if(l===a.index){let t;2===a.type?t=new te(i,i.nextSibling,this,e):1===a.type?t=new a.ctor(i,a.name,a.strings,this,e):6===a.type&&(t=new oe(i,this,e)),this._$AV.push(t),a=s[++o]}l!==(null==a?void 0:a.index)&&(i=Y.nextNode(),l++)}return Y.currentNode=x,r}v(e){let t=0;for(const n of this._$AV)void 0!==n&&(void 0!==n.strings?(n._$AI(e,n,t),t+=n.strings.length-2):n._$AI(e[t])),t++}}class te{constructor(e,t,n,s){var r;this.type=2,this._$AH=W,this._$AN=void 0,this._$AA=e,this._$AB=t,this._$AM=n,this.options=s,this._$Cp=null===(r=null==s?void 0:s.isConnected)||void 0===r||r}get _$AU(){var e,t;return null!==(t=null===(e=this._$AM)||void 0===e?void 0:e._$AU)&&void 0!==t?t:this._$Cp}get parentNode(){let e=this._$AA.parentNode;const t=this._$AM;return void 0!==t&&11===(null==e?void 0:e.nodeType)&&(e=t.parentNode),e}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(e,t=this){e=Z(this,e,t),D(e)?e===W||null==e||""===e?(this._$AH!==W&&this._$AR(),this._$AH=W):e!==this._$AH&&e!==z&&this._(e):void 0!==e._$litType$?this.g(e):void 0!==e.nodeType?this.$(e):(e=>P(e)||"function"==typeof(null==e?void 0:e[Symbol.iterator]))(e)?this.T(e):this._(e)}k(e){return this._$AA.parentNode.insertBefore(e,this._$AB)}$(e){this._$AH!==e&&(this._$AR(),this._$AH=this.k(e))}_(e){this._$AH!==W&&D(this._$AH)?this._$AA.nextSibling.data=e:this.$(x.createTextNode(e)),this._$AH=e}g(e){var t;const{values:n,_$litType$:s}=e,r="number"==typeof s?this._$AC(e):(void 0===s.el&&(s.el=Q.createElement(J(s.h,s.h[0]),this.options)),s);if((null===(t=this._$AH)||void 0===t?void 0:t._$AD)===r)this._$AH.v(n);else{const e=new ee(r,this),t=e.u(this.options);e.v(n),this.$(t),this._$AH=e}}_$AC(e){let t=K.get(e.strings);return void 0===t&&K.set(e.strings,t=new Q(e)),t}T(e){P(this._$AH)||(this._$AH=[],this._$AR());const t=this._$AH;let n,s=0;for(const r of e)s===t.length?t.push(n=new te(this.k(U()),this.k(U()),this,this.options)):n=t[s],n._$AI(r),s++;s<t.length&&(this._$AR(n&&n._$AB.nextSibling,s),t.length=s)}_$AR(e=this._$AA.nextSibling,t){var n;for(null===(n=this._$AP)||void 0===n||n.call(this,!1,!0,t);e&&e!==this._$AB;){const t=e.nextSibling;e.remove(),e=t}}setConnected(e){var t;void 0===this._$AM&&(this._$Cp=e,null===(t=this._$AP)||void 0===t||t.call(this,e))}}class ne{constructor(e,t,n,s,r){this.type=1,this._$AH=W,this._$AN=void 0,this.element=e,this.name=t,this._$AM=s,this.options=r,n.length>2||""!==n[0]||""!==n[1]?(this._$AH=Array(n.length-1).fill(new String),this.strings=n):this._$AH=W}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(e,t=this,n,s){const r=this.strings;let i=!1;if(void 0===r)e=Z(this,e,t,0),i=!D(e)||e!==this._$AH&&e!==z,i&&(this._$AH=e);else{const s=e;let l,o;for(e=r[0],l=0;l<r.length-1;l++)o=Z(this,s[n+l],t,l),o===z&&(o=this._$AH[l]),i||(i=!D(o)||o!==this._$AH[l]),o===W?e=W:e!==W&&(e+=(null!=o?o:"")+r[l+1]),this._$AH[l]=o}i&&!s&&this.j(e)}j(e){e===W?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=e?e:"")}}class se extends ne{constructor(){super(...arguments),this.type=3}j(e){this.element[this.name]=e===W?void 0:e}}const re=w?w.emptyScript:"";class ie extends ne{constructor(){super(...arguments),this.type=4}j(e){e&&e!==W?this.element.setAttribute(this.name,re):this.element.removeAttribute(this.name)}}class le extends ne{constructor(e,t,n,s,r){super(e,t,n,s,r),this.type=5}_$AI(e,t=this){var n;if((e=null!==(n=Z(this,e,t,0))&&void 0!==n?n:W)===z)return;const s=this._$AH,r=e===W&&s!==W||e.capture!==s.capture||e.once!==s.once||e.passive!==s.passive,i=e!==W&&(s===W||r);r&&this.element.removeEventListener(this.name,this,s),i&&this.element.addEventListener(this.name,this,e),this._$AH=e}handleEvent(e){var t,n;"function"==typeof this._$AH?this._$AH.call(null!==(n=null===(t=this.options)||void 0===t?void 0:t.host)&&void 0!==n?n:this.element,e):this._$AH.handleEvent(e)}}class oe{constructor(e,t,n){this.element=e,this.type=6,this._$AN=void 0,this._$AM=t,this.options=n}get _$AU(){return this._$AM._$AU}_$AI(e){Z(this,e)}}const ae=y.litHtmlPolyfillSupport;var ue,ce;null==ae||ae(Q,te),(null!==(b=y.litHtmlVersions)&&void 0!==b?b:y.litHtmlVersions=[]).push("2.8.0");class he extends A{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var e,t;const n=super.createRenderRoot();return null!==(e=(t=this.renderOptions).renderBefore)&&void 0!==e||(t.renderBefore=n.firstChild),n}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this._$Do=((e,t,n)=>{var s,r;const i=null!==(s=null==n?void 0:n.renderBefore)&&void 0!==s?s:t;let l=i._$litPart$;if(void 0===l){const e=null!==(r=null==n?void 0:n.renderBefore)&&void 0!==r?r:null;i._$litPart$=l=new te(t.insertBefore(U(),e),e,void 0,null!=n?n:{})}return l._$AI(e),l})(t,this.renderRoot,this.renderOptions)}connectedCallback(){var e;super.connectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!0)}disconnectedCallback(){var e;super.disconnectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!1)}render(){return z}}he.finalized=!0,he._$litElement$=!0,null===(ue=globalThis.litElementHydrateSupport)||void 0===ue||ue.call(globalThis,{LitElement:he});const de=globalThis.litElementPolyfillSupport;null==de||de({LitElement:he}),(null!==(ce=globalThis.litElementVersions)&&void 0!==ce?ce:globalThis.litElementVersions=[]).push("3.3.3");const _e=e=>t=>"function"==typeof t?((e,t)=>(customElements.define(e,t),t))(e,t):((e,t)=>{const{kind:n,elements:s}=t;return{kind:n,elements:s,finisher(t){customElements.define(e,t)}}})(e,t),pe=(e,t)=>"method"===t.kind&&t.descriptor&&!("value"in t.descriptor)?{...t,finisher(n){n.createProperty(t.key,e)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:t.key,initializer(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher(n){n.createProperty(t.key,e)}};function me(e){return(t,n)=>void 0!==n?((e,t,n)=>{t.constructor.createProperty(n,e)})(e,t,n):pe(e,t)}function fe(e){return me({...e,state:!0})}var ge,Te;null===(ge=window.HTMLSlotElement)||void 0===ge||ge.prototype.assignedElements;class ve{shouldStop=!1;audioContext;analyser;renderRoot;visualValueCount;visualMainElement;visualElements;constructor(e,t,n=16){this.shouldStop=!1,this.renderRoot=e,this.visualValueCount=n,this.visualMainElement=this.renderRoot.querySelector("#audioVisualizer"),this.audioContext=new AudioContext,this.initDOM(),this.analyser=this.audioContext.createAnalyser(),this.connectStream(t)}stop(){this.shouldStop=!0}initDOM(){if(this.visualMainElement){let e;for(this.visualMainElement.innerHTML="",e=0;e<this.visualValueCount;++e){const e=document.createElement("div");this.visualMainElement.appendChild(e)}this.visualElements=this.renderRoot.querySelectorAll("#audioVisualizer div")}}processFrame(e){const t={0:15,1:10,2:8,3:9,4:6,5:5,6:2,7:1,8:0,9:4,10:3,11:7,12:11,13:12,14:13,15:14};let n;for(n=0;n<this.visualValueCount;++n){const s=e[t[n]]/255,r=this.visualElements[n].style;r.transform=`scaleY(${s})`,r.opacity=Math.max(.25,s).toString()}}connectStream(e){this.audioContext.createMediaStreamSource(e).connect(this.analyser),this.analyser.smoothingTimeConstant=.5,this.analyser.fftSize=32,this.initRenderLoop()}initRenderLoop(){const e=new Uint8Array(this.analyser.frequencyBinCount),t=()=>{this.analyser?.getByteFrequencyData(e),this.processFrame(e),!0!==this.shouldStop&&requestAnimationFrame(t)};requestAnimationFrame(t)}}!function(e){e[e.SERVICE_CALL=0]="SERVICE_CALL",e[e.DTMF=1]="DTMF"}(Te||(Te={}));let Ce=class extends he{open=!1;configuratorOpen=!1;outputDevices=[];inputDevices=[];hass=i.hass;config=i.config.popup_config;audioVisualizer;constructor(){super(),this.setupButton(),this.openPopup=this.openPopup.bind(this),this.closePopup=this.closePopup.bind(this)}static get styles(){return d`
            ha-icon[slot="meta"] {
                width: 18px;
                height: 18px;
            }

            ha-icon {
                display: flex;
                align-items: center;
                justify-content: center;
            }

            #audioVisualizer {
                min-height: 10em;
                white-space: nowrap;
                align-items: center;
                display: flex;
                justify-content: center;
                padding-top: 2em;
            }

            #audioVisualizer div {
                display: inline-block;
                width: 3px;
                height: 100px;
                margin: 0 7px;
                background: currentColor;
                transform: scaleY( .5 );
                opacity: .25;
            }

            ha-dialog {
                --dialog-content-padding: 0;
                --mdc-dialog-min-width: 600px;
            }

            ha-dialog[large] {
                --dialog-content-padding: 0;
                --mdc-dialog-min-width: 90vw;
                --mdc-dialog-max-width: 90vw;
                --mdc-dialog-max-height: 90vh;
            }

            ha-camera-stream {
                height: 100%;
                width: 100%;
                display: block;
            }

            #remoteVideo {
                height: 100%;
                width: 100%;
            }

            @media (max-width: 600px), (max-height: 600px) {
                ha-dialog {
                  --dialog-surface-margin-top: 0px;
                  --mdc-dialog-min-width: calc( 100vw - env(safe-area-inset-right) - env(safe-area-inset-left) );
                  --mdc-dialog-max-width: calc( 100vw - env(safe-area-inset-right) - env(safe-area-inset-left) );
                  --mdc-dialog-min-height: 100%;
                  --mdc-dialog-max-height: 100%;
                  --vertical-align-dialog: flex-end;
                  --ha-dialog-border-radius: 0;
                }
            }

            .accept-button {
                color: var(--label-badge-green);
            }

            .deny-button {
                color: var(--label-badge-red);
            }

            .deny-button, .accept-button, .audio-button {
                --mdc-icon-button-size: 64px;
                --mdc-icon-size: 32px;
            }

            .row {
                display: flex;
                flex-direction: row;
                justify-content: space-between;
            }

            .bottom-row {
                display: flex;
                justify-content: space-between;
                padding: 12px 16px;
                border-top: 1px solid var(--divider-color);
            }

            .content {
                display: flex;
                justify-content: center;
                align-items: center;
                min-height: 300px;
                width: 100%;
            }

            .form {
                display: flex;
                flex-direction: column;
                padding: 16px;
            }

            ha-select {
                margin: 8px 0;
            }
        `}updateHandler=e=>{if(this.requestUpdate(),null!==i.remoteVideoStream){const e=this.renderRoot.querySelector("#remoteVideo");e&&e.srcObject!==i.remoteVideoStream&&(e.srcObject=i.remoteVideoStream,e.play())}else{const e=this.renderRoot.querySelector("#remoteVideo");e&&(e.srcObject=null,e.pause())}};connectedCallback(){super.connectedCallback(),window.addEventListener("sipcore-update",this.updateHandler),!1!==this.config.auto_open?(window.addEventListener("sipcore-call-started",this.openPopup),window.addEventListener("sipcore-call-ended",this.closePopup)):(window.addEventListener("sipcore-call-started",this.updateHandler),window.addEventListener("sipcore-call-ended",this.updateHandler))}disconnectedCallback(){super.disconnectedCallback(),window.removeEventListener("sipcore-update",this.updateHandler),!1!==this.config.auto_open?(window.removeEventListener("sipcore-call-started",this.openPopup),window.removeEventListener("sipcore-call-ended",this.closePopup)):(window.removeEventListener("sipcore-call-started",this.updateHandler),window.removeEventListener("sipcore-call-ended",this.updateHandler))}openPopup(){this.open=!0,this.requestUpdate()}closePopup(){this.open=!1,this.requestUpdate()}render(){let e,t,n="",r=this.config?.extensions[i.remoteExtension||""]?.name||i.remoteName;switch(i.callState){case s.IDLE:e="No active call",t="mdi:phone";break;case s.INCOMING:e="Incoming call from "+r,t="mdi:phone-incoming";break;case s.OUTGOING:e="Outgoing call to "+r,t="mdi:phone-outgoing";break;case s.CONNECTED:e="Connected to "+r,t="mdi:phone-in-talk";break;case s.CONNECTING:e="Connecting to "+r,t="mdi:phone";break;default:e="Unknown call state",t="mdi:phone"}return i.callState!==s.IDLE&&null!==i.remoteExtension&&null===i.remoteVideoStream&&(n=this.config.extensions[i.remoteExtension]?.camera_entity||"",n||(null!==i.remoteAudioStream?void 0===this.audioVisualizer&&(this.audioVisualizer=new ve(this.renderRoot,i.remoteAudioStream,16)):this.audioVisualizer=void 0)),B`
            <ha-dialog ?open=${this.configuratorOpen} @closed=${()=>{this.configuratorOpen=!1,this.open||this.closePopup()}} hideActions flexContent .heading=${!0} data-domain="camera" ?large=${this.config.large}>
                <ha-dialog-header slot="heading">
                    <ha-icon-button-prev
                        slot="navigationIcon"
                        @click=${()=>{this.configuratorOpen=!1,this.openPopup()}}>
                    </ha-icon-button-prev>
                    <span slot="title" .title="Call">SIP Call Settings</span>
                </ha-dialog-header>
                <div tabindex="-1" dialogInitialFocus class="form">
                    <ha-select
                        naturalMenuWidth
                        fixedMenuPosition
                        icon
                        label=${"Audio Output"}
                        .value="${i.currentAudioOutputId}"
                        @selected=${this.handleAudioOutputChange}
                        @closed="${e=>e.stopPropagation()}">
                        ${this.outputDevices.map((e=>B`
                            <ha-list-item
                                graphic="icon"
                                .value="${e.deviceId}"
                                ?selected=${i.currentAudioOutputId===e.deviceId}>
                                ${e.label}
                                <ha-icon slot="graphic" .icon=${"mdi:headphones"}></ha-icon>
                            </ha-list-item>
                        `))}
                        <ha-icon slot="icon" .icon=${"mdi:headphones"}></ha-icon>
                    </ha-select>
                    <ha-select
                        naturalMenuWidth
                        fixedMenuPosition
                        icon
                        label=${"Audio Input"}
                        .value="${i.currentAudioInputId}"
                        @selected=${this.handleAudioInputChange}
                        @closed="${e=>e.stopPropagation()}">
                        ${this.inputDevices.map((e=>B`
                            <ha-list-item
                                graphic="icon"
                                .value="${e.deviceId}"
                                ?selected=${i.currentAudioInputId===e.deviceId}>
                                ${e.label}
                                <ha-icon slot="graphic" .icon=${"mdi:microphone"}></ha-icon>
                            </ha-list-item>
                        `))}
                        <ha-icon slot="icon" .icon=${"mdi:microphone"}></ha-icon>
                    </ha-select>
                    <ha-settings-row>
                        <span slot="heading">Logged in as ${i.user.ha_username} <span style="color: gray;">(${i.user.extension})</span></span>
                        <span slot="description">The current user used to log in to the SIP server. You can configure users in the sip-config.json file</span> 
                    </ha-settings-row>
                    <ha-settings-row>
                        <span slot="heading">Is ${i.registered?"registered":"not registered"} <span style="color: gray;">(${i.registered?"true":"false"})</span></span>
                        <span slot="description">The current registration status of the SIP client. If not registered, check browser console and Asterisk logs for more information</span>
                    </ha-settings-row>
                    <ha-settings-row>
                        <span slot="heading">Call state is ${i.callState}</span>
                        <span slot="description">The current call state of the SIP client</span>
                    </ha-settings-row>
                    <ha-settings-row>
                        <span slot="heading">SIP-Core <span style="color: gray;">v${i.version}</span></span>
                        <span slot="description">The main SIP call system, created by Jordy Kuhne</span> 
                    </ha-settings-row>
                </div>
            </ha-dialog>

            <ha-dialog ?open=${this.open} @closed=${this.closePopup} hideActions flexContent .heading=${!0} data-domain="camera" ?large=${this.config.large}>
                <ha-dialog-header slot="heading">
                    <ha-icon-button
                        dialogAction="cancel"
                        slot="navigationIcon"
                        label="Close">
                        <ha-icon .icon=${"mdi:close"}></ha-icon>
                    </ha-icon-button>
                    <div slot="title" class="row">
                        <span>${e}</span>
                        <span style="color: gray;">${i.callDuration}</span>
                    </div>
                    <ha-icon-button
                        dialogAction="settings"
                        slot="actionItems"
                        label="Settings"
                        @click="${()=>{this.configuratorOpen=!0,this.requestUpdate()}}">
                        <ha-icon .icon=${"mdi:cog-outline"}></ha-icon>
                    </ha-icon-button>
                    <ha-button-menu
                        corner="BOTTOM_END"
                        menucorner="END"
                        slot="actionItems"
                        fixed
                        @closed="${e=>e.stopPropagation()}"
                    >
                        <ha-icon-button
                            slot="trigger"
                            label="More">
                            <ha-icon .icon=${"mdi:dots-vertical"}></ha-icon>
                        </ha-icon-button>
                        <ha-list-item
                            graphic="icon"
                            hasmeta
                            @click="${()=>{window.open("https://tech7fox.github.io/sip-hass-docs","_blank")}}">
                            Documentation
                            <ha-icon slot="graphic" .icon=${"mdi:bookshelf"}></ha-icon>
                            <ha-icon slot="meta" .icon=${"mdi:open-in-new"}></ha-icon>
                        </ha-list-item>
                        <ha-list-item
                            graphic="icon"
                            hasmeta
                            @click="${()=>{window.open("https://github.com/TECH7Fox/sip-hass-card","_blank")}}">
                            Github
                            <ha-icon slot="graphic" .icon=${"mdi:github"}></ha-icon>
                            <ha-icon slot="meta" .icon=${"mdi:open-in-new"}></ha-icon>
                        </ha-list-item>
                    </ha-button-menu>
                </ha-dialog-header>
                <div tabindex="-1" dialogInitialFocus>
                    <div class="content">
                        <div id="audioVisualizer" style="display: ${i.callState===s.IDLE||n||null!==i.remoteVideoStream?"none":"block"}"></div>
                        <video poster="noposter" style="display: ${null===i.remoteVideoStream?"none":"block"}" playsinline id="remoteVideo"></video>
                        ${i.callState===s.IDLE?B`
                            <div>
                                <span>No active call</span>
                            </div>
                        `:n?B`
                            <ha-camera-stream
                                allow-exoplayer
                                muted
                                .hass=${this.hass}
                                .stateObj=${this.hass.states[n]}
                            ></ha-camera-stream>
                        `:""}
                    </div>
                    <div class="bottom-row">
                        <ha-icon-button
                            class="accept-button"
                            label="Answer call"
                            @click="${()=>i.answerCall()}">
                            <ha-icon .icon=${t}></ha-icon>
                        </ha-icon-button>
                        <div>
                            ${this.config.buttons.map((e=>e.type===Te.SERVICE_CALL?B`
                                        <ha-icon-button
                                            class="audio-button"
                                            label="${e.label}"
                                            @click="${()=>{const{domain:t,service:n,...s}=e.data;this.hass.callService(t,n,s)}}">
                                            <ha-icon .icon=${e.icon}></ha-icon>
                                        </ha-icon-button>
                                    `:e.type===Te.DTMF?B`
                                        <ha-icon-button
                                            class="audio-button"
                                            label="${e.label}"
                                            @click="${()=>{i.RTCSession?.sendDTMF(e.data)}}">
                                            <ha-icon .icon=${e.icon}></ha-icon>
                                        </ha-icon-button>
                                    `:void 0))}
                        </div>
                        <div>
                            <ha-icon-button
                                class="audio-button"
                                label="Mute audio"
                                ?disabled="${null===i.RTCSession}"
                                @click="${()=>{i.RTCSession?.isMuted().audio?i.RTCSession?.unmute({audio:!0}):i.RTCSession?.mute({audio:!0}),this.requestUpdate()}}">
                                <ha-icon
                                    .icon="${null!==i.RTCSession&&i.RTCSession?.isMuted().audio?"mdi:microphone-off":"mdi:microphone"}"
                                </ha-icon>
                            </ha-icon-button>
                            <ha-icon-button
                                class="audio-button"
                                label="Mute video"
                                style="display: ${i.config.sip_video?"block":"none"}"
                                ?disabled="${null===i.RTCSession}"
                                @click="${()=>{i.RTCSession?.isMuted().video?i.RTCSession?.unmute({video:!0}):i.RTCSession?.mute({video:!0}),this.requestUpdate()}}">
                                <ha-icon
                                    .icon="${null!==i.RTCSession&&i.RTCSession?.isMuted().video?"mdi:video-off":"mdi:video"}"
                                ></ha-icon>
                            </ha-icon-button>
                        </div>
                        <ha-icon-button
                            class="deny-button"
                            label="End call"
                            @click="${()=>{i.endCall(),this.closePopup()}}">
                            <ha-icon .icon=${"mdi:phone-off"}></ha-icon>
                        </ha-icon-button>
                    </div>
                </div>
            </ha-dialog>
        `}async firstUpdated(){this.outputDevices=await i.getAudioDevices(r.OUTPUT),this.inputDevices=await i.getAudioDevices(r.INPUT)}handleAudioInputChange(e){const t=e.target.value;i.setAudioDevice(t,r.INPUT),this.requestUpdate()}handleAudioOutputChange(e){const t=e.target.value;i.setAudioDevice(t,r.OUTPUT),this.requestUpdate()}setupButton(){const e=document.getElementsByTagName("home-assistant")[0],t=e?.shadowRoot?.querySelector("home-assistant-main")?.shadowRoot?.querySelector("ha-panel-lovelace");if(null===t)return void console.debug("panel not found!");const n=t?.shadowRoot?.querySelector("hui-root")?.shadowRoot?.querySelector(".action-items");if(n?.querySelector("#sipcore-call-button"))return;const s=document.createElement("ha-icon-button");s.label="Open Call Popup";const r=document.createElement("ha-icon");r.style="display: flex; align-items: center; justify-content: center;",r.icon="mdi:phone",s.slot="actionItems",s.id="sipcore-call-button",s.appendChild(r),s.addEventListener("click",(()=>{this.open=!0,this.requestUpdate()})),n?.appendChild(s),window.addEventListener("location-changed",(()=>{console.debug("View changed, setting up button again..."),this.setupButton()}))}};var Ee;l([me()],Ce.prototype,"open",void 0),l([me()],Ce.prototype,"configuratorOpen",void 0),l([fe()],Ce.prototype,"outputDevices",void 0),l([fe()],Ce.prototype,"inputDevices",void 0),l([me()],Ce.prototype,"hass",void 0),l([me()],Ce.prototype,"config",void 0),l([fe()],Ce.prototype,"audioVisualizer",void 0),Ce=l([_e("sip-call-dialog")],Ce),function(e){e[e.SERVICE_CALL=0]="SERVICE_CALL",e[e.DTMF=1]="DTMF"}(Ee||(Ee={}));let Se=class extends he{hass=i.hass;config;audioVisualizer;setConfig(e){this.config=e}static getStubConfig(){return{extensions:{100:{name:"John Doe"},101:{name:"Joe Smith"},102:{name:"Doorbell",override_icon:"mdi:doorbell"}},buttons:[]}}static get styles(){return d`
            ha-card {
                overflow: hidden;
                position: relative;
                height: 100%;
            }

            hui-image {
                width: 100%;
                height: auto;
            }

            #remoteVideo {
                width: 100%;
                height: auto;
            }

            ha-icon {
                display: flex;
                align-items: center;
                justify-content: center;
            }

            #audioVisualizer {
                min-height: 230px;
                white-space: nowrap;
                align-items: center;
                display: flex;
                justify-content: center;
            }

            #audioVisualizer div {
                display: inline-block;
                width: 3px;
                height: 100px;
                margin: 0 7px;
                background: currentColor;
                transform: scaleY( .5 );
                opacity: .25;
            }

            .placeholder {
                display: flex;
                justify-content: center;
                align-items: center;
                height: 100%;
                background-color: var(--secondary-background-color);
                color: var(--primary-text-color);
                min-height: 230px;
            }

            .footer {
                position: absolute;
                left: 0px;
                right: 0px;
                bottom: 0px;
                background-color: var(--ha-picture-card-background-color,rgba(0,0,0,.3));
                padding: 4px 8px;
                font-size: 16px;
                color: var(--ha-picture-card-text-color,#fff);
                --mdc-icon-button-size: 40px;
            }

            .footer > div {
                display: flex;
            }

            .both {
                display: flex;
                justify-content: space-between;
            }

            .footer span {
                align-self: center;
                margin: 0 8px;
            }

            .footer[large] {
                font-size: 24px;
                --mdc-icon-button-size: 68px;
                --mdc-icon-size: 42px;
                padding: 14px 
            }

            .footer[large] span {
                margin: 0 16px;
            }
        `}updateHandler=e=>{if(this.requestUpdate(),null!==i.remoteVideoStream){const e=this.renderRoot.querySelector("#remoteVideo");e&&e.srcObject!==i.remoteVideoStream&&(e.srcObject=i.remoteVideoStream,e.play())}else{const e=this.renderRoot.querySelector("#remoteVideo");e&&(e.srcObject=null,e.pause())}};connectedCallback(){super.connectedCallback(),window.addEventListener("sipcore-update",this.updateHandler)}disconnectedCallback(){super.disconnectedCallback(),window.removeEventListener("sipcore-update",this.updateHandler)}render(){let e,t,n="",r=this.config?.extensions[i.remoteExtension||""]?.name||i.remoteName;switch(i.callState){case s.IDLE:e="No active call",t="mdi:phone";break;case s.INCOMING:e="Incoming call from "+r,t="mdi:phone-incoming";break;case s.OUTGOING:e="Outgoing call to "+r,t="mdi:phone-outgoing";break;case s.CONNECTED:e="Connected to "+r,t="mdi:phone-in-talk";break;case s.CONNECTING:e="Connecting to "+r,t="mdi:phone";break;default:e="Unknown call state",t="mdi:phone"}return i.callState!==s.IDLE&&null!==i.remoteExtension&&null===i.remoteVideoStream&&(n=this.config?.extensions[i.remoteExtension]?.camera_entity||"",n||(null!==i.remoteAudioStream?void 0===this.audioVisualizer&&(this.audioVisualizer=new ve(this.renderRoot,i.remoteAudioStream,16)):this.audioVisualizer=void 0)),B`
            <ha-card>
                <div id="audioVisualizer" style="display: ${i.callState===s.IDLE||n||null!==i.remoteVideoStream?"none":"flex"}"></div>
                <video poster="noposter" style="display: ${null===i.remoteVideoStream?"none":"block"}" playsinline id="remoteVideo"></video>
                ${i.callState===s.IDLE?B`
                    <div class="placeholder">
                        <span>No active call</span>
                    </div>
                `:n?B`
                    <hui-image
                        tabindex="0"
                        .cameraImage=${n}
                        .hass=${this.hass}
                        .cameraView=${"live"}
                        .aspectRatio=${"16:9"}
                    ></hui-image>
                `:""}
                <div ?large=${this.config?.largeUI} class="footer both">
                    <div>
                        <ha-icon-button
                            style="color: var(--label-badge-green);"
                            label="Answer call"
                            @click="${()=>i.answerCall()}">
                            <ha-icon .icon=${t}></ha-icon>
                        </ha-icon-button>
                        <span>${e}</span>
                    </div>
                    <div>
                        ${this.config?.buttons.map((e=>e.type===Ee.SERVICE_CALL?B`
                                    <ha-icon-button
                                        class="audio-button"
                                        label="${e.label}"
                                        @click="${()=>{const{domain:t,service:n,...s}=e.data;this.hass.callService(t,n,s)}}">
                                        <ha-icon .icon=${e.icon}></ha-icon>
                                    </ha-icon-button>
                                `:e.type===Ee.DTMF?B`
                                    <ha-icon-button
                                        class="audio-button"
                                        label="${e.label}"
                                        @click="${()=>{i.RTCSession?.sendDTMF(e.data)}}">
                                        <ha-icon .icon=${e.icon}></ha-icon>
                                    </ha-icon-button>
                                `:void 0))}
                    </div>
                    <div>
                        <ha-icon-button
                            class="audio-button"
                            label="Mute audio"
                            ?disabled="${null===i.RTCSession}"
                            @click="${()=>{i.RTCSession?.isMuted().audio?i.RTCSession?.unmute({audio:!0}):i.RTCSession?.mute({audio:!0}),this.requestUpdate()}}">
                            <ha-icon
                                .icon="${null!==i.RTCSession&&i.RTCSession?.isMuted().audio?"mdi:microphone-off":"mdi:microphone"}"
                            </ha-icon>
                        </ha-icon-button>
                        <ha-icon-button
                            class="audio-button"
                            label="Mute video"
                            style="display: ${i.config.sip_video?"block":"none"}"
                            ?disabled="${null===i.RTCSession}"
                            @click="${()=>{i.RTCSession?.isMuted().video?i.RTCSession?.unmute({video:!0}):i.RTCSession?.mute({video:!0}),this.requestUpdate()}}">
                            <ha-icon
                                .icon="${null!==i.RTCSession&&i.RTCSession?.isMuted().video?"mdi:video-off":"mdi:video"}"
                            ></ha-icon>
                        </ha-icon-button>
                    </div>
                    <div>
                        <span style="color: gray">${i.callDuration}</span>
                        <ha-icon-button
                            style="color: var(--label-badge-red);"
                            label="End Call"
                            @click="${()=>i.endCall()}">
                            <ha-icon .icon=${"mdi:phone-off"}></ha-icon>
                        </ha-icon-button>
                    </div>
                </div>
            </ha-card>
        `}};l([me()],Se.prototype,"hass",void 0),l([me()],Se.prototype,"config",void 0),l([fe()],Se.prototype,"audioVisualizer",void 0),Se=l([_e("sip-call-card")],Se),window.customCards=window.customCards||[],window.customCards.push({type:"sip-call-card",name:"SIP Call Card",preview:!0,description:"Offical SIP Call Card"}),customElements.define("sip-contacts-card",class extends he{hass;config;static get styles(){return d`
            #audioVisualizer {
                min-height: 20em;
                height: 100%;
                white-space: nowrap;
                align-items: center;
                display: flex;
                justify-content: center;
            }

            #audioVisualizer div {
                display: inline-block;
                width: 3px;
                height: 100px;
                margin: 0 7px;
                background: currentColor;
                transform: scaleY( .5 );
                opacity: .25;
            }

            .wrapper {
                padding: 8px;
                padding-top: 0px;
                padding-bottom: 2px;
            }

            .flex {
                flex: 1;
                margin-top: 6px;
                margin-bottom: 6px;
                display: flex;
                justify-content: space-between;
                align-items: center;
                min-width: 0;
            }

            .info, .info > * {
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }

            .info {
                flex: 1 1 30%;
                cursor: pointer;
                margin-left: 16px;
                margin-right: 8px;
            }

            .editField {
                width: 100%;
                margin-left: 16px;
                margin-right: 8px;
            }

            state-badge {
                flex-shrink: 0;
            }
        `}connectedCallback(){super.connectedCallback(),window.addEventListener("sipcore-update",(()=>this.requestUpdate()))}disconnectedCallback(){super.disconnectedCallback(),window.removeEventListener("sipcore-update",(()=>this.requestUpdate()))}render(){return null!=i.RTCSession&&i.RTCSession?.status.toString(),B`
            <ha-card header="${this.config?.title||"Contacts"}">
                <div class="wrapper">
                    ${Object.entries(this.config?.extensions||{}).map((([e,t])=>{const n=e===i.user.extension,s=this.hass.states[t.status_entity||""]||null;if(t.hidden)return;if(n&&this.config?.hide_me)return;const r=s?t.override_icon:t.override_icon||"mdi:account";return t.edit?B`
                                <div class="flex">
                                    <state-badge
                                        .stateObj=${s}
                                        .overrideIcon=${r}
                                        .stateColor=${this.config?.state_color}
                                    ></state-badge>
                                    <ha-textfield
                                        id="custom_${t.name}"
                                        .value=${e}
                                        .label=${t.name}
                                        type="text"
                                        .inputmode="text"
                                        @keyup="${e=>{if("Enter"===e.key){var n=this.shadowRoot?.getElementById(`custom_${t.name}`);const e=n.value;i.startCall(e)}}}"
                                        class="editField"
                                    ></ha-textfield>
                                    <mwc-button @click="${()=>{var e=this.shadowRoot?.getElementById(`custom_${t.name}`);const n=e.value;i.startCall(n)}}">CALL</mwc-button>
                                </div>
                            `:B`
                                <div class="flex">
                                    <state-badge
                                        .stateObj=${s}
                                        .overrideIcon=${r}
                                        .stateColor=${this.config?.state_color}
                                    ></state-badge>
                                    <div class="info">${t.name}</div>
                                    <mwc-button @click="${()=>i.startCall(e)}">CALL</mwc-button>
                                </div>
                            `}))}
                </div>
            </ha-card>
        `}setConfig(e){this.config=e}static getStubConfig(){return{extensions:{100:{name:"John Doe"},101:{name:"Joe Smith"},102:{name:"Doorbell",override_icon:"mdi:doorbell"}}}}getCardSize(){return 3}}),window.customCards=window.customCards||[],window.customCards.push({type:"sip-contacts-card",name:"SIP Contacts Card",preview:!0,description:"Offical SIP Contacts Card"})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,